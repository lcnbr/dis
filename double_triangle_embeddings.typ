#import "@preview/cetz:0.3.1"
#{
let cols = (30%,30%,30%)

let node(pos)=cetz.draw.circle(pos,radius:0.02,fill: black)
let stroke = 0.7pt
let amplitude = 0.051
let arrow-scale = 0.8
let segment-length = 0.0521
let edge(..points,decoration:"",angle:0deg)={
    if decoration == "coil"{
    cetz.decorations.coil(cetz.draw.hobby(..points),amplitude:amplitude,stroke:stroke,align:"MID")
    } else if decoration == "wave" {
        cetz.decorations.wave(cetz.draw.hobby(..points),amplitude:amplitude,stroke:stroke)
    }  else if decoration == "arrow"{
        let points = points.pos()
        if points.len()==2{
          let center = (0.5*(points.at(0).at(0)+points.at(1).at(0)),0.5*(points.at(0).at(1)+points.at(1).at(1)))
          cetz.draw.hobby(..points,stroke:stroke)
          cetz.draw.mark(center,angle,symbol: ">", fill: black,anchor: "center",scale:arrow-scale)
        } else {
          let (first,center,..other)=points
          cetz.draw.hobby(first,center,..other,stroke:stroke)
            cetz.draw.mark(center,angle,symbol: ">", fill: black,anchor: "center",scale:arrow-scale)
        }

    }else {
            cetz.draw.hobby(..points,stroke:stroke)
    }
}
let embedding1i0=cetz.canvas(length:50%,{
let node0= (pos:(-0.72, -0.39))
node(node0.pos)
let node1= (pos:(-0.49, -0.12))
node(node1.pos)
let node2= (pos:(0.43, -0.77))
node(node2.pos)
let node3= (pos:(-0.79, 0.39))
node(node3.pos)
let node4= (pos:(-0.18, -0.71))
node(node4.pos)
let node5= (pos:(1.00, 0.93))
node(node5.pos)
edge(node1.pos,(0.66, 0.66),node0.pos,decoration:"arrow",angle:0.36rad)
cetz.draw.content((0.62, 0.77),angle:0.36rad,[q+k[0]])
cetz.draw.hobby((1.08, 0.85),(4.10, -4.11),(-1.35, -2.13),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.28, 0.83),node1.pos,decoration:"wave",angle:-0.83rad)
cetz.draw.content((0.37, 0.91),angle:-0.83rad,[q])
cetz.draw.hobby((-0.77, 0.73),(0.41, 0.75),(-0.19, -0.27),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(0.49, -0.62),node2.pos,decoration:"wave",angle:1.35rad)
cetz.draw.content((0.60, -0.65),angle:1.35rad,[q])
cetz.draw.hobby((-0.70, -0.16),(0.10, 0.15),(0.55, -0.58),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(0.14, 0.82),node5.pos,decoration:"arrow",angle:3.77rad)
cetz.draw.content((0.07, 0.91),angle:3.77rad,[q+k[3]])
cetz.draw.hobby((0.13, -0.70),(-0.24, 0.40),(0.72, 1.05),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-0.93, -0.38),node3.pos,decoration:"arrow",angle:2.04rad)
cetz.draw.content((-1.04, -0.44),angle:2.04rad,[1/2 p+1/2 q-1/2 k[3]])
cetz.draw.hobby((-0.35, -0.80),(-0.97, -0.43),(-0.95, 0.29),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-0.53, 0.81),node2.pos,decoration:"arrow",angle:4.01rad)
cetz.draw.content((-0.62, 0.89),angle:4.01rad,[k[3]])
cetz.draw.hobby((-0.65, -0.40),(0.32, 1.22),(0.95, -0.55),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-0.54, -0.54),decoration:"arrow",angle:-0.68rad)
cetz.draw.content((-0.55, -0.37),angle:-0.68rad,[-k[0]])
cetz.draw.hobby((-0.58, -0.43),(-0.60, -0.41),stroke:stroke,mark: (end: ">"))
edge(node1.pos,(0.54, -0.54),decoration:"arrow",angle:2.75rad)
cetz.draw.content((0.07, -0.22),angle:2.75rad,[-k[0]])
cetz.draw.hobby((-0.38, -0.10),(0.47, -0.44),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.54, 0.00),decoration:"arrow",angle:-0.28rad)
cetz.draw.content((-0.09, 0.31),angle:-0.28rad,[1/2 p-1/2 q-1/2 k[3]])
cetz.draw.hobby((-0.68, 0.42),(0.46, 0.09),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(-0.54, 0.00),decoration:"arrow",angle:0.54rad)
cetz.draw.content((0.29, 0.36),angle:0.54rad,[1/2 p-1/2 q-1/2 k[3]])
cetz.draw.hobby((-0.42, 0.00),(0.95, 0.82),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(0.54, 0.54),decoration:"coil",angle:-2.44rad)
cetz.draw.content((0.85, 0.64),angle:-2.44rad,[1/2 p+1/2 q+1/2 k[3]])
cetz.draw.hobby((0.96, 0.82),(0.65, 0.56),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-0.54, 0.54),decoration:"coil",angle:4.99rad)
cetz.draw.content((-0.47, -0.12),angle:4.99rad,[1/2 p+1/2 q+1/2 k[3]])
cetz.draw.hobby((-0.57, 0.43),(-0.26, -0.63),stroke:stroke,mark: (end: ">"))
})
let embedding1f0=cetz.canvas(length:50%,{
let node0= (pos:(-0.72, -0.39))
node(node0.pos)
let node1= (pos:(-0.49, -0.11))
node(node1.pos)
let node2= (pos:(0.46, -0.77))
node(node2.pos)
let node3= (pos:(-0.79, 0.39))
node(node3.pos)
let node4= (pos:(-0.18, -0.71))
node(node4.pos)
let node5= (pos:(1.00, 0.93))
node(node5.pos)
edge(node0.pos,(0.66, 0.66),node1.pos,decoration:"arrow",angle:3.49rad)
edge(node3.pos,(0.28, 0.83),node1.pos,decoration:"wave",angle:-0.83rad)
edge(node0.pos,(0.49, -0.62),node2.pos,decoration:"wave",angle:1.50rad)
edge(node2.pos,(0.15, 0.82),node5.pos,decoration:"arrow",angle:3.77rad)
edge(node3.pos,(-0.93, -0.36),node5.pos,decoration:"arrow",angle:4.82rad)
edge(node4.pos,(-0.53, 0.81),node2.pos,decoration:"arrow",angle:4.02rad)
edge(node1.pos,(-0.54, -0.54),decoration:"arrow",angle:-1.67rad)
edge(node0.pos,(0.54, -0.54),decoration:"arrow",angle:3.02rad)
edge(node4.pos,(0.54, 0.00),decoration:"arrow",angle:0.78rad)
edge(node3.pos,(-0.54, 0.00),decoration:"arrow",angle:2.15rad)
edge(node5.pos,(0.54, 0.54),decoration:"coil",angle:-2.44rad)
edge(node4.pos,(-0.54, 0.54),decoration:"coil",angle:4.99rad)
})
let embedding2i0=cetz.canvas(length:50%,{
let node0= (pos:(-0.72, -0.39))
node(node0.pos)
let node1= (pos:(-0.49, -0.11))
node(node1.pos)
let node2= (pos:(0.46, -0.77))
node(node2.pos)
let node3= (pos:(-0.79, 0.39))
node(node3.pos)
let node4= (pos:(-0.18, -0.71))
node(node4.pos)
let node5= (pos:(1.00, 0.93))
node(node5.pos)
edge(node1.pos,(0.66, 0.66),node0.pos,decoration:"arrow",angle:0.35rad)
cetz.draw.content((0.62, 0.77),angle:0.35rad,[q+k[0]])
cetz.draw.hobby((1.01, 0.82),(3.94, -3.91),(-1.31, -2.06),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.28, 0.83),node1.pos,decoration:"wave",angle:-0.83rad)
cetz.draw.content((0.37, 0.91),angle:-0.83rad,[q])
cetz.draw.hobby((-0.77, 0.73),(0.41, 0.76),(-0.19, -0.26),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(0.49, -0.62),node2.pos,decoration:"wave",angle:1.50rad)
cetz.draw.content((0.61, -0.63),angle:1.50rad,[q])
cetz.draw.hobby((-0.68, -0.18),(0.08, 0.06),(0.55, -0.58),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(0.15, 0.82),node5.pos,decoration:"arrow",angle:3.77rad)
cetz.draw.content((0.08, 0.91),angle:3.77rad,[q+k[3]])
cetz.draw.hobby((0.16, -0.71),(-0.23, 0.38),(0.72, 1.05),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(-0.93, -0.36),node5.pos,decoration:"arrow",angle:4.82rad)
cetz.draw.content((-1.05, -0.37),angle:4.82rad,[p-q-2 k[3]])
cetz.draw.hobby((-1.00, -0.20),(0.76, -1.53),(1.50, 0.55),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-0.53, 0.81),node3.pos,decoration:"arrow",angle:3.89rad)
cetz.draw.content((-0.61, 0.90),angle:3.89rad,[p-2 k[3]])
cetz.draw.hobby((0.26, -0.80),(0.92, 0.62),(-0.63, 0.80),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-0.54, -0.54),decoration:"arrow",angle:-0.68rad)
cetz.draw.content((-0.55, -0.37),angle:-0.68rad,[-k[0]])
cetz.draw.hobby((-0.58, -0.43),(-0.60, -0.41),stroke:stroke,mark: (end: ">"))
edge(node1.pos,(0.54, -0.54),decoration:"arrow",angle:2.75rad)
cetz.draw.content((0.07, -0.21),angle:2.75rad,[-k[0]])
cetz.draw.hobby((-0.38, -0.09),(0.47, -0.44),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(0.54, 0.00),decoration:"arrow",angle:3.92rad)
cetz.draw.content((0.10, -0.27),angle:3.92rad,[k[3]])
cetz.draw.hobby((-0.15, -0.60),(0.43, -0.03),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(-0.54, 0.00),decoration:"arrow",angle:2.48rad)
cetz.draw.content((-0.12, -0.48),angle:2.48rad,[k[3]])
cetz.draw.hobby((-0.50, -0.11),(0.34, -0.76),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(0.54, 0.54),decoration:"coil",angle:-2.44rad)
cetz.draw.content((0.85, 0.64),angle:-2.44rad,[p-k[3]])
cetz.draw.hobby((0.96, 0.82),(0.65, 0.56),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-0.54, 0.54),decoration:"coil",angle:4.99rad)
cetz.draw.content((-0.47, -0.12),angle:4.99rad,[p-k[3]])
cetz.draw.hobby((-0.57, 0.43),(-0.26, -0.63),stroke:stroke,mark: (end: ">"))
})
let embedding2f0=cetz.canvas(length:50%,{
let node0= (pos:(-0.72, -0.39))
node(node0.pos)
let node1= (pos:(-0.49, -0.11))
node(node1.pos)
let node2= (pos:(0.43, -0.77))
node(node2.pos)
let node3= (pos:(-0.79, 0.39))
node(node3.pos)
let node4= (pos:(-0.18, -0.71))
node(node4.pos)
let node5= (pos:(1.00, 0.93))
node(node5.pos)
edge(node0.pos,(0.66, 0.66),node1.pos,decoration:"arrow",angle:3.49rad)
edge(node3.pos,(0.28, 0.83),node1.pos,decoration:"wave",angle:-0.83rad)
edge(node0.pos,(0.49, -0.62),node2.pos,decoration:"wave",angle:1.35rad)
edge(node3.pos,(0.14, 0.82),node5.pos,decoration:"arrow",angle:0.27rad)
edge(node4.pos,(-0.93, -0.38),node3.pos,decoration:"arrow",angle:2.04rad)
edge(node4.pos,(-0.53, 0.81),node2.pos,decoration:"arrow",angle:4.01rad)
edge(node1.pos,(-0.54, -0.54),decoration:"arrow",angle:-1.67rad)
edge(node0.pos,(0.54, -0.54),decoration:"arrow",angle:3.02rad)
edge(node2.pos,(0.54, 0.00),decoration:"arrow",angle:4.57rad)
edge(node5.pos,(-0.54, 0.00),decoration:"arrow",angle:-2.60rad)
edge(node5.pos,(0.54, 0.54),decoration:"coil",angle:-2.44rad)
edge(node4.pos,(-0.54, 0.54),decoration:"coil",angle:4.99rad)
})
let embedding3i0=cetz.canvas(length:50%,{
let node0= (pos:(-0.72, -0.39))
node(node0.pos)
let node1= (pos:(-0.49, -0.11))
node(node1.pos)
let node2= (pos:(0.43, -0.77))
node(node2.pos)
let node3= (pos:(-0.79, 0.39))
node(node3.pos)
let node4= (pos:(-0.18, -0.71))
node(node4.pos)
let node5= (pos:(1.00, 0.93))
node(node5.pos)
edge(node1.pos,(0.66, 0.66),node0.pos,decoration:"arrow",angle:0.35rad)
cetz.draw.content((0.62, 0.77),angle:0.35rad,[q+k[0]])
cetz.draw.hobby((1.01, 0.82),(3.94, -3.91),(-1.31, -2.06),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.28, 0.83),node1.pos,decoration:"wave",angle:-0.83rad)
cetz.draw.content((0.37, 0.91),angle:-0.83rad,[q])
cetz.draw.hobby((-0.77, 0.73),(0.41, 0.76),(-0.19, -0.26),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(0.49, -0.62),node2.pos,decoration:"wave",angle:1.35rad)
cetz.draw.content((0.60, -0.65),angle:1.35rad,[q])
cetz.draw.hobby((-0.70, -0.16),(0.10, 0.15),(0.55, -0.58),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(0.14, 0.82),node3.pos,decoration:"arrow",angle:2.86rad)
cetz.draw.content((0.18, 0.93),angle:2.86rad,[p-k[3]])
cetz.draw.hobby((0.18, -0.74),(0.66, 0.47),(-0.62, 0.71),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-0.93, -0.40),node2.pos,decoration:"arrow",angle:5.72rad)
cetz.draw.content((-1.00, -0.50),angle:5.72rad,[k[3]])
cetz.draw.hobby((-1.47, -0.03),(0.61, 4.15),(1.83, -0.36),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(-0.53, 0.81),node4.pos,decoration:"coil",angle:4.06rad)
cetz.draw.content((-0.63, 0.89),angle:4.06rad,[p])
cetz.draw.hobby((0.74, 1.18),(-0.60, 0.83),(-0.50, -0.55),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-0.54, -0.54),decoration:"arrow",angle:-0.68rad)
cetz.draw.content((-0.55, -0.37),angle:-0.68rad,[-k[0]])
cetz.draw.hobby((-0.58, -0.43),(-0.60, -0.41),stroke:stroke,mark: (end: ">"))
edge(node1.pos,(0.54, -0.54),decoration:"arrow",angle:2.75rad)
cetz.draw.content((0.07, -0.21),angle:2.75rad,[-k[0]])
cetz.draw.hobby((-0.38, -0.09),(0.47, -0.44),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(0.54, 0.00),decoration:"arrow",angle:4.57rad)
cetz.draw.content((0.36, -0.37),angle:4.57rad,[q+k[3]])
cetz.draw.hobby((0.38, -0.67),(0.46, -0.09),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(-0.54, 0.00),decoration:"arrow",angle:-2.60rad)
cetz.draw.content((0.29, 0.36),angle:-2.60rad,[q+k[3]])
cetz.draw.hobby((-0.42, 0.00),(0.95, 0.82),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.54, 0.54),decoration:"arrow",angle:0.11rad)
cetz.draw.content((-0.14, 0.58),angle:0.11rad,[p-q-k[3]])
cetz.draw.hobby((-0.70, 0.46),(0.43, 0.59),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(-0.54, 0.54),decoration:"arrow",angle:0.25rad)
cetz.draw.content((0.26, 0.62),angle:0.25rad,[p-q-k[3]])
cetz.draw.hobby((-0.43, 0.50),(0.92, 0.84),stroke:stroke,mark: (end: ">"))
})
let embedding3i1=cetz.canvas(length:50%,{
let node0= (pos:(-0.72, -0.39))
node(node0.pos)
let node1= (pos:(-0.49, -0.11))
node(node1.pos)
let node2= (pos:(0.43, -0.77))
node(node2.pos)
let node3= (pos:(-0.79, 0.39))
node(node3.pos)
let node4= (pos:(-0.16, -0.71))
node(node4.pos)
let node5= (pos:(1.00, 0.93))
node(node5.pos)
edge(node1.pos,(0.66, 0.66),node0.pos,decoration:"arrow",angle:0.35rad)
cetz.draw.content((0.62, 0.77),angle:0.35rad,[q+k[0]])
cetz.draw.hobby((1.01, 0.82),(3.94, -3.91),(-1.31, -2.06),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.28, 0.83),node1.pos,decoration:"wave",angle:-0.83rad)
cetz.draw.content((0.37, 0.91),angle:-0.83rad,[q])
cetz.draw.hobby((-0.77, 0.73),(0.41, 0.76),(-0.19, -0.26),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(0.49, -0.62),node2.pos,decoration:"wave",angle:1.35rad)
cetz.draw.content((0.60, -0.65),angle:1.35rad,[q])
cetz.draw.hobby((-0.70, -0.16),(0.10, 0.15),(0.55, -0.58),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(0.14, 0.82),node5.pos,decoration:"arrow",angle:3.77rad)
cetz.draw.content((0.07, 0.91),angle:3.77rad,[q+k[3]])
cetz.draw.hobby((0.13, -0.70),(-0.24, 0.40),(0.72, 1.05),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(-0.93, -0.38),node5.pos,decoration:"arrow",angle:4.83rad)
cetz.draw.content((-1.05, -0.40),angle:4.83rad,[p-q-k[3]])
cetz.draw.hobby((-1.00, -0.20),(0.77, -1.54),(1.50, 0.55),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(-0.53, 0.81),node4.pos,decoration:"coil",angle:4.07rad)
cetz.draw.content((-0.63, 0.89),angle:4.07rad,[p])
cetz.draw.hobby((0.74, 1.18),(-0.60, 0.83),(-0.49, -0.55),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-0.54, -0.54),decoration:"arrow",angle:-0.68rad)
cetz.draw.content((-0.55, -0.37),angle:-0.68rad,[-k[0]])
cetz.draw.hobby((-0.58, -0.43),(-0.60, -0.41),stroke:stroke,mark: (end: ">"))
edge(node1.pos,(0.54, -0.54),decoration:"arrow",angle:2.75rad)
cetz.draw.content((0.07, -0.21),angle:2.75rad,[-k[0]])
cetz.draw.hobby((-0.38, -0.09),(0.47, -0.44),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(0.54, 0.00),decoration:"arrow",angle:0.79rad)
cetz.draw.content((0.10, -0.27),angle:0.79rad,[p-k[3]])
cetz.draw.hobby((-0.14, -0.60),(0.43, -0.03),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(-0.54, 0.00),decoration:"arrow",angle:2.15rad)
cetz.draw.content((-0.56, 0.26),angle:2.15rad,[p-k[3]])
cetz.draw.hobby((-0.54, 0.12),(-0.69, 0.34),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(0.54, 0.54),decoration:"arrow",angle:4.20rad)
cetz.draw.content((0.08, -0.03),angle:4.20rad,[k[3]])
cetz.draw.hobby((-0.17, -0.60),(0.44, 0.48),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(-0.54, 0.54),decoration:"arrow",angle:2.21rad)
cetz.draw.content((-0.15, -0.19),angle:2.21rad,[k[3]])
cetz.draw.hobby((-0.53, 0.42),(0.32, -0.73),stroke:stroke,mark: (end: ">"))
})
let embedding3i2=cetz.canvas(length:50%,{
let node0= (pos:(-0.72, -0.39))
node(node0.pos)
let node1= (pos:(-0.49, -0.11))
node(node1.pos)
let node2= (pos:(0.46, -0.77))
node(node2.pos)
let node3= (pos:(-0.79, 0.39))
node(node3.pos)
let node4= (pos:(-0.16, -0.71))
node(node4.pos)
let node5= (pos:(1.00, 0.93))
node(node5.pos)
edge(node1.pos,(0.66, 0.66),node0.pos,decoration:"arrow",angle:0.35rad)
cetz.draw.content((0.62, 0.77),angle:0.35rad,[q+k[0]])
cetz.draw.hobby((1.01, 0.82),(3.94, -3.91),(-1.31, -2.06),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.28, 0.83),node1.pos,decoration:"wave",angle:-0.83rad)
cetz.draw.content((0.37, 0.91),angle:-0.83rad,[q])
cetz.draw.hobby((-0.77, 0.73),(0.41, 0.76),(-0.19, -0.26),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(0.49, -0.62),node2.pos,decoration:"wave",angle:1.50rad)
cetz.draw.content((0.61, -0.63),angle:1.50rad,[q])
cetz.draw.hobby((-0.68, -0.18),(0.08, 0.06),(0.55, -0.58),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(0.15, 0.82),node5.pos,decoration:"arrow",angle:3.77rad)
cetz.draw.content((0.08, 0.91),angle:3.77rad,[q+k[3]])
cetz.draw.hobby((0.16, -0.71),(-0.23, 0.38),(0.72, 1.05),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(-0.93, -0.36),node5.pos,decoration:"arrow",angle:4.82rad)
cetz.draw.content((-1.05, -0.37),angle:4.82rad,[p-q-k[3]])
cetz.draw.hobby((-1.00, -0.20),(0.76, -1.53),(1.50, 0.55),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-0.53, 0.81),node3.pos,decoration:"arrow",angle:3.89rad)
cetz.draw.content((-0.61, 0.90),angle:3.89rad,[p-k[3]])
cetz.draw.hobby((0.27, -0.79),(0.91, 0.63),(-0.63, 0.80),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(0.59, -0.43),node2.pos,decoration:"arrow",angle:1.65rad)
cetz.draw.content((0.71, -0.42),angle:1.65rad,[k[3]])
cetz.draw.hobby((-0.30, -0.55),(0.22, 0.01),(0.62, -0.64),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-0.54, -0.54),decoration:"arrow",angle:-0.68rad)
cetz.draw.content((-0.55, -0.37),angle:-0.68rad,[-k[0]])
cetz.draw.hobby((-0.58, -0.43),(-0.60, -0.41),stroke:stroke,mark: (end: ">"))
edge(node1.pos,(0.54, -0.54),decoration:"arrow",angle:2.75rad)
cetz.draw.content((0.07, -0.21),angle:2.75rad,[-k[0]])
cetz.draw.hobby((-0.38, -0.09),(0.47, -0.44),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(0.54, 0.54),decoration:"coil",angle:-2.44rad)
cetz.draw.content((0.85, 0.64),angle:-2.44rad,[p])
cetz.draw.hobby((0.96, 0.82),(0.65, 0.56),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-0.54, 0.54),decoration:"coil",angle:5.00rad)
cetz.draw.content((-0.47, -0.12),angle:5.00rad,[p])
cetz.draw.hobby((-0.57, 0.43),(-0.25, -0.64),stroke:stroke,mark: (end: ">"))
})
let embedding3f0=cetz.canvas(length:50%,{
let node0= (pos:(-0.72, -0.39))
node(node0.pos)
let node1= (pos:(-0.49, -0.12))
node(node1.pos)
let node2= (pos:(0.43, -0.77))
node(node2.pos)
let node3= (pos:(-0.79, 0.39))
node(node3.pos)
let node4= (pos:(-0.18, -0.71))
node(node4.pos)
let node5= (pos:(1.00, 0.93))
node(node5.pos)
edge(node0.pos,(0.66, 0.66),node1.pos,decoration:"arrow",angle:3.50rad)
edge(node3.pos,(0.28, 0.83),node1.pos,decoration:"wave",angle:-0.83rad)
edge(node0.pos,(0.49, -0.62),node2.pos,decoration:"wave",angle:1.35rad)
edge(node3.pos,(0.14, 0.82),node5.pos,decoration:"arrow",angle:0.27rad)
edge(node4.pos,(-0.93, -0.40),node2.pos,decoration:"arrow",angle:5.72rad)
edge(node5.pos,(-0.53, 0.81),node4.pos,decoration:"coil",angle:4.06rad)
edge(node1.pos,(-0.54, -0.54),decoration:"arrow",angle:-1.67rad)
edge(node0.pos,(0.54, -0.54),decoration:"arrow",angle:3.02rad)
edge(node2.pos,(0.54, 0.00),decoration:"arrow",angle:4.57rad)
edge(node5.pos,(-0.54, 0.00),decoration:"arrow",angle:-2.60rad)
edge(node4.pos,(0.54, 0.54),decoration:"arrow",angle:1.05rad)
edge(node3.pos,(-0.54, 0.54),decoration:"arrow",angle:3.68rad)
})
let embedding4i0=cetz.canvas(length:50%,{
let node0= (pos:(-0.72, -0.39))
node(node0.pos)
let node1= (pos:(-0.49, -0.11))
node(node1.pos)
let node2= (pos:(0.43, -0.77))
node(node2.pos)
let node3= (pos:(-0.79, 0.39))
node(node3.pos)
let node4= (pos:(-0.18, -0.71))
node(node4.pos)
let node5= (pos:(1.00, 0.93))
node(node5.pos)
edge(node1.pos,(0.66, 0.66),node0.pos,decoration:"arrow",angle:0.35rad)
cetz.draw.content((0.62, 0.77),angle:0.35rad,[q+k[0]])
cetz.draw.hobby((1.01, 0.82),(3.94, -3.91),(-1.31, -2.06),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.28, 0.83),node1.pos,decoration:"wave",angle:-0.83rad)
cetz.draw.content((0.37, 0.91),angle:-0.83rad,[q])
cetz.draw.hobby((-0.77, 0.73),(0.41, 0.76),(-0.19, -0.26),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(0.49, -0.62),node2.pos,decoration:"wave",angle:1.33rad)
cetz.draw.content((0.60, -0.65),angle:1.33rad,[q])
cetz.draw.hobby((-0.70, -0.16),(0.10, 0.16),(0.56, -0.58),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(0.14, 0.82),node5.pos,decoration:"arrow",angle:3.77rad)
cetz.draw.content((0.07, 0.91),angle:3.77rad,[q+k[3]])
cetz.draw.hobby((0.13, -0.70),(-0.24, 0.40),(0.72, 1.05),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-0.93, -0.38),node3.pos,decoration:"arrow",angle:2.04rad)
cetz.draw.content((-1.04, -0.44),angle:2.04rad,[p+q-k[3]])
cetz.draw.hobby((-0.35, -0.80),(-0.97, -0.43),(-0.95, 0.29),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(-0.53, 0.81),node4.pos,decoration:"coil",angle:4.06rad)
cetz.draw.content((-0.63, 0.89),angle:4.06rad,[p+q])
cetz.draw.hobby((0.74, 1.18),(-0.60, 0.83),(-0.50, -0.55),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-0.54, -0.54),decoration:"arrow",angle:-0.68rad)
cetz.draw.content((-0.55, -0.37),angle:-0.68rad,[-k[0]])
cetz.draw.hobby((-0.58, -0.43),(-0.60, -0.41),stroke:stroke,mark: (end: ">"))
edge(node1.pos,(0.54, -0.54),decoration:"arrow",angle:2.75rad)
cetz.draw.content((0.07, -0.21),angle:2.75rad,[-k[0]])
cetz.draw.hobby((-0.38, -0.09),(0.47, -0.44),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.54, 0.00),decoration:"arrow",angle:-0.28rad)
cetz.draw.content((-0.09, 0.31),angle:-0.28rad,[p-k[3]])
cetz.draw.hobby((-0.68, 0.42),(0.46, 0.09),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(-0.54, 0.00),decoration:"arrow",angle:0.54rad)
cetz.draw.content((0.29, 0.36),angle:0.54rad,[p-k[3]])
cetz.draw.hobby((-0.42, 0.00),(0.95, 0.82),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(0.54, 0.54),decoration:"arrow",angle:4.19rad)
cetz.draw.content((0.08, -0.03),angle:4.19rad,[k[3]])
cetz.draw.hobby((-0.18, -0.60),(0.44, 0.48),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(-0.54, 0.54),decoration:"arrow",angle:2.21rad)
cetz.draw.content((-0.15, -0.19),angle:2.21rad,[k[3]])
cetz.draw.hobby((-0.53, 0.42),(0.32, -0.73),stroke:stroke,mark: (end: ">"))
})
let embedding4f0=cetz.canvas(length:50%,{
let node0= (pos:(-0.72, -0.39))
node(node0.pos)
let node1= (pos:(-0.49, -0.11))
node(node1.pos)
let node2= (pos:(0.46, -0.77))
node(node2.pos)
let node3= (pos:(-0.79, 0.39))
node(node3.pos)
let node4= (pos:(-0.16, -0.71))
node(node4.pos)
let node5= (pos:(1.00, 0.93))
node(node5.pos)
edge(node0.pos,(0.66, 0.66),node1.pos,decoration:"arrow",angle:3.49rad)
edge(node3.pos,(0.28, 0.83),node1.pos,decoration:"wave",angle:-0.83rad)
edge(node0.pos,(0.49, -0.62),node2.pos,decoration:"wave",angle:1.50rad)
edge(node2.pos,(0.15, 0.82),node5.pos,decoration:"arrow",angle:3.77rad)
edge(node3.pos,(-0.93, -0.36),node5.pos,decoration:"arrow",angle:4.82rad)
edge(node4.pos,(-0.53, 0.81),node3.pos,decoration:"arrow",angle:3.89rad)
edge(node4.pos,(0.59, -0.43),node2.pos,decoration:"arrow",angle:1.65rad)
edge(node1.pos,(-0.54, -0.54),decoration:"arrow",angle:-1.67rad)
edge(node0.pos,(0.54, -0.54),decoration:"arrow",angle:3.02rad)
edge(node5.pos,(0.54, 0.54),decoration:"coil",angle:-2.44rad)
edge(node4.pos,(-0.54, 0.54),decoration:"coil",angle:5.00rad)
})
let embedding4f1=cetz.canvas(length:50%,{
let node0= (pos:(-0.72, -0.39))
node(node0.pos)
let node1= (pos:(-0.49, -0.11))
node(node1.pos)
let node2= (pos:(0.46, -0.77))
node(node2.pos)
let node3= (pos:(-0.79, 0.39))
node(node3.pos)
let node4= (pos:(-0.16, -0.71))
node(node4.pos)
let node5= (pos:(1.00, 0.93))
node(node5.pos)
edge(node0.pos,(0.66, 0.66),node1.pos,decoration:"arrow",angle:3.49rad)
edge(node3.pos,(0.28, 0.83),node1.pos,decoration:"wave",angle:-0.83rad)
edge(node0.pos,(0.49, -0.62),node2.pos,decoration:"wave",angle:1.50rad)
edge(node2.pos,(0.15, 0.82),node5.pos,decoration:"arrow",angle:3.77rad)
edge(node3.pos,(-0.93, -0.36),node5.pos,decoration:"arrow",angle:4.82rad)
edge(node5.pos,(-0.53, 0.81),node4.pos,decoration:"coil",angle:4.07rad)
edge(node1.pos,(-0.54, -0.54),decoration:"arrow",angle:-1.67rad)
edge(node0.pos,(0.54, -0.54),decoration:"arrow",angle:3.02rad)
edge(node4.pos,(0.54, 0.00),decoration:"arrow",angle:0.79rad)
edge(node3.pos,(-0.54, 0.00),decoration:"arrow",angle:2.15rad)
edge(node4.pos,(0.54, 0.54),decoration:"arrow",angle:4.20rad)
edge(node2.pos,(-0.54, 0.54),decoration:"arrow",angle:2.22rad)
})
let embedding4f2=cetz.canvas(length:50%,{
let node0= (pos:(-0.72, -0.39))
node(node0.pos)
let node1= (pos:(-0.49, -0.11))
node(node1.pos)
let node2= (pos:(0.43, -0.77))
node(node2.pos)
let node3= (pos:(-0.79, 0.39))
node(node3.pos)
let node4= (pos:(-0.18, -0.71))
node(node4.pos)
let node5= (pos:(1.00, 0.93))
node(node5.pos)
edge(node0.pos,(0.66, 0.66),node1.pos,decoration:"arrow",angle:3.49rad)
edge(node3.pos,(0.28, 0.83),node1.pos,decoration:"wave",angle:-0.83rad)
edge(node0.pos,(0.49, -0.62),node2.pos,decoration:"wave",angle:1.35rad)
edge(node4.pos,(0.14, 0.82),node3.pos,decoration:"arrow",angle:2.86rad)
edge(node4.pos,(-0.93, -0.40),node2.pos,decoration:"arrow",angle:5.72rad)
edge(node5.pos,(-0.53, 0.81),node4.pos,decoration:"coil",angle:4.06rad)
edge(node1.pos,(-0.54, -0.54),decoration:"arrow",angle:-1.67rad)
edge(node0.pos,(0.54, -0.54),decoration:"arrow",angle:3.02rad)
edge(node2.pos,(0.54, 0.00),decoration:"arrow",angle:4.57rad)
edge(node5.pos,(-0.54, 0.00),decoration:"arrow",angle:-2.60rad)
edge(node3.pos,(0.54, 0.54),decoration:"arrow",angle:0.11rad)
edge(node5.pos,(-0.54, 0.54),decoration:"arrow",angle:0.25rad)
})
let embedding5i0=cetz.canvas(length:50%,{
let node0= (pos:(-0.72, -0.39))
node(node0.pos)
let node1= (pos:(-0.49, -0.11))
node(node1.pos)
let node2= (pos:(0.43, -0.77))
node(node2.pos)
let node3= (pos:(-0.79, 0.39))
node(node3.pos)
let node4= (pos:(-0.18, -0.71))
node(node4.pos)
let node5= (pos:(1.00, 0.93))
node(node5.pos)
edge(node1.pos,(0.66, 0.66),node0.pos,decoration:"arrow",angle:0.35rad)
cetz.draw.content((0.62, 0.77),angle:0.35rad,[q+k[0]])
cetz.draw.hobby((1.01, 0.82),(3.94, -3.91),(-1.31, -2.06),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.28, 0.83),node1.pos,decoration:"wave",angle:-0.83rad)
cetz.draw.content((0.37, 0.91),angle:-0.83rad,[q])
cetz.draw.hobby((-0.77, 0.73),(0.41, 0.76),(-0.19, -0.26),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(0.49, -0.62),node2.pos,decoration:"wave",angle:1.35rad)
cetz.draw.content((0.60, -0.65),angle:1.35rad,[q])
cetz.draw.hobby((-0.70, -0.16),(0.10, 0.15),(0.55, -0.58),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(0.14, 0.82),node5.pos,decoration:"arrow",angle:3.77rad)
cetz.draw.content((0.07, 0.91),angle:3.77rad,[q+k[3]])
cetz.draw.hobby((0.13, -0.70),(-0.24, 0.40),(0.72, 1.05),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-0.93, -0.38),node3.pos,decoration:"arrow",angle:2.04rad)
cetz.draw.content((-1.04, -0.44),angle:2.04rad,[p+q])
cetz.draw.hobby((-0.35, -0.80),(-0.97, -0.43),(-0.95, 0.29),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-0.53, 0.81),node2.pos,decoration:"arrow",angle:4.01rad)
cetz.draw.content((-0.62, 0.89),angle:4.01rad,[k[3]])
cetz.draw.hobby((-0.65, -0.40),(0.32, 1.22),(0.95, -0.55),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(0.59, -0.43),node4.pos,decoration:"coil",angle:-2.46rad)
cetz.draw.content((0.66, -0.53),angle:-2.46rad,[p+q+k[3]])
cetz.draw.hobby((1.11, 0.70),(0.87, -0.22),(0.07, -0.75),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-0.54, -0.54),decoration:"arrow",angle:-0.68rad)
cetz.draw.content((-0.55, -0.37),angle:-0.68rad,[-k[0]])
cetz.draw.hobby((-0.58, -0.43),(-0.60, -0.41),stroke:stroke,mark: (end: ">"))
edge(node1.pos,(0.54, -0.54),decoration:"arrow",angle:2.75rad)
cetz.draw.content((0.07, -0.21),angle:2.75rad,[-k[0]])
cetz.draw.hobby((-0.38, -0.09),(0.47, -0.44),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.54, 0.54),decoration:"arrow",angle:0.11rad)
cetz.draw.content((-0.14, 0.58),angle:0.11rad,[p])
cetz.draw.hobby((-0.70, 0.46),(0.43, 0.59),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(-0.54, 0.54),decoration:"arrow",angle:0.25rad)
cetz.draw.content((0.26, 0.62),angle:0.25rad,[p])
cetz.draw.hobby((-0.43, 0.50),(0.92, 0.84),stroke:stroke,mark: (end: ">"))
})
let embedding5i1=cetz.canvas(length:50%,{
let node0= (pos:(-0.70, -0.38))
node(node0.pos)
let node1= (pos:(-0.48, -0.09))
node(node1.pos)
let node2= (pos:(0.42, -0.76))
node(node2.pos)
let node3= (pos:(-0.77, 0.36))
node(node3.pos)
let node4= (pos:(-0.17, -0.70))
node(node4.pos)
let node5= (pos:(1.00, 0.91))
node(node5.pos)
edge(node1.pos,(0.62, 0.64),node0.pos,decoration:"arrow",angle:0.32rad)
cetz.draw.content((0.58, 0.76),angle:0.32rad,[q+k[0]])
cetz.draw.hobby((0.82, 0.76),(3.51, -3.34),(-1.17, -1.87),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.27, 0.81),node1.pos,decoration:"wave",angle:-0.86rad)
cetz.draw.content((0.37, 0.89),angle:-0.86rad,[q])
cetz.draw.hobby((-0.78, 0.69),(0.37, 0.78),(-0.18, -0.24),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(0.47, -0.60),node2.pos,decoration:"wave",angle:1.38rad)
cetz.draw.content((0.59, -0.62),angle:1.38rad,[q])
cetz.draw.hobby((-0.68, -0.16),(0.10, 0.14),(0.54, -0.57),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.14, 0.80),node5.pos,decoration:"arrow",angle:0.28rad)
cetz.draw.content((0.11, 0.91),angle:0.28rad,[p])
cetz.draw.hobby((-0.65, 0.51),(0.05, 0.83),(0.81, 0.96),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-0.93, -0.37),node3.pos,decoration:"arrow",angle:2.01rad)
cetz.draw.content((-1.04, -0.42),angle:2.01rad,[p+q])
cetz.draw.hobby((-0.34, -0.79),(-0.96, -0.45),(-0.93, 0.26),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-0.52, 0.79),node2.pos,decoration:"arrow",angle:4.01rad)
cetz.draw.content((-0.61, 0.87),angle:4.01rad,[k[3]])
cetz.draw.hobby((-0.63, -0.39),(0.31, 1.19),(0.93, -0.54),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-0.53, -0.53),decoration:"arrow",angle:-0.68rad)
cetz.draw.content((-0.54, -0.36),angle:-0.68rad,[-k[0]])
cetz.draw.hobby((-0.56, -0.42),(-0.59, -0.40),stroke:stroke,mark: (end: ">"))
edge(node1.pos,(0.53, -0.53),decoration:"arrow",angle:2.74rad)
cetz.draw.content((0.07, -0.20),angle:2.74rad,[-k[0]])
cetz.draw.hobby((-0.37, -0.08),(0.46, -0.43),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(-0.53, 0.00),decoration:"arrow",angle:5.61rad)
cetz.draw.content((-0.13, -0.47),angle:5.61rad,[-q-k[3]])
cetz.draw.hobby((-0.48, -0.11),(0.30, -0.74),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(0.53, 0.00),decoration:"arrow",angle:-2.05rad)
cetz.draw.content((0.87, 0.40),angle:-2.05rad,[-q-k[3]])
cetz.draw.hobby((1.01, 0.79),(0.62, 0.06),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(0.53, 0.53),decoration:"coil",angle:-2.47rad)
cetz.draw.content((0.84, 0.62),angle:-2.47rad,[p+q+k[3]])
cetz.draw.hobby((0.96, 0.80),(0.64, 0.54),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-0.53, 0.53),decoration:"coil",angle:4.99rad)
cetz.draw.content((-0.47, -0.12),angle:4.99rad,[p+q+k[3]])
cetz.draw.hobby((-0.56, 0.41),(-0.26, -0.62),stroke:stroke,mark: (end: ">"))
})
let embedding5f0=cetz.canvas(length:50%,{
let node0= (pos:(-0.72, -0.39))
node(node0.pos)
let node1= (pos:(-0.49, -0.11))
node(node1.pos)
let node2= (pos:(0.46, -0.77))
node(node2.pos)
let node3= (pos:(-0.79, 0.39))
node(node3.pos)
let node4= (pos:(-0.16, -0.71))
node(node4.pos)
let node5= (pos:(1.00, 0.93))
node(node5.pos)
edge(node0.pos,(0.66, 0.66),node1.pos,decoration:"arrow",angle:3.49rad)
edge(node3.pos,(0.28, 0.83),node1.pos,decoration:"wave",angle:-0.83rad)
edge(node0.pos,(0.49, -0.62),node2.pos,decoration:"wave",angle:1.50rad)
edge(node2.pos,(0.15, 0.82),node5.pos,decoration:"arrow",angle:3.77rad)
edge(node3.pos,(-0.93, -0.36),node5.pos,decoration:"arrow",angle:4.82rad)
edge(node4.pos,(-0.53, 0.81),node2.pos,decoration:"arrow",angle:4.03rad)
edge(node5.pos,(0.59, -0.43),node4.pos,decoration:"coil",angle:-2.46rad)
edge(node1.pos,(-0.54, -0.54),decoration:"arrow",angle:-1.67rad)
edge(node0.pos,(0.54, -0.54),decoration:"arrow",angle:3.02rad)
edge(node4.pos,(0.54, 0.54),decoration:"arrow",angle:1.06rad)
edge(node3.pos,(-0.54, 0.54),decoration:"arrow",angle:3.68rad)
})
let embedding5f1=cetz.canvas(length:50%,{
let node0= (pos:(-0.72, -0.39))
node(node0.pos)
let node1= (pos:(-0.49, -0.11))
node(node1.pos)
let node2= (pos:(0.46, -0.77))
node(node2.pos)
let node3= (pos:(-0.79, 0.39))
node(node3.pos)
let node4= (pos:(-0.18, -0.71))
node(node4.pos)
let node5= (pos:(1.00, 0.93))
node(node5.pos)
edge(node0.pos,(0.66, 0.66),node1.pos,decoration:"arrow",angle:3.49rad)
edge(node3.pos,(0.28, 0.83),node1.pos,decoration:"wave",angle:-0.83rad)
edge(node0.pos,(0.49, -0.62),node2.pos,decoration:"wave",angle:1.50rad)
edge(node2.pos,(0.15, 0.82),node5.pos,decoration:"arrow",angle:3.77rad)
edge(node3.pos,(-0.93, -0.36),node5.pos,decoration:"arrow",angle:4.82rad)
edge(node4.pos,(-0.53, 0.81),node3.pos,decoration:"arrow",angle:3.89rad)
edge(node1.pos,(-0.54, -0.54),decoration:"arrow",angle:-1.67rad)
edge(node0.pos,(0.54, -0.54),decoration:"arrow",angle:3.02rad)
edge(node4.pos,(-0.54, 0.00),decoration:"arrow",angle:5.18rad)
edge(node2.pos,(0.54, 0.00),decoration:"arrow",angle:1.46rad)
edge(node5.pos,(0.54, 0.54),decoration:"coil",angle:-2.44rad)
edge(node4.pos,(-0.54, 0.54),decoration:"coil",angle:4.99rad)
})
let embedding6i0=cetz.canvas(length:50%,{
let node0= (pos:(-0.72, -0.39))
node(node0.pos)
let node1= (pos:(-0.49, -0.11))
node(node1.pos)
let node2= (pos:(0.46, -0.77))
node(node2.pos)
let node3= (pos:(-0.79, 0.39))
node(node3.pos)
let node4= (pos:(-0.18, -0.71))
node(node4.pos)
let node5= (pos:(1.00, 0.93))
node(node5.pos)
edge(node1.pos,(0.66, 0.66),node0.pos,decoration:"arrow",angle:0.35rad)
cetz.draw.content((0.62, 0.77),angle:0.35rad,[q+k[0]])
cetz.draw.hobby((1.01, 0.82),(3.94, -3.91),(-1.31, -2.06),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.28, 0.83),node1.pos,decoration:"wave",angle:-0.83rad)
cetz.draw.content((0.37, 0.91),angle:-0.83rad,[q])
cetz.draw.hobby((-0.77, 0.73),(0.41, 0.76),(-0.19, -0.26),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(0.49, -0.62),node2.pos,decoration:"wave",angle:1.50rad)
cetz.draw.content((0.61, -0.63),angle:1.50rad,[q])
cetz.draw.hobby((-0.68, -0.18),(0.08, 0.06),(0.55, -0.58),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(0.15, 0.82),node5.pos,decoration:"arrow",angle:3.77rad)
cetz.draw.content((0.08, 0.91),angle:3.77rad,[q+k[3]])
cetz.draw.hobby((0.16, -0.71),(-0.23, 0.38),(0.72, 1.05),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-0.93, -0.36),node3.pos,decoration:"arrow",angle:2.00rad)
cetz.draw.content((-1.04, -0.41),angle:2.00rad,[p+q+k[3]])
cetz.draw.hobby((-0.35, -0.79),(-0.96, -0.43),(-0.95, 0.29),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(-0.53, 0.81),node4.pos,decoration:"coil",angle:4.06rad)
cetz.draw.content((-0.63, 0.89),angle:4.06rad,[p+q+2 k[3]])
cetz.draw.hobby((0.74, 1.18),(-0.60, 0.83),(-0.50, -0.55),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-0.54, -0.54),decoration:"arrow",angle:-0.68rad)
cetz.draw.content((-0.55, -0.37),angle:-0.68rad,[-k[0]])
cetz.draw.hobby((-0.58, -0.43),(-0.60, -0.41),stroke:stroke,mark: (end: ">"))
edge(node1.pos,(0.54, -0.54),decoration:"arrow",angle:2.75rad)
cetz.draw.content((0.07, -0.21),angle:2.75rad,[-k[0]])
cetz.draw.hobby((-0.38, -0.09),(0.47, -0.44),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.54, 0.00),decoration:"arrow",angle:-0.28rad)
cetz.draw.content((-0.09, 0.31),angle:-0.28rad,[p+k[3]])
cetz.draw.hobby((-0.68, 0.42),(0.46, 0.09),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(-0.54, 0.00),decoration:"arrow",angle:0.54rad)
cetz.draw.content((0.29, 0.36),angle:0.54rad,[p+k[3]])
cetz.draw.hobby((-0.42, 0.00),(0.95, 0.82),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-0.54, 0.54),decoration:"arrow",angle:4.99rad)
cetz.draw.content((-0.47, -0.12),angle:4.99rad,[-k[3]])
cetz.draw.hobby((-0.57, 0.43),(-0.26, -0.63),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(0.54, 0.54),decoration:"arrow",angle:1.51rad)
cetz.draw.content((0.38, -0.11),angle:1.51rad,[-k[3]])
cetz.draw.hobby((0.40, -0.67),(0.47, 0.44),stroke:stroke,mark: (end: ">"))
})
let embedding6i1=cetz.canvas(length:50%,{
let node0= (pos:(-0.72, -0.39))
node(node0.pos)
let node1= (pos:(-0.49, -0.11))
node(node1.pos)
let node2= (pos:(0.43, -0.77))
node(node2.pos)
let node3= (pos:(-0.79, 0.39))
node(node3.pos)
let node4= (pos:(-0.18, -0.71))
node(node4.pos)
let node5= (pos:(1.00, 0.93))
node(node5.pos)
edge(node1.pos,(0.66, 0.66),node0.pos,decoration:"arrow",angle:0.35rad)
cetz.draw.content((0.62, 0.77),angle:0.35rad,[q+k[0]])
cetz.draw.hobby((1.01, 0.82),(3.94, -3.91),(-1.31, -2.06),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.28, 0.83),node1.pos,decoration:"wave",angle:-0.83rad)
cetz.draw.content((0.37, 0.91),angle:-0.83rad,[q])
cetz.draw.hobby((-0.77, 0.73),(0.41, 0.76),(-0.19, -0.26),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(0.49, -0.62),node2.pos,decoration:"wave",angle:1.35rad)
cetz.draw.content((0.60, -0.65),angle:1.35rad,[q])
cetz.draw.hobby((-0.70, -0.16),(0.10, 0.15),(0.55, -0.58),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.14, 0.82),node5.pos,decoration:"arrow",angle:0.27rad)
cetz.draw.content((0.11, 0.93),angle:0.27rad,[p+k[3]])
cetz.draw.hobby((-0.66, 0.54),(0.05, 0.85),(0.81, 0.98),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-0.93, -0.40),node2.pos,decoration:"arrow",angle:5.72rad)
cetz.draw.content((-1.00, -0.50),angle:5.72rad,[k[3]])
cetz.draw.hobby((-1.47, -0.03),(0.61, 4.15),(1.83, -0.36),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(-0.53, 0.81),node4.pos,decoration:"coil",angle:4.06rad)
cetz.draw.content((-0.63, 0.89),angle:4.06rad,[p+q+2 k[3]])
cetz.draw.hobby((0.74, 1.18),(-0.60, 0.83),(-0.50, -0.55),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-0.54, -0.54),decoration:"arrow",angle:-0.68rad)
cetz.draw.content((-0.55, -0.37),angle:-0.68rad,[-k[0]])
cetz.draw.hobby((-0.58, -0.43),(-0.60, -0.41),stroke:stroke,mark: (end: ">"))
edge(node1.pos,(0.54, -0.54),decoration:"arrow",angle:2.75rad)
cetz.draw.content((0.07, -0.21),angle:2.75rad,[-k[0]])
cetz.draw.hobby((-0.38, -0.09),(0.47, -0.44),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(-0.54, 0.00),decoration:"arrow",angle:5.61rad)
cetz.draw.content((-0.13, -0.48),angle:5.61rad,[-q-k[3]])
cetz.draw.hobby((-0.50, -0.11),(0.31, -0.76),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(0.54, 0.00),decoration:"arrow",angle:-2.03rad)
cetz.draw.content((0.88, 0.41),angle:-2.03rad,[-q-k[3]])
cetz.draw.hobby((1.01, 0.81),(0.64, 0.06),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(0.54, 0.54),decoration:"arrow",angle:1.05rad)
cetz.draw.content((0.08, -0.03),angle:1.05rad,[p+q+k[3]])
cetz.draw.hobby((-0.18, -0.60),(0.44, 0.48),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(-0.54, 0.54),decoration:"arrow",angle:3.68rad)
cetz.draw.content((-0.73, 0.57),angle:3.68rad,[p+q+k[3]])
cetz.draw.hobby((-0.65, 0.54),(-0.74, 0.49),stroke:stroke,mark: (end: ">"))
})
let embedding6f0=cetz.canvas(length:50%,{
let node0= (pos:(-0.72, -0.39))
node(node0.pos)
let node1= (pos:(-0.49, -0.11))
node(node1.pos)
let node2= (pos:(0.46, -0.77))
node(node2.pos)
let node3= (pos:(-0.79, 0.39))
node(node3.pos)
let node4= (pos:(-0.18, -0.71))
node(node4.pos)
let node5= (pos:(1.00, 0.93))
node(node5.pos)
edge(node0.pos,(0.66, 0.66),node1.pos,decoration:"arrow",angle:3.49rad)
edge(node3.pos,(0.28, 0.83),node1.pos,decoration:"wave",angle:-0.83rad)
edge(node0.pos,(0.49, -0.62),node2.pos,decoration:"wave",angle:1.50rad)
edge(node2.pos,(0.15, 0.82),node5.pos,decoration:"arrow",angle:3.77rad)
edge(node3.pos,(-0.93, -0.36),node5.pos,decoration:"arrow",angle:4.82rad)
edge(node5.pos,(-0.53, 0.81),node4.pos,decoration:"coil",angle:4.06rad)
edge(node1.pos,(-0.54, -0.54),decoration:"arrow",angle:-1.67rad)
edge(node0.pos,(0.54, -0.54),decoration:"arrow",angle:3.02rad)
edge(node4.pos,(0.54, 0.00),decoration:"arrow",angle:0.78rad)
edge(node3.pos,(-0.54, 0.00),decoration:"arrow",angle:2.15rad)
edge(node4.pos,(-0.54, 0.54),decoration:"arrow",angle:4.99rad)
edge(node2.pos,(0.54, 0.54),decoration:"arrow",angle:1.51rad)
})
let embedding7i0=cetz.canvas(length:50%,{
let node0= (pos:(-0.72, -0.39))
node(node0.pos)
let node1= (pos:(-0.49, -0.12))
node(node1.pos)
let node2= (pos:(0.46, -0.77))
node(node2.pos)
let node3= (pos:(-0.79, 0.39))
node(node3.pos)
let node4= (pos:(-0.18, -0.71))
node(node4.pos)
let node5= (pos:(1.00, 0.93))
node(node5.pos)
edge(node1.pos,(0.66, 0.66),node0.pos,decoration:"arrow",angle:0.36rad)
cetz.draw.content((0.62, 0.77),angle:0.36rad,[q+k[0]])
cetz.draw.hobby((1.08, 0.85),(4.10, -4.11),(-1.35, -2.13),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.28, 0.83),node1.pos,decoration:"wave",angle:-0.83rad)
cetz.draw.content((0.37, 0.91),angle:-0.83rad,[q])
cetz.draw.hobby((-0.77, 0.73),(0.41, 0.75),(-0.19, -0.27),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(0.49, -0.62),node2.pos,decoration:"wave",angle:1.50rad)
cetz.draw.content((0.61, -0.63),angle:1.50rad,[q])
cetz.draw.hobby((-0.68, -0.18),(0.08, 0.06),(0.55, -0.58),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(0.15, 0.82),node5.pos,decoration:"arrow",angle:3.77rad)
cetz.draw.content((0.08, 0.91),angle:3.77rad,[p+q])
cetz.draw.hobby((0.16, -0.71),(-0.23, 0.38),(0.72, 1.05),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(-0.93, -0.36),node5.pos,decoration:"arrow",angle:4.82rad)
cetz.draw.content((-1.05, -0.37),angle:4.82rad,[k[2]])
cetz.draw.hobby((-1.00, -0.20),(0.76, -1.53),(1.50, 0.55),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-0.53, 0.81),node2.pos,decoration:"arrow",angle:4.02rad)
cetz.draw.content((-0.62, 0.89),angle:4.02rad,[p])
cetz.draw.hobby((-0.65, -0.39),(0.33, 1.23),(0.97, -0.55),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-0.54, -0.54),decoration:"arrow",angle:-0.68rad)
cetz.draw.content((-0.55, -0.37),angle:-0.68rad,[-k[0]])
cetz.draw.hobby((-0.58, -0.43),(-0.60, -0.41),stroke:stroke,mark: (end: ">"))
edge(node1.pos,(0.54, -0.54),decoration:"arrow",angle:2.75rad)
cetz.draw.content((0.07, -0.22),angle:2.75rad,[-k[0]])
cetz.draw.hobby((-0.38, -0.10),(0.47, -0.44),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-0.54, 0.00),decoration:"arrow",angle:2.04rad)
cetz.draw.content((-0.47, -0.41),angle:2.04rad,[-q-k[2]])
cetz.draw.hobby((-0.55, -0.12),(-0.28, -0.65),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.54, 0.00),decoration:"arrow",angle:2.86rad)
cetz.draw.content((-0.09, 0.31),angle:2.86rad,[-q-k[2]])
cetz.draw.hobby((-0.68, 0.42),(0.46, 0.09),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(0.54, 0.54),decoration:"coil",angle:-2.44rad)
cetz.draw.content((0.85, 0.64),angle:-2.44rad,[p+q+k[2]])
cetz.draw.hobby((0.96, 0.82),(0.65, 0.56),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-0.54, 0.54),decoration:"coil",angle:4.99rad)
cetz.draw.content((-0.47, -0.12),angle:4.99rad,[p+q+k[2]])
cetz.draw.hobby((-0.57, 0.43),(-0.26, -0.63),stroke:stroke,mark: (end: ">"))
})
let embedding7i1=cetz.canvas(length:50%,{
let node0= (pos:(-0.72, -0.39))
node(node0.pos)
let node1= (pos:(-0.49, -0.11))
node(node1.pos)
let node2= (pos:(0.46, -0.77))
node(node2.pos)
let node3= (pos:(-0.79, 0.39))
node(node3.pos)
let node4= (pos:(-0.16, -0.71))
node(node4.pos)
let node5= (pos:(1.00, 0.93))
node(node5.pos)
edge(node1.pos,(0.66, 0.66),node0.pos,decoration:"arrow",angle:0.35rad)
cetz.draw.content((0.62, 0.77),angle:0.35rad,[q+k[0]])
cetz.draw.hobby((1.01, 0.82),(3.94, -3.91),(-1.31, -2.06),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.28, 0.83),node1.pos,decoration:"wave",angle:-0.83rad)
cetz.draw.content((0.37, 0.91),angle:-0.83rad,[q])
cetz.draw.hobby((-0.77, 0.73),(0.41, 0.76),(-0.19, -0.26),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(0.49, -0.62),node2.pos,decoration:"wave",angle:1.50rad)
cetz.draw.content((0.61, -0.63),angle:1.50rad,[q])
cetz.draw.hobby((-0.68, -0.18),(0.08, 0.06),(0.55, -0.58),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(0.15, 0.82),node5.pos,decoration:"arrow",angle:3.77rad)
cetz.draw.content((0.08, 0.91),angle:3.77rad,[p+q])
cetz.draw.hobby((0.16, -0.71),(-0.23, 0.38),(0.72, 1.05),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(-0.93, -0.36),node5.pos,decoration:"arrow",angle:4.82rad)
cetz.draw.content((-1.05, -0.37),angle:4.82rad,[k[2]])
cetz.draw.hobby((-1.00, -0.20),(0.76, -1.53),(1.50, 0.55),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-0.53, 0.81),node3.pos,decoration:"arrow",angle:3.89rad)
cetz.draw.content((-0.61, 0.90),angle:3.89rad,[q+k[2]])
cetz.draw.hobby((0.27, -0.79),(0.91, 0.63),(-0.63, 0.80),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(0.59, -0.43),node4.pos,decoration:"coil",angle:-2.46rad)
cetz.draw.content((0.66, -0.53),angle:-2.46rad,[p+q+k[2]])
cetz.draw.hobby((1.11, 0.71),(0.87, -0.22),(0.08, -0.74),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-0.54, -0.54),decoration:"arrow",angle:-0.68rad)
cetz.draw.content((-0.55, -0.37),angle:-0.68rad,[-k[0]])
cetz.draw.hobby((-0.58, -0.43),(-0.60, -0.41),stroke:stroke,mark: (end: ">"))
edge(node1.pos,(0.54, -0.54),decoration:"arrow",angle:2.75rad)
cetz.draw.content((0.07, -0.21),angle:2.75rad,[-k[0]])
cetz.draw.hobby((-0.38, -0.09),(0.47, -0.44),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(0.54, 0.54),decoration:"arrow",angle:4.20rad)
cetz.draw.content((0.08, -0.03),angle:4.20rad,[p])
cetz.draw.hobby((-0.17, -0.60),(0.44, 0.48),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(-0.54, 0.54),decoration:"arrow",angle:2.22rad)
cetz.draw.content((-0.14, -0.19),angle:2.22rad,[p])
cetz.draw.hobby((-0.53, 0.42),(0.35, -0.73),stroke:stroke,mark: (end: ">"))
})
let embedding7f0=cetz.canvas(length:50%,{
let node0= (pos:(-0.72, -0.39))
node(node0.pos)
let node1= (pos:(-0.49, -0.11))
node(node1.pos)
let node2= (pos:(0.43, -0.77))
node(node2.pos)
let node3= (pos:(-0.79, 0.39))
node(node3.pos)
let node4= (pos:(-0.18, -0.71))
node(node4.pos)
let node5= (pos:(1.00, 0.93))
node(node5.pos)
edge(node0.pos,(0.66, 0.66),node1.pos,decoration:"arrow",angle:3.49rad)
edge(node3.pos,(0.28, 0.83),node1.pos,decoration:"wave",angle:-0.83rad)
edge(node0.pos,(0.49, -0.62),node2.pos,decoration:"wave",angle:1.35rad)
edge(node2.pos,(0.14, 0.82),node5.pos,decoration:"arrow",angle:3.77rad)
edge(node4.pos,(-0.93, -0.38),node3.pos,decoration:"arrow",angle:2.04rad)
edge(node4.pos,(-0.53, 0.81),node2.pos,decoration:"arrow",angle:4.01rad)
edge(node1.pos,(-0.54, -0.54),decoration:"arrow",angle:-1.67rad)
edge(node0.pos,(0.54, -0.54),decoration:"arrow",angle:3.02rad)
edge(node3.pos,(-0.54, 0.00),decoration:"arrow",angle:-0.99rad)
edge(node5.pos,(0.54, 0.00),decoration:"arrow",angle:1.11rad)
edge(node5.pos,(0.54, 0.54),decoration:"coil",angle:-2.44rad)
edge(node4.pos,(-0.54, 0.54),decoration:"coil",angle:4.99rad)
})
let embedding7f1=cetz.canvas(length:50%,{
let node0= (pos:(-0.72, -0.39))
node(node0.pos)
let node1= (pos:(-0.49, -0.11))
node(node1.pos)
let node2= (pos:(0.43, -0.77))
node(node2.pos)
let node3= (pos:(-0.79, 0.39))
node(node3.pos)
let node4= (pos:(-0.18, -0.71))
node(node4.pos)
let node5= (pos:(1.00, 0.93))
node(node5.pos)
edge(node0.pos,(0.66, 0.66),node1.pos,decoration:"arrow",angle:3.49rad)
edge(node3.pos,(0.28, 0.83),node1.pos,decoration:"wave",angle:-0.83rad)
edge(node0.pos,(0.49, -0.62),node2.pos,decoration:"wave",angle:1.35rad)
edge(node3.pos,(0.14, 0.82),node5.pos,decoration:"arrow",angle:0.27rad)
edge(node4.pos,(-0.93, -0.38),node3.pos,decoration:"arrow",angle:2.04rad)
edge(node4.pos,(-0.53, 0.81),node2.pos,decoration:"arrow",angle:4.01rad)
edge(node5.pos,(0.59, -0.43),node4.pos,decoration:"coil",angle:-2.46rad)
edge(node1.pos,(-0.54, -0.54),decoration:"arrow",angle:-1.67rad)
edge(node0.pos,(0.54, -0.54),decoration:"arrow",angle:3.02rad)
edge(node2.pos,(0.54, 0.54),decoration:"arrow",angle:4.63rad)
edge(node5.pos,(-0.54, 0.54),decoration:"arrow",angle:-2.89rad)
})
let embedding8i0=cetz.canvas(length:50%,{
let node0= (pos:(-0.72, -0.39))
node(node0.pos)
let node1= (pos:(-0.49, -0.11))
node(node1.pos)
let node2= (pos:(0.43, -0.77))
node(node2.pos)
let node3= (pos:(-0.79, 0.39))
node(node3.pos)
let node4= (pos:(-0.18, -0.71))
node(node4.pos)
let node5= (pos:(1.00, 0.93))
node(node5.pos)
edge(node1.pos,(0.66, 0.66),node0.pos,decoration:"arrow",angle:0.35rad)
cetz.draw.content((0.62, 0.77),angle:0.35rad,[q+k[0]])
cetz.draw.hobby((1.01, 0.82),(3.94, -3.91),(-1.31, -2.06),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.28, 0.83),node1.pos,decoration:"wave",angle:-0.83rad)
cetz.draw.content((0.37, 0.91),angle:-0.83rad,[q])
cetz.draw.hobby((-0.77, 0.73),(0.41, 0.76),(-0.19, -0.26),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(0.49, -0.62),node2.pos,decoration:"wave",angle:1.35rad)
cetz.draw.content((0.60, -0.65),angle:1.35rad,[q])
cetz.draw.hobby((-0.70, -0.16),(0.10, 0.15),(0.55, -0.58),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(0.14, 0.82),node5.pos,decoration:"arrow",angle:3.77rad)
cetz.draw.content((0.07, 0.91),angle:3.77rad,[q+k[3]])
cetz.draw.hobby((0.13, -0.70),(-0.24, 0.40),(0.72, 1.05),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-0.93, -0.38),node3.pos,decoration:"arrow",angle:2.04rad)
cetz.draw.content((-1.04, -0.44),angle:2.04rad,[-p+q+k[3]])
cetz.draw.hobby((-0.35, -0.80),(-0.97, -0.43),(-0.95, 0.29),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(-0.53, 0.81),node4.pos,decoration:"coil",angle:4.06rad)
cetz.draw.content((-0.63, 0.89),angle:4.06rad,[-p+q+2 k[3]])
cetz.draw.hobby((0.74, 1.18),(-0.60, 0.83),(-0.50, -0.55),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-0.54, -0.54),decoration:"arrow",angle:-0.68rad)
cetz.draw.content((-0.55, -0.37),angle:-0.68rad,[-k[0]])
cetz.draw.hobby((-0.58, -0.43),(-0.60, -0.41),stroke:stroke,mark: (end: ">"))
edge(node1.pos,(0.54, -0.54),decoration:"arrow",angle:2.75rad)
cetz.draw.content((0.07, -0.21),angle:2.75rad,[-k[0]])
cetz.draw.hobby((-0.38, -0.09),(0.47, -0.44),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(-0.54, 0.00),decoration:"arrow",angle:-0.99rad)
cetz.draw.content((-0.56, 0.26),angle:-0.99rad,[p-k[3]])
cetz.draw.hobby((-0.54, 0.12),(-0.69, 0.34),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(0.54, 0.00),decoration:"arrow",angle:1.11rad)
cetz.draw.content((0.88, 0.41),angle:1.11rad,[p-k[3]])
cetz.draw.hobby((1.01, 0.81),(0.64, 0.06),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(0.54, 0.54),decoration:"arrow",angle:4.19rad)
cetz.draw.content((0.08, -0.03),angle:4.19rad,[k[3]])
cetz.draw.hobby((-0.18, -0.60),(0.44, 0.48),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(-0.54, 0.54),decoration:"arrow",angle:2.21rad)
cetz.draw.content((-0.15, -0.19),angle:2.21rad,[k[3]])
cetz.draw.hobby((-0.53, 0.42),(0.32, -0.73),stroke:stroke,mark: (end: ">"))
})
let embedding8i1=cetz.canvas(length:50%,{
let node0= (pos:(-0.72, -0.39))
node(node0.pos)
let node1= (pos:(-0.49, -0.11))
node(node1.pos)
let node2= (pos:(0.43, -0.77))
node(node2.pos)
let node3= (pos:(-0.79, 0.39))
node(node3.pos)
let node4= (pos:(-0.18, -0.71))
node(node4.pos)
let node5= (pos:(1.00, 0.93))
node(node5.pos)
edge(node1.pos,(0.66, 0.66),node0.pos,decoration:"arrow",angle:0.35rad)
cetz.draw.content((0.62, 0.77),angle:0.35rad,[q+k[0]])
cetz.draw.hobby((1.01, 0.82),(3.94, -3.91),(-1.31, -2.06),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.28, 0.83),node1.pos,decoration:"wave",angle:-0.83rad)
cetz.draw.content((0.37, 0.91),angle:-0.83rad,[q])
cetz.draw.hobby((-0.77, 0.73),(0.41, 0.76),(-0.19, -0.26),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(0.49, -0.62),node2.pos,decoration:"wave",angle:1.35rad)
cetz.draw.content((0.60, -0.65),angle:1.35rad,[q])
cetz.draw.hobby((-0.70, -0.16),(0.10, 0.15),(0.55, -0.58),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.14, 0.82),node5.pos,decoration:"arrow",angle:0.27rad)
cetz.draw.content((0.11, 0.93),angle:0.27rad,[-p+k[3]])
cetz.draw.hobby((-0.66, 0.54),(0.05, 0.85),(0.81, 0.98),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-0.93, -0.40),node2.pos,decoration:"arrow",angle:5.72rad)
cetz.draw.content((-1.00, -0.50),angle:5.72rad,[k[3]])
cetz.draw.hobby((-1.47, -0.03),(0.61, 4.15),(1.83, -0.36),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(-0.53, 0.81),node4.pos,decoration:"coil",angle:4.06rad)
cetz.draw.content((-0.63, 0.89),angle:4.06rad,[-p+q+2 k[3]])
cetz.draw.hobby((0.74, 1.18),(-0.60, 0.83),(-0.50, -0.55),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-0.54, -0.54),decoration:"arrow",angle:-0.68rad)
cetz.draw.content((-0.55, -0.37),angle:-0.68rad,[-k[0]])
cetz.draw.hobby((-0.58, -0.43),(-0.60, -0.41),stroke:stroke,mark: (end: ">"))
edge(node1.pos,(0.54, -0.54),decoration:"arrow",angle:2.75rad)
cetz.draw.content((0.07, -0.21),angle:2.75rad,[-k[0]])
cetz.draw.hobby((-0.38, -0.09),(0.47, -0.44),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(0.54, 0.00),decoration:"arrow",angle:4.57rad)
cetz.draw.content((0.36, -0.37),angle:4.57rad,[q+k[3]])
cetz.draw.hobby((0.38, -0.67),(0.46, -0.09),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(-0.54, 0.00),decoration:"arrow",angle:-2.60rad)
cetz.draw.content((0.29, 0.36),angle:-2.60rad,[q+k[3]])
cetz.draw.hobby((-0.42, 0.00),(0.95, 0.82),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-0.54, 0.54),decoration:"arrow",angle:1.85rad)
cetz.draw.content((-0.47, -0.12),angle:1.85rad,[p-q-k[3]])
cetz.draw.hobby((-0.57, 0.43),(-0.26, -0.63),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.54, 0.54),decoration:"arrow",angle:3.25rad)
cetz.draw.content((-0.14, 0.58),angle:3.25rad,[p-q-k[3]])
cetz.draw.hobby((-0.70, 0.46),(0.43, 0.59),stroke:stroke,mark: (end: ">"))
})
let embedding8f0=cetz.canvas(length:50%,{
let node0= (pos:(-0.72, -0.39))
node(node0.pos)
let node1= (pos:(-0.49, -0.11))
node(node1.pos)
let node2= (pos:(0.43, -0.77))
node(node2.pos)
let node3= (pos:(-0.79, 0.39))
node(node3.pos)
let node4= (pos:(-0.18, -0.71))
node(node4.pos)
let node5= (pos:(1.00, 0.93))
node(node5.pos)
edge(node0.pos,(0.66, 0.66),node1.pos,decoration:"arrow",angle:3.49rad)
edge(node3.pos,(0.28, 0.83),node1.pos,decoration:"wave",angle:-0.83rad)
edge(node0.pos,(0.49, -0.62),node2.pos,decoration:"wave",angle:1.35rad)
edge(node4.pos,(0.14, 0.82),node3.pos,decoration:"arrow",angle:2.86rad)
edge(node4.pos,(-0.93, -0.40),node2.pos,decoration:"arrow",angle:5.72rad)
edge(node5.pos,(-0.53, 0.81),node4.pos,decoration:"coil",angle:4.06rad)
edge(node1.pos,(-0.54, -0.54),decoration:"arrow",angle:-1.67rad)
edge(node0.pos,(0.54, -0.54),decoration:"arrow",angle:3.02rad)
edge(node2.pos,(0.54, 0.00),decoration:"arrow",angle:4.57rad)
edge(node5.pos,(-0.54, 0.00),decoration:"arrow",angle:-2.60rad)
edge(node3.pos,(-0.54, 0.54),decoration:"arrow",angle:0.54rad)
edge(node5.pos,(0.54, 0.54),decoration:"arrow",angle:0.70rad)
})
let embedding9i0=cetz.canvas(length:50%,{
let node0= (pos:(-0.72, -0.39))
node(node0.pos)
let node1= (pos:(-0.49, -0.11))
node(node1.pos)
let node2= (pos:(0.43, -0.77))
node(node2.pos)
let node3= (pos:(-0.79, 0.39))
node(node3.pos)
let node4= (pos:(-0.18, -0.71))
node(node4.pos)
let node5= (pos:(1.00, 0.93))
node(node5.pos)
edge(node1.pos,(0.66, 0.66),node0.pos,decoration:"arrow",angle:0.35rad)
cetz.draw.content((0.62, 0.77),angle:0.35rad,[q+k[0]])
cetz.draw.hobby((1.01, 0.82),(3.94, -3.91),(-1.31, -2.06),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.28, 0.83),node1.pos,decoration:"wave",angle:-0.83rad)
cetz.draw.content((0.37, 0.91),angle:-0.83rad,[q])
cetz.draw.hobby((-0.77, 0.73),(0.41, 0.76),(-0.19, -0.26),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(0.49, -0.62),node2.pos,decoration:"wave",angle:1.35rad)
cetz.draw.content((0.60, -0.65),angle:1.35rad,[q])
cetz.draw.hobby((-0.70, -0.16),(0.10, 0.15),(0.55, -0.58),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(0.14, 0.82),node3.pos,decoration:"arrow",angle:2.86rad)
cetz.draw.content((0.18, 0.93),angle:2.86rad,[p+2 q+k[3]])
cetz.draw.hobby((0.18, -0.74),(0.66, 0.47),(-0.62, 0.71),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-0.93, -0.40),node2.pos,decoration:"arrow",angle:5.72rad)
cetz.draw.content((-1.00, -0.50),angle:5.72rad,[k[3]])
cetz.draw.hobby((-1.47, -0.03),(0.61, 4.15),(1.83, -0.36),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(-0.53, 0.81),node4.pos,decoration:"coil",angle:4.06rad)
cetz.draw.content((-0.63, 0.89),angle:4.06rad,[p+2 q+2 k[3]])
cetz.draw.hobby((0.74, 1.18),(-0.60, 0.83),(-0.50, -0.55),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-0.54, -0.54),decoration:"arrow",angle:-0.68rad)
cetz.draw.content((-0.55, -0.37),angle:-0.68rad,[-k[0]])
cetz.draw.hobby((-0.58, -0.43),(-0.60, -0.41),stroke:stroke,mark: (end: ">"))
edge(node1.pos,(0.54, -0.54),decoration:"arrow",angle:2.75rad)
cetz.draw.content((0.07, -0.21),angle:2.75rad,[-k[0]])
cetz.draw.hobby((-0.38, -0.09),(0.47, -0.44),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(-0.54, 0.00),decoration:"arrow",angle:5.61rad)
cetz.draw.content((-0.13, -0.48),angle:5.61rad,[-q-k[3]])
cetz.draw.hobby((-0.50, -0.11),(0.31, -0.76),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(0.54, 0.00),decoration:"arrow",angle:-2.03rad)
cetz.draw.content((0.88, 0.41),angle:-2.03rad,[-q-k[3]])
cetz.draw.hobby((1.01, 0.81),(0.64, 0.06),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.54, 0.54),decoration:"arrow",angle:0.11rad)
cetz.draw.content((-0.14, 0.58),angle:0.11rad,[p+q+k[3]])
cetz.draw.hobby((-0.70, 0.46),(0.43, 0.59),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(-0.54, 0.54),decoration:"arrow",angle:0.25rad)
cetz.draw.content((0.26, 0.62),angle:0.25rad,[p+q+k[3]])
cetz.draw.hobby((-0.43, 0.50),(0.92, 0.84),stroke:stroke,mark: (end: ">"))
})
let embedding9f0=cetz.canvas(length:50%,{
let node0= (pos:(-0.72, -0.39))
node(node0.pos)
let node1= (pos:(-0.49, -0.12))
node(node1.pos)
let node2= (pos:(0.43, -0.77))
node(node2.pos)
let node3= (pos:(-0.79, 0.39))
node(node3.pos)
let node4= (pos:(-0.18, -0.71))
node(node4.pos)
let node5= (pos:(1.00, 0.93))
node(node5.pos)
edge(node0.pos,(0.66, 0.66),node1.pos,decoration:"arrow",angle:3.50rad)
edge(node3.pos,(0.28, 0.83),node1.pos,decoration:"wave",angle:-0.83rad)
edge(node0.pos,(0.49, -0.62),node2.pos,decoration:"wave",angle:1.35rad)
edge(node3.pos,(0.14, 0.82),node5.pos,decoration:"arrow",angle:0.27rad)
edge(node4.pos,(-0.93, -0.40),node2.pos,decoration:"arrow",angle:5.72rad)
edge(node5.pos,(-0.53, 0.81),node4.pos,decoration:"coil",angle:4.06rad)
edge(node1.pos,(-0.54, -0.54),decoration:"arrow",angle:-1.67rad)
edge(node0.pos,(0.54, -0.54),decoration:"arrow",angle:3.02rad)
edge(node2.pos,(-0.54, 0.00),decoration:"arrow",angle:5.61rad)
edge(node5.pos,(0.54, 0.00),decoration:"arrow",angle:-2.03rad)
edge(node4.pos,(0.54, 0.54),decoration:"arrow",angle:1.05rad)
edge(node3.pos,(-0.54, 0.54),decoration:"arrow",angle:3.68rad)
})
let embedding9f1=cetz.canvas(length:50%,{
let node0= (pos:(-0.72, -0.39))
node(node0.pos)
let node1= (pos:(-0.49, -0.11))
node(node1.pos)
let node2= (pos:(0.46, -0.77))
node(node2.pos)
let node3= (pos:(-0.79, 0.39))
node(node3.pos)
let node4= (pos:(-0.18, -0.71))
node(node4.pos)
let node5= (pos:(1.00, 0.93))
node(node5.pos)
edge(node0.pos,(0.66, 0.66),node1.pos,decoration:"arrow",angle:3.49rad)
edge(node3.pos,(0.28, 0.83),node1.pos,decoration:"wave",angle:-0.83rad)
edge(node0.pos,(0.49, -0.62),node2.pos,decoration:"wave",angle:1.50rad)
edge(node2.pos,(0.15, 0.82),node5.pos,decoration:"arrow",angle:3.77rad)
edge(node4.pos,(-0.93, -0.36),node3.pos,decoration:"arrow",angle:2.00rad)
edge(node5.pos,(-0.53, 0.81),node4.pos,decoration:"coil",angle:4.06rad)
edge(node1.pos,(-0.54, -0.54),decoration:"arrow",angle:-1.67rad)
edge(node0.pos,(0.54, -0.54),decoration:"arrow",angle:3.02rad)
edge(node3.pos,(0.54, 0.00),decoration:"arrow",angle:-0.28rad)
edge(node5.pos,(-0.54, 0.00),decoration:"arrow",angle:0.54rad)
edge(node4.pos,(-0.54, 0.54),decoration:"arrow",angle:4.99rad)
edge(node2.pos,(0.54, 0.54),decoration:"arrow",angle:1.51rad)
})
let embedding10i0=cetz.canvas(length:50%,{
let node0= (pos:(-0.72, -0.39))
node(node0.pos)
let node1= (pos:(-0.49, -0.11))
node(node1.pos)
let node2= (pos:(0.43, -0.77))
node(node2.pos)
let node3= (pos:(-0.79, 0.39))
node(node3.pos)
let node4= (pos:(-0.18, -0.71))
node(node4.pos)
let node5= (pos:(1.00, 0.93))
node(node5.pos)
edge(node1.pos,(0.66, 0.66),node0.pos,decoration:"arrow",angle:0.35rad)
cetz.draw.content((0.62, 0.77),angle:0.35rad,[q+k[0]])
cetz.draw.hobby((1.01, 0.82),(3.94, -3.91),(-1.31, -2.06),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.28, 0.83),node1.pos,decoration:"wave",angle:-0.83rad)
cetz.draw.content((0.37, 0.91),angle:-0.83rad,[q])
cetz.draw.hobby((-0.77, 0.73),(0.41, 0.76),(-0.19, -0.26),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(0.49, -0.62),node2.pos,decoration:"wave",angle:1.35rad)
cetz.draw.content((0.60, -0.65),angle:1.35rad,[q])
cetz.draw.hobby((-0.70, -0.16),(0.10, 0.15),(0.55, -0.58),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(0.14, 0.82),node5.pos,decoration:"arrow",angle:3.77rad)
cetz.draw.content((0.07, 0.91),angle:3.77rad,[-p])
cetz.draw.hobby((0.13, -0.70),(-0.24, 0.40),(0.72, 1.05),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-0.93, -0.38),node3.pos,decoration:"arrow",angle:2.04rad)
cetz.draw.content((-1.04, -0.44),angle:2.04rad,[q+k[2]])
cetz.draw.hobby((-0.35, -0.80),(-0.97, -0.43),(-0.95, 0.29),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-0.53, 0.81),node2.pos,decoration:"arrow",angle:4.01rad)
cetz.draw.content((-0.62, 0.89),angle:4.01rad,[-p-q])
cetz.draw.hobby((-0.65, -0.40),(0.32, 1.22),(0.95, -0.55),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-0.54, -0.54),decoration:"arrow",angle:-0.68rad)
cetz.draw.content((-0.55, -0.37),angle:-0.68rad,[-k[0]])
cetz.draw.hobby((-0.58, -0.43),(-0.60, -0.41),stroke:stroke,mark: (end: ">"))
edge(node1.pos,(0.54, -0.54),decoration:"arrow",angle:2.75rad)
cetz.draw.content((0.07, -0.21),angle:2.75rad,[-k[0]])
cetz.draw.hobby((-0.38, -0.09),(0.47, -0.44),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.54, 0.00),decoration:"arrow",angle:-0.28rad)
cetz.draw.content((-0.09, 0.31),angle:-0.28rad,[k[2]])
cetz.draw.hobby((-0.68, 0.42),(0.46, 0.09),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(-0.54, 0.00),decoration:"arrow",angle:0.54rad)
cetz.draw.content((0.29, 0.36),angle:0.54rad,[k[2]])
cetz.draw.hobby((-0.42, 0.00),(0.95, 0.82),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(-0.54, 0.54),decoration:"coil",angle:-2.89rad)
cetz.draw.content((0.26, 0.62),angle:-2.89rad,[p-k[2]])
cetz.draw.hobby((-0.43, 0.50),(0.92, 0.84),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(0.54, 0.54),decoration:"coil",angle:4.19rad)
cetz.draw.content((0.08, -0.03),angle:4.19rad,[p-k[2]])
cetz.draw.hobby((-0.18, -0.60),(0.44, 0.48),stroke:stroke,mark: (end: ">"))
})
let embedding10i1=cetz.canvas(length:50%,{
let node0= (pos:(-0.70, -0.38))
node(node0.pos)
let node1= (pos:(-0.48, -0.09))
node(node1.pos)
let node2= (pos:(0.42, -0.76))
node(node2.pos)
let node3= (pos:(-0.77, 0.36))
node(node3.pos)
let node4= (pos:(-0.17, -0.70))
node(node4.pos)
let node5= (pos:(1.00, 0.91))
node(node5.pos)
edge(node1.pos,(0.62, 0.64),node0.pos,decoration:"arrow",angle:0.32rad)
cetz.draw.content((0.58, 0.76),angle:0.32rad,[q+k[0]])
cetz.draw.hobby((0.82, 0.76),(3.51, -3.34),(-1.17, -1.87),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.27, 0.81),node1.pos,decoration:"wave",angle:-0.86rad)
cetz.draw.content((0.37, 0.89),angle:-0.86rad,[q])
cetz.draw.hobby((-0.78, 0.69),(0.37, 0.78),(-0.18, -0.24),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(0.47, -0.60),node2.pos,decoration:"wave",angle:1.38rad)
cetz.draw.content((0.59, -0.62),angle:1.38rad,[q])
cetz.draw.hobby((-0.68, -0.16),(0.10, 0.14),(0.54, -0.57),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.14, 0.80),node5.pos,decoration:"arrow",angle:0.28rad)
cetz.draw.content((0.11, 0.91),angle:0.28rad,[k[2]])
cetz.draw.hobby((-0.65, 0.51),(0.05, 0.83),(0.81, 0.96),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-0.93, -0.37),node3.pos,decoration:"arrow",angle:2.01rad)
cetz.draw.content((-1.04, -0.42),angle:2.01rad,[q+k[2]])
cetz.draw.hobby((-0.34, -0.79),(-0.96, -0.45),(-0.93, 0.26),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-0.52, 0.79),node2.pos,decoration:"arrow",angle:4.01rad)
cetz.draw.content((-0.61, 0.87),angle:4.01rad,[-p-q])
cetz.draw.hobby((-0.63, -0.39),(0.31, 1.19),(0.93, -0.54),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(0.58, -0.42),node4.pos,decoration:"coil",angle:-2.47rad)
cetz.draw.content((0.65, -0.52),angle:-2.47rad,[-p+k[2]])
cetz.draw.hobby((1.10, 0.69),(0.85, -0.22),(0.07, -0.73),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-0.53, -0.53),decoration:"arrow",angle:-0.68rad)
cetz.draw.content((-0.54, -0.36),angle:-0.68rad,[-k[0]])
cetz.draw.hobby((-0.56, -0.42),(-0.59, -0.40),stroke:stroke,mark: (end: ">"))
edge(node1.pos,(0.53, -0.53),decoration:"arrow",angle:2.74rad)
cetz.draw.content((0.07, -0.20),angle:2.74rad,[-k[0]])
cetz.draw.hobby((-0.37, -0.08),(0.46, -0.43),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(-0.53, 0.53),decoration:"arrow",angle:5.35rad)
cetz.draw.content((-0.15, -0.19),angle:5.35rad,[p])
cetz.draw.hobby((-0.51, 0.41),(0.31, -0.71),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(0.53, 0.53),decoration:"arrow",angle:-2.47rad)
cetz.draw.content((0.84, 0.62),angle:-2.47rad,[p])
cetz.draw.hobby((0.96, 0.80),(0.64, 0.54),stroke:stroke,mark: (end: ">"))
})
let embedding10f0=cetz.canvas(length:50%,{
let node0= (pos:(-0.72, -0.39))
node(node0.pos)
let node1= (pos:(-0.49, -0.11))
node(node1.pos)
let node2= (pos:(0.46, -0.77))
node(node2.pos)
let node3= (pos:(-0.79, 0.39))
node(node3.pos)
let node4= (pos:(-0.16, -0.71))
node(node4.pos)
let node5= (pos:(1.00, 0.93))
node(node5.pos)
edge(node0.pos,(0.66, 0.66),node1.pos,decoration:"arrow",angle:3.49rad)
edge(node3.pos,(0.28, 0.83),node1.pos,decoration:"wave",angle:-0.83rad)
edge(node0.pos,(0.49, -0.62),node2.pos,decoration:"wave",angle:1.50rad)
edge(node2.pos,(0.15, 0.82),node5.pos,decoration:"arrow",angle:3.77rad)
edge(node3.pos,(-0.93, -0.36),node5.pos,decoration:"arrow",angle:4.82rad)
edge(node4.pos,(-0.53, 0.81),node2.pos,decoration:"arrow",angle:4.03rad)
edge(node1.pos,(-0.54, -0.54),decoration:"arrow",angle:-1.67rad)
edge(node0.pos,(0.54, -0.54),decoration:"arrow",angle:3.02rad)
edge(node4.pos,(0.54, 0.00),decoration:"arrow",angle:0.79rad)
edge(node3.pos,(-0.54, 0.00),decoration:"arrow",angle:2.15rad)
edge(node5.pos,(-0.54, 0.54),decoration:"coil",angle:-2.89rad)
edge(node4.pos,(0.54, 0.54),decoration:"coil",angle:4.20rad)
})
let embedding10f1=cetz.canvas(length:50%,{
let node0= (pos:(-0.72, -0.39))
node(node0.pos)
let node1= (pos:(-0.49, -0.11))
node(node1.pos)
let node2= (pos:(0.46, -0.77))
node(node2.pos)
let node3= (pos:(-0.79, 0.39))
node(node3.pos)
let node4= (pos:(-0.16, -0.71))
node(node4.pos)
let node5= (pos:(1.00, 0.93))
node(node5.pos)
edge(node0.pos,(0.66, 0.66),node1.pos,decoration:"arrow",angle:3.49rad)
edge(node3.pos,(0.28, 0.83),node1.pos,decoration:"wave",angle:-0.83rad)
edge(node0.pos,(0.49, -0.62),node2.pos,decoration:"wave",angle:1.50rad)
edge(node2.pos,(0.15, 0.82),node5.pos,decoration:"arrow",angle:3.77rad)
edge(node3.pos,(-0.93, -0.36),node5.pos,decoration:"arrow",angle:4.82rad)
edge(node4.pos,(-0.53, 0.81),node3.pos,decoration:"arrow",angle:3.89rad)
edge(node5.pos,(0.59, -0.43),node4.pos,decoration:"coil",angle:-2.46rad)
edge(node1.pos,(-0.54, -0.54),decoration:"arrow",angle:-1.67rad)
edge(node0.pos,(0.54, -0.54),decoration:"arrow",angle:3.02rad)
edge(node4.pos,(-0.54, 0.54),decoration:"arrow",angle:5.00rad)
edge(node2.pos,(0.54, 0.54),decoration:"arrow",angle:1.51rad)
})
let embedding11i0=cetz.canvas(length:50%,{
let node0= (pos:(-0.72, -0.39))
node(node0.pos)
let node1= (pos:(-0.49, -0.11))
node(node1.pos)
let node2= (pos:(0.46, -0.77))
node(node2.pos)
let node3= (pos:(-0.79, 0.39))
node(node3.pos)
let node4= (pos:(-0.18, -0.71))
node(node4.pos)
let node5= (pos:(1.00, 0.93))
node(node5.pos)
edge(node1.pos,(0.66, 0.66),node0.pos,decoration:"arrow",angle:0.35rad)
cetz.draw.content((0.62, 0.77),angle:0.35rad,[q+k[0]])
cetz.draw.hobby((1.01, 0.82),(3.94, -3.91),(-1.31, -2.06),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.28, 0.83),node1.pos,decoration:"wave",angle:-0.83rad)
cetz.draw.content((0.37, 0.91),angle:-0.83rad,[q])
cetz.draw.hobby((-0.77, 0.73),(0.41, 0.76),(-0.19, -0.26),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(0.49, -0.62),node2.pos,decoration:"wave",angle:1.50rad)
cetz.draw.content((0.61, -0.63),angle:1.50rad,[q])
cetz.draw.hobby((-0.68, -0.18),(0.08, 0.06),(0.55, -0.58),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(0.15, 0.82),node5.pos,decoration:"arrow",angle:3.77rad)
cetz.draw.content((0.08, 0.91),angle:3.77rad,[q+k[3]])
cetz.draw.hobby((0.16, -0.71),(-0.23, 0.38),(0.72, 1.05),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(-0.93, -0.36),node5.pos,decoration:"arrow",angle:4.82rad)
cetz.draw.content((-1.05, -0.37),angle:4.82rad,[-p-q+k[3]])
cetz.draw.hobby((-1.00, -0.20),(0.76, -1.53),(1.50, 0.55),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(-0.53, 0.81),node4.pos,decoration:"coil",angle:4.06rad)
cetz.draw.content((-0.63, 0.89),angle:4.06rad,[-p+2 k[3]])
cetz.draw.hobby((0.74, 1.18),(-0.60, 0.83),(-0.50, -0.55),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-0.54, -0.54),decoration:"arrow",angle:-0.68rad)
cetz.draw.content((-0.55, -0.37),angle:-0.68rad,[-k[0]])
cetz.draw.hobby((-0.58, -0.43),(-0.60, -0.41),stroke:stroke,mark: (end: ">"))
edge(node1.pos,(0.54, -0.54),decoration:"arrow",angle:2.75rad)
cetz.draw.content((0.07, -0.21),angle:2.75rad,[-k[0]])
cetz.draw.hobby((-0.38, -0.09),(0.47, -0.44),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-0.54, 0.00),decoration:"arrow",angle:2.04rad)
cetz.draw.content((-0.47, -0.41),angle:2.04rad,[p-k[3]])
cetz.draw.hobby((-0.55, -0.12),(-0.28, -0.65),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.54, 0.00),decoration:"arrow",angle:2.86rad)
cetz.draw.content((-0.09, 0.31),angle:2.86rad,[p-k[3]])
cetz.draw.hobby((-0.68, 0.42),(0.46, 0.09),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(0.54, 0.54),decoration:"arrow",angle:4.19rad)
cetz.draw.content((0.08, -0.03),angle:4.19rad,[k[3]])
cetz.draw.hobby((-0.18, -0.60),(0.44, 0.48),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(-0.54, 0.54),decoration:"arrow",angle:2.22rad)
cetz.draw.content((-0.14, -0.19),angle:2.22rad,[k[3]])
cetz.draw.hobby((-0.53, 0.42),(0.35, -0.73),stroke:stroke,mark: (end: ">"))
})
let embedding11f0=cetz.canvas(length:50%,{
let node0= (pos:(-0.72, -0.39))
node(node0.pos)
let node1= (pos:(-0.49, -0.11))
node(node1.pos)
let node2= (pos:(0.43, -0.77))
node(node2.pos)
let node3= (pos:(-0.79, 0.39))
node(node3.pos)
let node4= (pos:(-0.18, -0.71))
node(node4.pos)
let node5= (pos:(1.00, 0.93))
node(node5.pos)
edge(node0.pos,(0.66, 0.66),node1.pos,decoration:"arrow",angle:3.49rad)
edge(node3.pos,(0.28, 0.83),node1.pos,decoration:"wave",angle:-0.83rad)
edge(node0.pos,(0.49, -0.62),node2.pos,decoration:"wave",angle:1.35rad)
edge(node3.pos,(0.14, 0.82),node5.pos,decoration:"arrow",angle:0.27rad)
edge(node4.pos,(-0.93, -0.40),node2.pos,decoration:"arrow",angle:5.72rad)
edge(node5.pos,(-0.53, 0.81),node4.pos,decoration:"coil",angle:4.06rad)
edge(node1.pos,(-0.54, -0.54),decoration:"arrow",angle:-1.67rad)
edge(node0.pos,(0.54, -0.54),decoration:"arrow",angle:3.02rad)
edge(node2.pos,(0.54, 0.00),decoration:"arrow",angle:4.57rad)
edge(node5.pos,(-0.54, 0.00),decoration:"arrow",angle:-2.60rad)
edge(node4.pos,(-0.54, 0.54),decoration:"arrow",angle:1.85rad)
edge(node3.pos,(0.54, 0.54),decoration:"arrow",angle:3.25rad)
})
let embedding11f1=cetz.canvas(length:50%,{
let node0= (pos:(-0.72, -0.39))
node(node0.pos)
let node1= (pos:(-0.49, -0.11))
node(node1.pos)
let node2= (pos:(0.43, -0.77))
node(node2.pos)
let node3= (pos:(-0.79, 0.39))
node(node3.pos)
let node4= (pos:(-0.18, -0.71))
node(node4.pos)
let node5= (pos:(1.00, 0.93))
node(node5.pos)
edge(node0.pos,(0.66, 0.66),node1.pos,decoration:"arrow",angle:3.49rad)
edge(node3.pos,(0.28, 0.83),node1.pos,decoration:"wave",angle:-0.83rad)
edge(node0.pos,(0.49, -0.62),node2.pos,decoration:"wave",angle:1.35rad)
edge(node2.pos,(0.14, 0.82),node5.pos,decoration:"arrow",angle:3.77rad)
edge(node4.pos,(-0.93, -0.38),node3.pos,decoration:"arrow",angle:2.04rad)
edge(node5.pos,(-0.53, 0.81),node4.pos,decoration:"coil",angle:4.06rad)
edge(node1.pos,(-0.54, -0.54),decoration:"arrow",angle:-1.67rad)
edge(node0.pos,(0.54, -0.54),decoration:"arrow",angle:3.02rad)
edge(node3.pos,(-0.54, 0.00),decoration:"arrow",angle:-0.99rad)
edge(node5.pos,(0.54, 0.00),decoration:"arrow",angle:1.11rad)
edge(node4.pos,(0.54, 0.54),decoration:"arrow",angle:4.19rad)
edge(node2.pos,(-0.54, 0.54),decoration:"arrow",angle:2.21rad)
})
let embedding12i0=cetz.canvas(length:50%,{
let node0= (pos:(-0.72, -0.39))
node(node0.pos)
let node1= (pos:(-0.49, -0.11))
node(node1.pos)
let node2= (pos:(0.46, -0.77))
node(node2.pos)
let node3= (pos:(-0.79, 0.39))
node(node3.pos)
let node4= (pos:(-0.16, -0.71))
node(node4.pos)
let node5= (pos:(1.00, 0.93))
node(node5.pos)
edge(node1.pos,(0.66, 0.66),node0.pos,decoration:"arrow",angle:0.35rad)
cetz.draw.content((0.62, 0.77),angle:0.35rad,[q+k[0]])
cetz.draw.hobby((1.01, 0.82),(3.94, -3.91),(-1.31, -2.06),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.28, 0.83),node1.pos,decoration:"wave",angle:-0.83rad)
cetz.draw.content((0.37, 0.91),angle:-0.83rad,[q])
cetz.draw.hobby((-0.77, 0.73),(0.41, 0.76),(-0.19, -0.26),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(0.49, -0.62),node2.pos,decoration:"wave",angle:1.50rad)
cetz.draw.content((0.61, -0.63),angle:1.50rad,[q])
cetz.draw.hobby((-0.68, -0.18),(0.08, 0.06),(0.55, -0.58),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(0.15, 0.82),node5.pos,decoration:"arrow",angle:3.77rad)
cetz.draw.content((0.08, 0.91),angle:3.77rad,[q+k[3]])
cetz.draw.hobby((0.16, -0.71),(-0.23, 0.38),(0.72, 1.05),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(-0.93, -0.36),node5.pos,decoration:"arrow",angle:4.82rad)
cetz.draw.content((-1.05, -0.37),angle:4.82rad,[-p-q])
cetz.draw.hobby((-1.00, -0.20),(0.76, -1.53),(1.50, 0.55),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-0.53, 0.81),node3.pos,decoration:"arrow",angle:3.89rad)
cetz.draw.content((-0.61, 0.90),angle:3.89rad,[-p])
cetz.draw.hobby((0.27, -0.79),(0.91, 0.63),(-0.63, 0.80),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-0.54, -0.54),decoration:"arrow",angle:-0.68rad)
cetz.draw.content((-0.55, -0.37),angle:-0.68rad,[-k[0]])
cetz.draw.hobby((-0.58, -0.43),(-0.60, -0.41),stroke:stroke,mark: (end: ">"))
edge(node1.pos,(0.54, -0.54),decoration:"arrow",angle:2.75rad)
cetz.draw.content((0.07, -0.21),angle:2.75rad,[-k[0]])
cetz.draw.hobby((-0.38, -0.09),(0.47, -0.44),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(0.54, 0.00),decoration:"arrow",angle:3.94rad)
cetz.draw.content((0.10, -0.27),angle:3.94rad,[k[3]])
cetz.draw.hobby((-0.14, -0.60),(0.43, -0.03),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(-0.54, 0.00),decoration:"arrow",angle:2.48rad)
cetz.draw.content((-0.12, -0.48),angle:2.48rad,[k[3]])
cetz.draw.hobby((-0.50, -0.11),(0.34, -0.76),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(-0.54, 0.54),decoration:"coil",angle:-2.89rad)
cetz.draw.content((0.26, 0.62),angle:-2.89rad,[p-k[3]])
cetz.draw.hobby((-0.43, 0.50),(0.92, 0.84),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(0.54, 0.54),decoration:"coil",angle:4.20rad)
cetz.draw.content((0.08, -0.03),angle:4.20rad,[p-k[3]])
cetz.draw.hobby((-0.17, -0.60),(0.44, 0.48),stroke:stroke,mark: (end: ">"))
})
let embedding12i1=cetz.canvas(length:50%,{
let node0= (pos:(-0.72, -0.39))
node(node0.pos)
let node1= (pos:(-0.49, -0.11))
node(node1.pos)
let node2= (pos:(0.46, -0.77))
node(node2.pos)
let node3= (pos:(-0.79, 0.39))
node(node3.pos)
let node4= (pos:(-0.16, -0.71))
node(node4.pos)
let node5= (pos:(1.00, 0.93))
node(node5.pos)
edge(node1.pos,(0.66, 0.66),node0.pos,decoration:"arrow",angle:0.35rad)
cetz.draw.content((0.62, 0.77),angle:0.35rad,[q+k[0]])
cetz.draw.hobby((1.01, 0.82),(3.94, -3.91),(-1.31, -2.06),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.28, 0.83),node1.pos,decoration:"wave",angle:-0.83rad)
cetz.draw.content((0.37, 0.91),angle:-0.83rad,[q])
cetz.draw.hobby((-0.77, 0.73),(0.41, 0.76),(-0.19, -0.26),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(0.49, -0.62),node2.pos,decoration:"wave",angle:1.50rad)
cetz.draw.content((0.61, -0.63),angle:1.50rad,[q])
cetz.draw.hobby((-0.68, -0.18),(0.08, 0.06),(0.55, -0.58),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(0.15, 0.82),node5.pos,decoration:"arrow",angle:3.77rad)
cetz.draw.content((0.08, 0.91),angle:3.77rad,[q+k[3]])
cetz.draw.hobby((0.16, -0.71),(-0.23, 0.38),(0.72, 1.05),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(-0.93, -0.36),node5.pos,decoration:"arrow",angle:4.82rad)
cetz.draw.content((-1.05, -0.37),angle:4.82rad,[-p-q])
cetz.draw.hobby((-1.00, -0.20),(0.76, -1.53),(1.50, 0.55),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-0.53, 0.81),node2.pos,decoration:"arrow",angle:4.03rad)
cetz.draw.content((-0.62, 0.89),angle:4.03rad,[k[3]])
cetz.draw.hobby((-0.63, -0.39),(0.34, 1.24),(0.98, -0.55),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(0.59, -0.43),node4.pos,decoration:"coil",angle:-2.46rad)
cetz.draw.content((0.66, -0.53),angle:-2.46rad,[-p+k[3]])
cetz.draw.hobby((1.11, 0.71),(0.87, -0.22),(0.08, -0.74),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-0.54, -0.54),decoration:"arrow",angle:-0.68rad)
cetz.draw.content((-0.55, -0.37),angle:-0.68rad,[-k[0]])
cetz.draw.hobby((-0.58, -0.43),(-0.60, -0.41),stroke:stroke,mark: (end: ">"))
edge(node1.pos,(0.54, -0.54),decoration:"arrow",angle:2.75rad)
cetz.draw.content((0.07, -0.21),angle:2.75rad,[-k[0]])
cetz.draw.hobby((-0.38, -0.09),(0.47, -0.44),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-0.54, 0.54),decoration:"arrow",angle:1.86rad)
cetz.draw.content((-0.47, -0.12),angle:1.86rad,[p])
cetz.draw.hobby((-0.57, 0.43),(-0.25, -0.64),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.54, 0.54),decoration:"arrow",angle:3.25rad)
cetz.draw.content((-0.14, 0.58),angle:3.25rad,[p])
cetz.draw.hobby((-0.70, 0.46),(0.43, 0.59),stroke:stroke,mark: (end: ">"))
})
let embedding12f0=cetz.canvas(length:50%,{
let node0= (pos:(-0.72, -0.39))
node(node0.pos)
let node1= (pos:(-0.49, -0.11))
node(node1.pos)
let node2= (pos:(0.43, -0.77))
node(node2.pos)
let node3= (pos:(-0.79, 0.39))
node(node3.pos)
let node4= (pos:(-0.18, -0.71))
node(node4.pos)
let node5= (pos:(1.00, 0.93))
node(node5.pos)
edge(node0.pos,(0.66, 0.66),node1.pos,decoration:"arrow",angle:3.49rad)
edge(node3.pos,(0.28, 0.83),node1.pos,decoration:"wave",angle:-0.83rad)
edge(node0.pos,(0.49, -0.62),node2.pos,decoration:"wave",angle:1.35rad)
edge(node3.pos,(0.14, 0.82),node5.pos,decoration:"arrow",angle:0.27rad)
edge(node4.pos,(-0.93, -0.38),node3.pos,decoration:"arrow",angle:2.04rad)
edge(node4.pos,(-0.53, 0.81),node2.pos,decoration:"arrow",angle:4.01rad)
edge(node1.pos,(-0.54, -0.54),decoration:"arrow",angle:-1.67rad)
edge(node0.pos,(0.54, -0.54),decoration:"arrow",angle:3.02rad)
edge(node2.pos,(0.54, 0.00),decoration:"arrow",angle:4.57rad)
edge(node5.pos,(-0.54, 0.00),decoration:"arrow",angle:-2.60rad)
edge(node5.pos,(-0.54, 0.54),decoration:"coil",angle:-2.89rad)
edge(node4.pos,(0.54, 0.54),decoration:"coil",angle:4.19rad)
})
let embedding12f1=cetz.canvas(length:50%,{
let node0= (pos:(-0.72, -0.39))
node(node0.pos)
let node1= (pos:(-0.49, -0.11))
node(node1.pos)
let node2= (pos:(0.43, -0.77))
node(node2.pos)
let node3= (pos:(-0.79, 0.39))
node(node3.pos)
let node4= (pos:(-0.18, -0.71))
node(node4.pos)
let node5= (pos:(1.00, 0.93))
node(node5.pos)
edge(node0.pos,(0.66, 0.66),node1.pos,decoration:"arrow",angle:3.49rad)
edge(node3.pos,(0.28, 0.83),node1.pos,decoration:"wave",angle:-0.83rad)
edge(node0.pos,(0.49, -0.62),node2.pos,decoration:"wave",angle:1.35rad)
edge(node2.pos,(0.14, 0.82),node5.pos,decoration:"arrow",angle:3.77rad)
edge(node4.pos,(-0.93, -0.38),node3.pos,decoration:"arrow",angle:2.04rad)
edge(node4.pos,(-0.53, 0.81),node2.pos,decoration:"arrow",angle:4.01rad)
edge(node5.pos,(0.59, -0.43),node4.pos,decoration:"coil",angle:-2.46rad)
edge(node1.pos,(-0.54, -0.54),decoration:"arrow",angle:-1.67rad)
edge(node0.pos,(0.54, -0.54),decoration:"arrow",angle:3.02rad)
edge(node3.pos,(-0.54, 0.54),decoration:"arrow",angle:0.54rad)
edge(node5.pos,(0.54, 0.54),decoration:"arrow",angle:0.70rad)
})
let embedding13i0=cetz.canvas(length:50%,{
let node0= (pos:(-0.72, -0.39))
node(node0.pos)
let node1= (pos:(-0.49, -0.11))
node(node1.pos)
let node2= (pos:(0.43, -0.77))
node(node2.pos)
let node3= (pos:(-0.79, 0.39))
node(node3.pos)
let node4= (pos:(-0.18, -0.71))
node(node4.pos)
let node5= (pos:(1.00, 0.93))
node(node5.pos)
edge(node1.pos,(0.66, 0.66),node0.pos,decoration:"arrow",angle:0.35rad)
cetz.draw.content((0.62, 0.77),angle:0.35rad,[q+k[0]])
cetz.draw.hobby((1.01, 0.82),(3.94, -3.91),(-1.31, -2.06),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.28, 0.83),node1.pos,decoration:"wave",angle:-0.83rad)
cetz.draw.content((0.37, 0.91),angle:-0.83rad,[q])
cetz.draw.hobby((-0.77, 0.73),(0.41, 0.76),(-0.19, -0.26),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(0.49, -0.62),node2.pos,decoration:"wave",angle:1.35rad)
cetz.draw.content((0.60, -0.65),angle:1.35rad,[q])
cetz.draw.hobby((-0.70, -0.16),(0.10, 0.15),(0.55, -0.58),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(0.14, 0.82),node3.pos,decoration:"arrow",angle:2.86rad)
cetz.draw.content((0.18, 0.93),angle:2.86rad,[-p-k[3]])
cetz.draw.hobby((0.18, -0.74),(0.66, 0.47),(-0.62, 0.71),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-0.93, -0.40),node2.pos,decoration:"arrow",angle:5.72rad)
cetz.draw.content((-1.00, -0.50),angle:5.72rad,[k[3]])
cetz.draw.hobby((-1.47, -0.03),(0.61, 4.15),(1.83, -0.36),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(-0.53, 0.81),node4.pos,decoration:"coil",angle:4.06rad)
cetz.draw.content((-0.63, 0.89),angle:4.06rad,[-p])
cetz.draw.hobby((0.74, 1.18),(-0.60, 0.83),(-0.50, -0.55),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-0.54, -0.54),decoration:"arrow",angle:-0.68rad)
cetz.draw.content((-0.55, -0.37),angle:-0.68rad,[-k[0]])
cetz.draw.hobby((-0.58, -0.43),(-0.60, -0.41),stroke:stroke,mark: (end: ">"))
edge(node1.pos,(0.54, -0.54),decoration:"arrow",angle:2.75rad)
cetz.draw.content((0.07, -0.21),angle:2.75rad,[-k[0]])
cetz.draw.hobby((-0.38, -0.09),(0.47, -0.44),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(-0.54, 0.00),decoration:"arrow",angle:5.61rad)
cetz.draw.content((-0.13, -0.48),angle:5.61rad,[-q-k[3]])
cetz.draw.hobby((-0.50, -0.11),(0.31, -0.76),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(0.54, 0.00),decoration:"arrow",angle:-2.03rad)
cetz.draw.content((0.88, 0.41),angle:-2.03rad,[-q-k[3]])
cetz.draw.hobby((1.01, 0.81),(0.64, 0.06),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(-0.54, 0.54),decoration:"arrow",angle:0.54rad)
cetz.draw.content((-0.73, 0.57),angle:0.54rad,[p+q+k[3]])
cetz.draw.hobby((-0.65, 0.54),(-0.74, 0.49),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(0.54, 0.54),decoration:"arrow",angle:0.70rad)
cetz.draw.content((0.85, 0.64),angle:0.70rad,[p+q+k[3]])
cetz.draw.hobby((0.96, 0.82),(0.65, 0.56),stroke:stroke,mark: (end: ">"))
})
let embedding13i1=cetz.canvas(length:50%,{
let node0= (pos:(-0.72, -0.39))
node(node0.pos)
let node1= (pos:(-0.49, -0.11))
node(node1.pos)
let node2= (pos:(0.46, -0.77))
node(node2.pos)
let node3= (pos:(-0.79, 0.39))
node(node3.pos)
let node4= (pos:(-0.18, -0.71))
node(node4.pos)
let node5= (pos:(1.00, 0.93))
node(node5.pos)
edge(node1.pos,(0.66, 0.66),node0.pos,decoration:"arrow",angle:0.35rad)
cetz.draw.content((0.62, 0.77),angle:0.35rad,[q+k[0]])
cetz.draw.hobby((1.01, 0.82),(3.94, -3.91),(-1.31, -2.06),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.28, 0.83),node1.pos,decoration:"wave",angle:-0.83rad)
cetz.draw.content((0.37, 0.91),angle:-0.83rad,[q])
cetz.draw.hobby((-0.77, 0.73),(0.41, 0.76),(-0.19, -0.26),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(0.49, -0.62),node2.pos,decoration:"wave",angle:1.50rad)
cetz.draw.content((0.61, -0.63),angle:1.50rad,[q])
cetz.draw.hobby((-0.68, -0.18),(0.08, 0.06),(0.55, -0.58),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(0.15, 0.82),node5.pos,decoration:"arrow",angle:3.77rad)
cetz.draw.content((0.08, 0.91),angle:3.77rad,[q+k[3]])
cetz.draw.hobby((0.16, -0.71),(-0.23, 0.38),(0.72, 1.05),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(-0.93, -0.36),node5.pos,decoration:"arrow",angle:4.82rad)
cetz.draw.content((-1.05, -0.37),angle:4.82rad,[-p-q-k[3]])
cetz.draw.hobby((-1.00, -0.20),(0.76, -1.53),(1.50, 0.55),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(-0.53, 0.81),node4.pos,decoration:"coil",angle:4.06rad)
cetz.draw.content((-0.63, 0.89),angle:4.06rad,[-p])
cetz.draw.hobby((0.74, 1.18),(-0.60, 0.83),(-0.50, -0.55),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-0.54, -0.54),decoration:"arrow",angle:-0.68rad)
cetz.draw.content((-0.55, -0.37),angle:-0.68rad,[-k[0]])
cetz.draw.hobby((-0.58, -0.43),(-0.60, -0.41),stroke:stroke,mark: (end: ">"))
edge(node1.pos,(0.54, -0.54),decoration:"arrow",angle:2.75rad)
cetz.draw.content((0.07, -0.21),angle:2.75rad,[-k[0]])
cetz.draw.hobby((-0.38, -0.09),(0.47, -0.44),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-0.54, 0.00),decoration:"arrow",angle:2.04rad)
cetz.draw.content((-0.47, -0.41),angle:2.04rad,[p+k[3]])
cetz.draw.hobby((-0.55, -0.12),(-0.28, -0.65),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.54, 0.00),decoration:"arrow",angle:2.86rad)
cetz.draw.content((-0.09, 0.31),angle:2.86rad,[p+k[3]])
cetz.draw.hobby((-0.68, 0.42),(0.46, 0.09),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-0.54, 0.54),decoration:"arrow",angle:4.99rad)
cetz.draw.content((-0.47, -0.12),angle:4.99rad,[-k[3]])
cetz.draw.hobby((-0.57, 0.43),(-0.26, -0.63),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(0.54, 0.54),decoration:"arrow",angle:1.51rad)
cetz.draw.content((0.38, -0.11),angle:1.51rad,[-k[3]])
cetz.draw.hobby((0.40, -0.67),(0.47, 0.44),stroke:stroke,mark: (end: ">"))
})
let embedding13i2=cetz.canvas(length:50%,{
let node0= (pos:(-0.72, -0.39))
node(node0.pos)
let node1= (pos:(-0.49, -0.11))
node(node1.pos)
let node2= (pos:(0.46, -0.77))
node(node2.pos)
let node3= (pos:(-0.79, 0.39))
node(node3.pos)
let node4= (pos:(-0.16, -0.71))
node(node4.pos)
let node5= (pos:(1.00, 0.93))
node(node5.pos)
edge(node1.pos,(0.66, 0.66),node0.pos,decoration:"arrow",angle:0.35rad)
cetz.draw.content((0.62, 0.77),angle:0.35rad,[q+k[0]])
cetz.draw.hobby((1.01, 0.82),(3.94, -3.91),(-1.31, -2.06),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.28, 0.83),node1.pos,decoration:"wave",angle:-0.83rad)
cetz.draw.content((0.37, 0.91),angle:-0.83rad,[q])
cetz.draw.hobby((-0.77, 0.73),(0.41, 0.76),(-0.19, -0.26),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(0.49, -0.62),node2.pos,decoration:"wave",angle:1.50rad)
cetz.draw.content((0.61, -0.63),angle:1.50rad,[q])
cetz.draw.hobby((-0.68, -0.18),(0.08, 0.06),(0.55, -0.58),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(0.15, 0.82),node5.pos,decoration:"arrow",angle:3.77rad)
cetz.draw.content((0.08, 0.91),angle:3.77rad,[q+k[3]])
cetz.draw.hobby((0.16, -0.71),(-0.23, 0.38),(0.72, 1.05),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(-0.93, -0.36),node5.pos,decoration:"arrow",angle:4.82rad)
cetz.draw.content((-1.05, -0.37),angle:4.82rad,[-p-q-k[3]])
cetz.draw.hobby((-1.00, -0.20),(0.76, -1.53),(1.50, 0.55),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-0.53, 0.81),node3.pos,decoration:"arrow",angle:3.89rad)
cetz.draw.content((-0.61, 0.90),angle:3.89rad,[-p-k[3]])
cetz.draw.hobby((0.27, -0.79),(0.91, 0.63),(-0.63, 0.80),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(0.59, -0.43),node2.pos,decoration:"arrow",angle:1.65rad)
cetz.draw.content((0.71, -0.42),angle:1.65rad,[k[3]])
cetz.draw.hobby((-0.30, -0.55),(0.22, 0.01),(0.62, -0.64),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-0.54, -0.54),decoration:"arrow",angle:-0.68rad)
cetz.draw.content((-0.55, -0.37),angle:-0.68rad,[-k[0]])
cetz.draw.hobby((-0.58, -0.43),(-0.60, -0.41),stroke:stroke,mark: (end: ">"))
edge(node1.pos,(0.54, -0.54),decoration:"arrow",angle:2.75rad)
cetz.draw.content((0.07, -0.21),angle:2.75rad,[-k[0]])
cetz.draw.hobby((-0.38, -0.09),(0.47, -0.44),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(-0.54, 0.54),decoration:"coil",angle:-2.89rad)
cetz.draw.content((0.26, 0.62),angle:-2.89rad,[p])
cetz.draw.hobby((-0.43, 0.50),(0.92, 0.84),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(0.54, 0.54),decoration:"coil",angle:4.20rad)
cetz.draw.content((0.08, -0.03),angle:4.20rad,[p])
cetz.draw.hobby((-0.17, -0.60),(0.44, 0.48),stroke:stroke,mark: (end: ">"))
})
let embedding13f0=cetz.canvas(length:50%,{
let node0= (pos:(-0.72, -0.39))
node(node0.pos)
let node1= (pos:(-0.49, -0.11))
node(node1.pos)
let node2= (pos:(0.46, -0.77))
node(node2.pos)
let node3= (pos:(-0.79, 0.39))
node(node3.pos)
let node4= (pos:(-0.18, -0.71))
node(node4.pos)
let node5= (pos:(1.00, 0.93))
node(node5.pos)
edge(node0.pos,(0.66, 0.66),node1.pos,decoration:"arrow",angle:3.49rad)
edge(node3.pos,(0.28, 0.83),node1.pos,decoration:"wave",angle:-0.83rad)
edge(node0.pos,(0.49, -0.62),node2.pos,decoration:"wave",angle:1.48rad)
edge(node2.pos,(0.15, 0.82),node5.pos,decoration:"arrow",angle:3.77rad)
edge(node4.pos,(-0.93, -0.36),node3.pos,decoration:"arrow",angle:2.00rad)
edge(node5.pos,(-0.53, 0.81),node4.pos,decoration:"coil",angle:4.06rad)
edge(node1.pos,(-0.54, -0.54),decoration:"arrow",angle:-1.67rad)
edge(node0.pos,(0.54, -0.54),decoration:"arrow",angle:3.02rad)
edge(node3.pos,(-0.54, 0.00),decoration:"arrow",angle:-0.99rad)
edge(node5.pos,(0.54, 0.00),decoration:"arrow",angle:1.11rad)
edge(node4.pos,(-0.54, 0.54),decoration:"arrow",angle:4.99rad)
edge(node2.pos,(0.54, 0.54),decoration:"arrow",angle:1.51rad)
})
let embedding14i0=cetz.canvas(length:50%,{
let node0= (pos:(-0.72, -0.39))
node(node0.pos)
let node1= (pos:(-0.49, -0.11))
node(node1.pos)
let node2= (pos:(0.43, -0.77))
node(node2.pos)
let node3= (pos:(-0.79, 0.39))
node(node3.pos)
let node4= (pos:(-0.18, -0.71))
node(node4.pos)
let node5= (pos:(1.00, 0.93))
node(node5.pos)
edge(node1.pos,(0.66, 0.66),node0.pos,decoration:"arrow",angle:0.35rad)
cetz.draw.content((0.62, 0.77),angle:0.35rad,[q+k[0]])
cetz.draw.hobby((1.01, 0.82),(3.94, -3.91),(-1.31, -2.06),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.28, 0.83),node1.pos,decoration:"wave",angle:-0.83rad)
cetz.draw.content((0.37, 0.91),angle:-0.83rad,[q])
cetz.draw.hobby((-0.77, 0.73),(0.41, 0.76),(-0.19, -0.26),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(0.49, -0.62),node2.pos,decoration:"wave",angle:1.35rad)
cetz.draw.content((0.60, -0.65),angle:1.35rad,[q])
cetz.draw.hobby((-0.70, -0.16),(0.10, 0.15),(0.55, -0.58),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.14, 0.82),node5.pos,decoration:"arrow",angle:0.27rad)
cetz.draw.content((0.11, 0.93),angle:0.27rad,[-p-2 q-k[3]])
cetz.draw.hobby((-0.66, 0.54),(0.05, 0.85),(0.81, 0.98),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-0.93, -0.40),node2.pos,decoration:"arrow",angle:5.72rad)
cetz.draw.content((-1.00, -0.50),angle:5.72rad,[k[3]])
cetz.draw.hobby((-1.47, -0.03),(0.61, 4.15),(1.83, -0.36),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(-0.53, 0.81),node4.pos,decoration:"coil",angle:4.06rad)
cetz.draw.content((-0.63, 0.89),angle:4.06rad,[-p-q])
cetz.draw.hobby((0.74, 1.18),(-0.60, 0.83),(-0.50, -0.55),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-0.54, -0.54),decoration:"arrow",angle:-0.68rad)
cetz.draw.content((-0.55, -0.37),angle:-0.68rad,[-k[0]])
cetz.draw.hobby((-0.58, -0.43),(-0.60, -0.41),stroke:stroke,mark: (end: ">"))
edge(node1.pos,(0.54, -0.54),decoration:"arrow",angle:2.75rad)
cetz.draw.content((0.07, -0.21),angle:2.75rad,[-k[0]])
cetz.draw.hobby((-0.38, -0.09),(0.47, -0.44),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(-0.54, 0.00),decoration:"arrow",angle:5.61rad)
cetz.draw.content((-0.13, -0.48),angle:5.61rad,[-q-k[3]])
cetz.draw.hobby((-0.50, -0.11),(0.31, -0.76),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(0.54, 0.00),decoration:"arrow",angle:-2.03rad)
cetz.draw.content((0.88, 0.41),angle:-2.03rad,[-q-k[3]])
cetz.draw.hobby((1.01, 0.81),(0.64, 0.06),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-0.54, 0.54),decoration:"arrow",angle:1.85rad)
cetz.draw.content((-0.47, -0.12),angle:1.85rad,[p+q+k[3]])
cetz.draw.hobby((-0.57, 0.43),(-0.26, -0.63),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.54, 0.54),decoration:"arrow",angle:3.25rad)
cetz.draw.content((-0.14, 0.58),angle:3.25rad,[p+q+k[3]])
cetz.draw.hobby((-0.70, 0.46),(0.43, 0.59),stroke:stroke,mark: (end: ">"))
})
let embedding14f0=cetz.canvas(length:50%,{
let node0= (pos:(-0.72, -0.39))
node(node0.pos)
let node1= (pos:(-0.49, -0.11))
node(node1.pos)
let node2= (pos:(0.46, -0.77))
node(node2.pos)
let node3= (pos:(-0.79, 0.39))
node(node3.pos)
let node4= (pos:(-0.16, -0.71))
node(node4.pos)
let node5= (pos:(1.00, 0.93))
node(node5.pos)
edge(node0.pos,(0.66, 0.66),node1.pos,decoration:"arrow",angle:3.49rad)
edge(node3.pos,(0.28, 0.83),node1.pos,decoration:"wave",angle:-0.83rad)
edge(node0.pos,(0.49, -0.62),node2.pos,decoration:"wave",angle:1.50rad)
edge(node2.pos,(0.15, 0.82),node5.pos,decoration:"arrow",angle:3.77rad)
edge(node3.pos,(-0.93, -0.36),node5.pos,decoration:"arrow",angle:4.82rad)
edge(node4.pos,(-0.53, 0.81),node3.pos,decoration:"arrow",angle:3.89rad)
edge(node4.pos,(0.59, -0.43),node2.pos,decoration:"arrow",angle:1.65rad)
edge(node1.pos,(-0.54, -0.54),decoration:"arrow",angle:-1.67rad)
edge(node0.pos,(0.54, -0.54),decoration:"arrow",angle:3.02rad)
edge(node5.pos,(-0.54, 0.54),decoration:"coil",angle:-2.89rad)
edge(node4.pos,(0.54, 0.54),decoration:"coil",angle:4.20rad)
})
let embedding14f1=cetz.canvas(length:50%,{
let node0= (pos:(-0.72, -0.39))
node(node0.pos)
let node1= (pos:(-0.49, -0.11))
node(node1.pos)
let node2= (pos:(0.46, -0.77))
node(node2.pos)
let node3= (pos:(-0.79, 0.39))
node(node3.pos)
let node4= (pos:(-0.18, -0.71))
node(node4.pos)
let node5= (pos:(1.00, 0.93))
node(node5.pos)
edge(node0.pos,(0.66, 0.66),node1.pos,decoration:"arrow",angle:3.49rad)
edge(node3.pos,(0.28, 0.83),node1.pos,decoration:"wave",angle:-0.83rad)
edge(node0.pos,(0.49, -0.62),node2.pos,decoration:"wave",angle:1.50rad)
edge(node2.pos,(0.15, 0.82),node5.pos,decoration:"arrow",angle:3.77rad)
edge(node3.pos,(-0.93, -0.36),node5.pos,decoration:"arrow",angle:4.82rad)
edge(node5.pos,(-0.53, 0.81),node4.pos,decoration:"coil",angle:4.06rad)
edge(node1.pos,(-0.54, -0.54),decoration:"arrow",angle:-1.67rad)
edge(node0.pos,(0.54, -0.54),decoration:"arrow",angle:3.02rad)
edge(node4.pos,(-0.54, 0.00),decoration:"arrow",angle:2.04rad)
edge(node3.pos,(0.54, 0.00),decoration:"arrow",angle:2.86rad)
edge(node4.pos,(-0.54, 0.54),decoration:"arrow",angle:4.99rad)
edge(node2.pos,(0.54, 0.54),decoration:"arrow",angle:1.51rad)
})
let embedding14f2=cetz.canvas(length:50%,{
let node0= (pos:(-0.72, -0.39))
node(node0.pos)
let node1= (pos:(-0.49, -0.11))
node(node1.pos)
let node2= (pos:(0.43, -0.77))
node(node2.pos)
let node3= (pos:(-0.79, 0.39))
node(node3.pos)
let node4= (pos:(-0.18, -0.71))
node(node4.pos)
let node5= (pos:(1.00, 0.93))
node(node5.pos)
edge(node0.pos,(0.66, 0.66),node1.pos,decoration:"arrow",angle:3.49rad)
edge(node3.pos,(0.28, 0.83),node1.pos,decoration:"wave",angle:-0.83rad)
edge(node0.pos,(0.49, -0.62),node2.pos,decoration:"wave",angle:1.35rad)
edge(node4.pos,(0.14, 0.82),node3.pos,decoration:"arrow",angle:2.86rad)
edge(node4.pos,(-0.93, -0.40),node2.pos,decoration:"arrow",angle:5.72rad)
edge(node5.pos,(-0.53, 0.81),node4.pos,decoration:"coil",angle:4.06rad)
edge(node1.pos,(-0.54, -0.54),decoration:"arrow",angle:-1.67rad)
edge(node0.pos,(0.54, -0.54),decoration:"arrow",angle:3.02rad)
edge(node2.pos,(-0.54, 0.00),decoration:"arrow",angle:5.61rad)
edge(node5.pos,(0.54, 0.00),decoration:"arrow",angle:-2.03rad)
edge(node3.pos,(-0.54, 0.54),decoration:"arrow",angle:0.54rad)
edge(node5.pos,(0.54, 0.54),decoration:"arrow",angle:0.70rad)
})
let embedding15i0=cetz.canvas(length:50%,{
let node0= (pos:(-0.72, -0.39))
node(node0.pos)
let node1= (pos:(-0.49, -0.11))
node(node1.pos)
let node2= (pos:(0.43, -0.77))
node(node2.pos)
let node3= (pos:(-0.79, 0.39))
node(node3.pos)
let node4= (pos:(-0.18, -0.71))
node(node4.pos)
let node5= (pos:(1.00, 0.93))
node(node5.pos)
edge(node1.pos,(0.66, 0.66),node0.pos,decoration:"arrow",angle:0.35rad)
cetz.draw.content((0.62, 0.77),angle:0.35rad,[q+k[0]])
cetz.draw.hobby((1.01, 0.82),(3.94, -3.91),(-1.31, -2.06),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.28, 0.83),node1.pos,decoration:"wave",angle:-0.83rad)
cetz.draw.content((0.37, 0.91),angle:-0.83rad,[q])
cetz.draw.hobby((-0.77, 0.73),(0.41, 0.76),(-0.19, -0.26),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(0.49, -0.62),node2.pos,decoration:"wave",angle:1.35rad)
cetz.draw.content((0.60, -0.65),angle:1.35rad,[q])
cetz.draw.hobby((-0.70, -0.16),(0.10, 0.15),(0.55, -0.58),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.14, 0.82),node5.pos,decoration:"arrow",angle:0.27rad)
cetz.draw.content((0.11, 0.93),angle:0.27rad,[-p-2 q-2 k[3]])
cetz.draw.hobby((-0.66, 0.54),(0.05, 0.85),(0.81, 0.98),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-0.93, -0.38),node3.pos,decoration:"arrow",angle:2.04rad)
cetz.draw.content((-1.04, -0.44),angle:2.04rad,[-p-q-2 k[3]])
cetz.draw.hobby((-0.35, -0.80),(-0.97, -0.43),(-0.95, 0.29),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-0.53, 0.81),node2.pos,decoration:"arrow",angle:4.01rad)
cetz.draw.content((-0.62, 0.89),angle:4.01rad,[k[3]])
cetz.draw.hobby((-0.65, -0.40),(0.32, 1.22),(0.95, -0.55),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-0.54, -0.54),decoration:"arrow",angle:-0.68rad)
cetz.draw.content((-0.55, -0.37),angle:-0.68rad,[-k[0]])
cetz.draw.hobby((-0.58, -0.43),(-0.60, -0.41),stroke:stroke,mark: (end: ">"))
edge(node1.pos,(0.54, -0.54),decoration:"arrow",angle:2.75rad)
cetz.draw.content((0.07, -0.21),angle:2.75rad,[-k[0]])
cetz.draw.hobby((-0.38, -0.09),(0.47, -0.44),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(-0.54, 0.00),decoration:"arrow",angle:5.61rad)
cetz.draw.content((-0.13, -0.48),angle:5.61rad,[-q-k[3]])
cetz.draw.hobby((-0.50, -0.11),(0.31, -0.76),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(0.54, 0.00),decoration:"arrow",angle:-2.03rad)
cetz.draw.content((0.88, 0.41),angle:-2.03rad,[-q-k[3]])
cetz.draw.hobby((1.01, 0.81),(0.64, 0.06),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(-0.54, 0.54),decoration:"coil",angle:-2.89rad)
cetz.draw.content((0.26, 0.62),angle:-2.89rad,[p+q+k[3]])
cetz.draw.hobby((-0.43, 0.50),(0.92, 0.84),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(0.54, 0.54),decoration:"coil",angle:4.19rad)
cetz.draw.content((0.08, -0.03),angle:4.19rad,[p+q+k[3]])
cetz.draw.hobby((-0.18, -0.60),(0.44, 0.48),stroke:stroke,mark: (end: ">"))
})
let embedding15f0=cetz.canvas(length:50%,{
let node0= (pos:(-0.72, -0.39))
node(node0.pos)
let node1= (pos:(-0.49, -0.11))
node(node1.pos)
let node2= (pos:(0.46, -0.77))
node(node2.pos)
let node3= (pos:(-0.79, 0.39))
node(node3.pos)
let node4= (pos:(-0.18, -0.71))
node(node4.pos)
let node5= (pos:(1.00, 0.93))
node(node5.pos)
edge(node0.pos,(0.66, 0.66),node1.pos,decoration:"arrow",angle:3.49rad)
edge(node3.pos,(0.28, 0.83),node1.pos,decoration:"wave",angle:-0.83rad)
edge(node0.pos,(0.49, -0.62),node2.pos,decoration:"wave",angle:1.50rad)
edge(node2.pos,(0.15, 0.82),node5.pos,decoration:"arrow",angle:3.77rad)
edge(node3.pos,(-0.93, -0.36),node5.pos,decoration:"arrow",angle:4.82rad)
edge(node4.pos,(-0.53, 0.81),node3.pos,decoration:"arrow",angle:3.89rad)
edge(node1.pos,(-0.54, -0.54),decoration:"arrow",angle:-1.67rad)
edge(node0.pos,(0.54, -0.54),decoration:"arrow",angle:3.02rad)
edge(node4.pos,(-0.54, 0.00),decoration:"arrow",angle:5.18rad)
edge(node2.pos,(0.54, 0.00),decoration:"arrow",angle:1.46rad)
edge(node5.pos,(-0.54, 0.54),decoration:"coil",angle:-2.89rad)
edge(node4.pos,(0.54, 0.54),decoration:"coil",angle:4.19rad)
})
let embedding16i0=cetz.canvas(length:50%,{
let node0= (pos:(-0.72, -0.39))
node(node0.pos)
let node1= (pos:(-0.49, -0.11))
node(node1.pos)
let node2= (pos:(0.46, -0.77))
node(node2.pos)
let node3= (pos:(-0.79, 0.39))
node(node3.pos)
let node4= (pos:(-0.18, -0.71))
node(node4.pos)
let node5= (pos:(1.00, 0.93))
node(node5.pos)
edge(node1.pos,(0.66, 0.66),node0.pos,decoration:"arrow",angle:0.35rad)
cetz.draw.content((0.62, 0.77),angle:0.35rad,[q+k[0]])
cetz.draw.hobby((1.01, 0.82),(3.94, -3.91),(-1.31, -2.06),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.28, 0.83),node1.pos,decoration:"wave",angle:-0.83rad)
cetz.draw.content((0.37, 0.91),angle:-0.83rad,[q])
cetz.draw.hobby((-0.77, 0.73),(0.41, 0.76),(-0.19, -0.26),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(0.49, -0.62),node2.pos,decoration:"wave",angle:1.50rad)
cetz.draw.content((0.61, -0.63),angle:1.50rad,[q])
cetz.draw.hobby((-0.68, -0.18),(0.08, 0.06),(0.55, -0.58),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(0.15, 0.82),node5.pos,decoration:"arrow",angle:3.77rad)
cetz.draw.content((0.08, 0.91),angle:3.77rad,[q+k[3]])
cetz.draw.hobby((0.16, -0.71),(-0.23, 0.38),(0.72, 1.05),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(-0.93, -0.36),node5.pos,decoration:"arrow",angle:4.82rad)
cetz.draw.content((-1.05, -0.37),angle:4.82rad,[-1/2 p-q-1/2 k[3]])
cetz.draw.hobby((-1.00, -0.20),(0.76, -1.53),(1.50, 0.55),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-0.53, 0.81),node2.pos,decoration:"arrow",angle:4.02rad)
cetz.draw.content((-0.62, 0.89),angle:4.02rad,[k[3]])
cetz.draw.hobby((-0.65, -0.39),(0.33, 1.23),(0.97, -0.55),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-0.54, -0.54),decoration:"arrow",angle:-0.68rad)
cetz.draw.content((-0.55, -0.37),angle:-0.68rad,[-k[0]])
cetz.draw.hobby((-0.58, -0.43),(-0.60, -0.41),stroke:stroke,mark: (end: ">"))
edge(node1.pos,(0.54, -0.54),decoration:"arrow",angle:2.75rad)
cetz.draw.content((0.07, -0.21),angle:2.75rad,[-k[0]])
cetz.draw.hobby((-0.38, -0.09),(0.47, -0.44),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-0.54, 0.00),decoration:"arrow",angle:2.04rad)
cetz.draw.content((-0.47, -0.41),angle:2.04rad,[1/2 p+1/2 k[3]])
cetz.draw.hobby((-0.55, -0.12),(-0.28, -0.65),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.54, 0.00),decoration:"arrow",angle:2.86rad)
cetz.draw.content((-0.09, 0.31),angle:2.86rad,[1/2 p+1/2 k[3]])
cetz.draw.hobby((-0.68, 0.42),(0.46, 0.09),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(-0.54, 0.54),decoration:"coil",angle:-2.89rad)
cetz.draw.content((0.26, 0.62),angle:-2.89rad,[1/2 p-1/2 k[3]])
cetz.draw.hobby((-0.43, 0.50),(0.92, 0.84),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(0.54, 0.54),decoration:"coil",angle:4.19rad)
cetz.draw.content((0.08, -0.03),angle:4.19rad,[1/2 p-1/2 k[3]])
cetz.draw.hobby((-0.18, -0.60),(0.44, 0.48),stroke:stroke,mark: (end: ">"))
})
let embedding16f0=cetz.canvas(length:50%,{
let node0= (pos:(-0.72, -0.39))
node(node0.pos)
let node1= (pos:(-0.49, -0.11))
node(node1.pos)
let node2= (pos:(0.43, -0.77))
node(node2.pos)
let node3= (pos:(-0.79, 0.39))
node(node3.pos)
let node4= (pos:(-0.18, -0.71))
node(node4.pos)
let node5= (pos:(1.00, 0.93))
node(node5.pos)
edge(node0.pos,(0.66, 0.66),node1.pos,decoration:"arrow",angle:3.49rad)
edge(node3.pos,(0.28, 0.83),node1.pos,decoration:"wave",angle:-0.83rad)
edge(node0.pos,(0.49, -0.62),node2.pos,decoration:"wave",angle:1.35rad)
edge(node2.pos,(0.14, 0.82),node5.pos,decoration:"arrow",angle:3.77rad)
edge(node4.pos,(-0.93, -0.38),node3.pos,decoration:"arrow",angle:2.04rad)
edge(node4.pos,(-0.53, 0.81),node2.pos,decoration:"arrow",angle:4.01rad)
edge(node1.pos,(-0.54, -0.54),decoration:"arrow",angle:-1.67rad)
edge(node0.pos,(0.54, -0.54),decoration:"arrow",angle:3.02rad)
edge(node3.pos,(-0.54, 0.00),decoration:"arrow",angle:-0.99rad)
edge(node5.pos,(0.54, 0.00),decoration:"arrow",angle:1.11rad)
edge(node5.pos,(-0.54, 0.54),decoration:"coil",angle:-2.89rad)
edge(node4.pos,(0.54, 0.54),decoration:"coil",angle:4.19rad)
})
[= embedding 1 [1, -1, -2, -1] 
 == initial
Denominator:
```mathematica
prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,1/2 p+1/2 q+1/2 k[3]]^-1 prop[0,1/2 p+1/2 q-1/2 k[3]]^-1 prop[0,1/2 p-1/2 q-1/2 k[3]]^-1
```Partial Fractioned Denominator:
```mathematica
2 (-2 dot[p,q]-dot[q,q])^-1 (1/2 dot[p,p]+dot[p,q]+1/2 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,1/2 p+1/2 q+1/2 k[3]]^-1
	+2 (-2 dot[p,q]-dot[q,q])^-1 (1/2 dot[p,p]+dot[p,q]+1/2 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,1/2 p+1/2 q-1/2 k[3]]^-1
	-(-2 dot[p,q]-dot[q,q])^-1 (1/2 dot[p,p]+dot[p,q]+1/2 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,1/2 p+1/2 q+1/2 k[3]]^-1 prop[0,1/2 p-1/2 q-1/2 k[3]]^-1
	-(-2 dot[p,q]-dot[q,q])^-1 (1/2 dot[p,p]+dot[p,q]+1/2 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,1/2 p+1/2 q-1/2 k[3]]^-1 prop[0,1/2 p-1/2 q-1/2 k[3]]^-1
	-(-2 dot[p,q]-dot[q,q])^-1 (1/2 dot[p,p]+dot[p,q]+1/2 dot[q,q])^-1 prop[0,q+k[3]]^-1 prop[0,1/2 p+1/2 q+1/2 k[3]]^-1 prop[0,1/2 p+1/2 q-1/2 k[3]]^-1
	+1/2 (-2 dot[p,q]-dot[q,q])^-1 (1/2 dot[p,p]+dot[p,q]+1/2 dot[q,q])^-1 prop[0,1/2 p+1/2 q+1/2 k[3]]^-1 prop[0,1/2 p+1/2 q-1/2 k[3]]^-1 prop[0,1/2 p-1/2 q-1/2 k[3]]^-1
	-4 (-2 dot[p,q]-dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,1/2 p+1/2 q+1/2 k[3]]^-1 dot[p,p]^-1
	-4 (-2 dot[p,q]-dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,1/2 p-1/2 q-1/2 k[3]]^-1 dot[p,p]^-1
	+2 (-2 dot[p,q]-dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,1/2 p+1/2 q+1/2 k[3]]^-1 prop[0,1/2 p-1/2 q-1/2 k[3]]^-1 dot[p,p]^-1
	+2 (-2 dot[p,q]-dot[q,q])^-1 prop[0,q+k[3]]^-1 prop[0,1/2 p+1/2 q+1/2 k[3]]^-1 prop[0,1/2 p+1/2 q-1/2 k[3]]^-1 dot[p,p]^-1
	+2 (-2 dot[p,q]-dot[q,q])^-1 prop[0,q+k[3]]^-1 prop[0,1/2 p+1/2 q-1/2 k[3]]^-1 prop[0,1/2 p-1/2 q-1/2 k[3]]^-1 dot[p,p]^-1
	-(-2 dot[p,q]-dot[q,q])^-1 prop[0,1/2 p+1/2 q+1/2 k[3]]^-1 prop[0,1/2 p+1/2 q-1/2 k[3]]^-1 prop[0,1/2 p-1/2 q-1/2 k[3]]^-1 dot[p,p]^-1
```]
grid(columns: cols,gutter: 20pt,embedding1i0,)
[== final]
grid(columns: cols,gutter: 20pt,embedding1f0,)
[= embedding 2 [1, -1, -1, -2] 
 == initial
Denominator:
```mathematica
prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,p-k[3]]^-1 prop[0,p-2 k[3]]^-1 prop[0,p-q-2 k[3]]^-1
```Partial Fractioned Denominator:
```mathematica
1/4 (-dot[p,q]-1/2 dot[q,q])^-1 (1/2 dot[p,p]+dot[p,q]+1/2 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,p-k[3]]^-1
	-1/2 (-dot[p,q]-1/2 dot[q,q])^-1 (1/2 dot[p,p]+dot[p,q]+1/2 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,p-q-2 k[3]]^-1
	-1/2 (-dot[p,q]-1/2 dot[q,q])^-1 (1/2 dot[p,p]+dot[p,q]+1/2 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,p-k[3]]^-1 prop[0,p-q-2 k[3]]^-1
	-1/2 (-dot[p,q]-1/2 dot[q,q])^-1 (1/2 dot[p,p]+dot[p,q]+1/2 dot[q,q])^-1 prop[0,q+k[3]]^-1 prop[0,p-k[3]]^-1 prop[0,p-2 k[3]]^-1
	+(-dot[p,q]-1/2 dot[q,q])^-1 (1/2 dot[p,p]+dot[p,q]+1/2 dot[q,q])^-1 prop[0,q+k[3]]^-1 prop[0,p-2 k[3]]^-1 prop[0,p-q-2 k[3]]^-1
	+(-dot[p,q]-1/2 dot[q,q])^-1 (1/2 dot[p,p]+dot[p,q]+1/2 dot[q,q])^-1 prop[0,p-k[3]]^-1 prop[0,p-2 k[3]]^-1 prop[0,p-q-2 k[3]]^-1
	-1/2 (-dot[p,q]-1/2 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,p-k[3]]^-1 dot[p,p]^-1
	+(-dot[p,q]-1/2 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,p-2 k[3]]^-1 dot[p,p]^-1
	+(-dot[p,q]-1/2 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,p-k[3]]^-1 prop[0,p-q-2 k[3]]^-1 dot[p,p]^-1
	-2 (-dot[p,q]-1/2 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,p-2 k[3]]^-1 prop[0,p-q-2 k[3]]^-1 dot[p,p]^-1
	+(-dot[p,q]-1/2 dot[q,q])^-1 prop[0,q+k[3]]^-1 prop[0,p-k[3]]^-1 prop[0,p-2 k[3]]^-1 dot[p,p]^-1
	-2 (-dot[p,q]-1/2 dot[q,q])^-1 prop[0,p-k[3]]^-1 prop[0,p-2 k[3]]^-1 prop[0,p-q-2 k[3]]^-1 dot[p,p]^-1
```]
grid(columns: cols,gutter: 20pt,embedding2i0,)
[== final]
grid(columns: cols,gutter: 20pt,embedding2f0,)
[= embedding 3 [1, -1, -1, -1] 
 == initial
Denominator:
```mathematica
prop[0,p]^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,p-k[3]]^-1 prop[0,p-q-k[3]]^-1
```Partial Fractioned Denominator:
```mathematica
-1/2 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,p-k[3]]^-1 dot[p,p]^-1 dot[p,q]^-1
	+1/2 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,p-q-k[3]]^-1 dot[p,p]^-1 dot[p,q]^-1
	+1/2 prop[0,k[3]]^-1 prop[0,p-k[3]]^-1 prop[0,p-q-k[3]]^-1 dot[p,p]^-1 dot[p,q]^-1
	-1/2 prop[0,q+k[3]]^-1 prop[0,p-k[3]]^-1 prop[0,p-q-k[3]]^-1 dot[p,p]^-1 dot[p,q]^-1
```]
grid(columns: cols,gutter: 20pt,embedding3i0,embedding3i1,embedding3i2,)
[== final]
grid(columns: cols,gutter: 20pt,embedding3f0,)
[= embedding 4 [1, 0, -1, -1] 
 == initial
Denominator:
```mathematica
prop[0,k[3]]^-1 prop[0,p+q]^-1 prop[0,q+k[3]]^-1 prop[0,p-k[3]]^-1 prop[0,p+q-k[3]]^-1
```Partial Fractioned Denominator:
```mathematica
-(-2 dot[p,q]-2 dot[q,q])^-1 (dot[p,p]+2 dot[p,q]+dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,p-k[3]]^-1
	+(-2 dot[p,q]-2 dot[q,q])^-1 (dot[p,p]+2 dot[p,q]+dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,p+q-k[3]]^-1
	-(-2 dot[p,q]-2 dot[q,q])^-1 (dot[p,p]+2 dot[p,q]+dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,p-k[3]]^-1 prop[0,p+q-k[3]]^-1
	+(-2 dot[p,q]-2 dot[q,q])^-1 (dot[p,p]+2 dot[p,q]+dot[q,q])^-1 prop[0,q+k[3]]^-1 prop[0,p-k[3]]^-1 prop[0,p+q-k[3]]^-1
```]
grid(columns: cols,gutter: 20pt,embedding4i0,)
[== final]
grid(columns: cols,gutter: 20pt,embedding4f0,embedding4f1,embedding4f2,)
[= embedding 5 [1, 0, -1, 0] 
 == initial
Denominator:
```mathematica
prop[0,p]^-1 prop[0,k[3]]^-1 prop[0,p+q]^-1 prop[0,q+k[3]]^-1 prop[0,p+q+k[3]]^-1
```Partial Fractioned Denominator:
```mathematica
(dot[p,p]+2 dot[p,q]+dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,p+q+k[3]]^-1 dot[p,p]^-1
```]
grid(columns: cols,gutter: 20pt,embedding5i0,embedding5i1,)
[== final]
grid(columns: cols,gutter: 20pt,embedding5f0,embedding5f1,)
[= embedding 6 [1, 0, -1, 1] 
 == initial
Denominator:
```mathematica
prop[0,k[3]]^-1 prop[0,p+k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,p+q+k[3]]^-1 prop[0,p+q+2 k[3]]^-1
```Partial Fractioned Denominator:
```mathematica
-1/2 (-dot[p,p]-2 dot[p,q]-dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,p+k[3]]^-1 prop[0,p+q+k[3]]^-1 dot[p,q]^-1
	+(-dot[p,p]-2 dot[p,q]-dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,p+k[3]]^-1 prop[0,p+q+2 k[3]]^-1 dot[p,q]^-1
	-1/2 (-dot[p,p]-2 dot[p,q]-dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,p+q+k[3]]^-1 dot[p,q]^-1
	+(-dot[p,p]-2 dot[p,q]-dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,p+q+2 k[3]]^-1 dot[p,q]^-1
	+(-dot[p,p]-2 dot[p,q]-dot[q,q])^-1 prop[0,p+k[3]]^-1 prop[0,p+q+k[3]]^-1 prop[0,p+q+2 k[3]]^-1 dot[p,q]^-1
	+(-dot[p,p]-2 dot[p,q]-dot[q,q])^-1 prop[0,q+k[3]]^-1 prop[0,p+q+k[3]]^-1 prop[0,p+q+2 k[3]]^-1 dot[p,q]^-1
	+1/2 (-dot[p,p]+2 dot[p,q]-dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,p+k[3]]^-1 prop[0,q+k[3]]^-1 dot[p,q]^-1
	-(-dot[p,p]+2 dot[p,q]-dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,p+k[3]]^-1 prop[0,p+q+2 k[3]]^-1 dot[p,q]^-1
	-(-dot[p,p]+2 dot[p,q]-dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,p+q+2 k[3]]^-1 dot[p,q]^-1
	+1/2 (-dot[p,p]+2 dot[p,q]-dot[q,q])^-1 prop[0,p+k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,p+q+k[3]]^-1 dot[p,q]^-1
	-(-dot[p,p]+2 dot[p,q]-dot[q,q])^-1 prop[0,p+k[3]]^-1 prop[0,p+q+k[3]]^-1 prop[0,p+q+2 k[3]]^-1 dot[p,q]^-1
	-(-dot[p,p]+2 dot[p,q]-dot[q,q])^-1 prop[0,q+k[3]]^-1 prop[0,p+q+k[3]]^-1 prop[0,p+q+2 k[3]]^-1 dot[p,q]^-1
```]
grid(columns: cols,gutter: 20pt,embedding6i0,embedding6i1,)
[== final]
grid(columns: cols,gutter: 20pt,embedding6f0,)
[= embedding 7 [1, 0, 0, -1] 
 == initial
Denominator:
```mathematica
prop[0,p]^-1 prop[0,k[2]]^-1 prop[0,p+q]^-1 prop[0,q+k[2]]^-1 prop[0,p+q+k[2]]^-1
```Partial Fractioned Denominator:
```mathematica
(dot[p,p]+2 dot[p,q]+dot[q,q])^-1 prop[0,k[2]]^-1 prop[0,q+k[2]]^-1 prop[0,p+q+k[2]]^-1 dot[p,p]^-1
```]
grid(columns: cols,gutter: 20pt,embedding7i0,embedding7i1,)
[== final]
grid(columns: cols,gutter: 20pt,embedding7f0,embedding7f1,)
[= embedding 8 [1, 0, 1, -1] 
 == initial
Denominator:
```mathematica
prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,-p+k[3]]^-1 prop[0,-p+q+k[3]]^-1 prop[0,-p+q+2 k[3]]^-1
```Partial Fractioned Denominator:
```mathematica
-1/2 (-dot[p,p]-2 dot[p,q]-dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,-p+k[3]]^-1 dot[p,q]^-1
	+(-dot[p,p]-2 dot[p,q]-dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,-p+q+2 k[3]]^-1 dot[p,q]^-1
	+(-dot[p,p]-2 dot[p,q]-dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,-p+k[3]]^-1 prop[0,-p+q+2 k[3]]^-1 dot[p,q]^-1
	-1/2 (-dot[p,p]-2 dot[p,q]-dot[q,q])^-1 prop[0,q+k[3]]^-1 prop[0,-p+k[3]]^-1 prop[0,-p+q+k[3]]^-1 dot[p,q]^-1
	+(-dot[p,p]-2 dot[p,q]-dot[q,q])^-1 prop[0,q+k[3]]^-1 prop[0,-p+q+k[3]]^-1 prop[0,-p+q+2 k[3]]^-1 dot[p,q]^-1
	+(-dot[p,p]-2 dot[p,q]-dot[q,q])^-1 prop[0,-p+k[3]]^-1 prop[0,-p+q+k[3]]^-1 prop[0,-p+q+2 k[3]]^-1 dot[p,q]^-1
	+1/2 (-dot[p,p]+2 dot[p,q]-dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,-p+q+k[3]]^-1 dot[p,q]^-1
	-(-dot[p,p]+2 dot[p,q]-dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,-p+q+2 k[3]]^-1 dot[p,q]^-1
	+1/2 (-dot[p,p]+2 dot[p,q]-dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,-p+k[3]]^-1 prop[0,-p+q+k[3]]^-1 dot[p,q]^-1
	-(-dot[p,p]+2 dot[p,q]-dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,-p+k[3]]^-1 prop[0,-p+q+2 k[3]]^-1 dot[p,q]^-1
	-(-dot[p,p]+2 dot[p,q]-dot[q,q])^-1 prop[0,q+k[3]]^-1 prop[0,-p+q+k[3]]^-1 prop[0,-p+q+2 k[3]]^-1 dot[p,q]^-1
	-(-dot[p,p]+2 dot[p,q]-dot[q,q])^-1 prop[0,-p+k[3]]^-1 prop[0,-p+q+k[3]]^-1 prop[0,-p+q+2 k[3]]^-1 dot[p,q]^-1
```]
grid(columns: cols,gutter: 20pt,embedding8i0,embedding8i1,)
[== final]
grid(columns: cols,gutter: 20pt,embedding8f0,)
[= embedding 9 [1, 1, -1, 1] 
 == initial
Denominator:
```mathematica
prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,p+q+k[3]]^-1 prop[0,p+2 q+k[3]]^-1 prop[0,p+2 q+2 k[3]]^-1
```Partial Fractioned Denominator:
```mathematica
-(2 dot[p,q]+2 dot[q,q])^-1 (-dot[p,p]-4 dot[p,q]-4 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,p+2 q+k[3]]^-1
	+2 (2 dot[p,q]+2 dot[q,q])^-1 (-dot[p,p]-4 dot[p,q]-4 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,p+2 q+2 k[3]]^-1
	-(2 dot[p,q]+2 dot[q,q])^-1 (-dot[p,p]-4 dot[p,q]-4 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,p+q+k[3]]^-1 prop[0,p+2 q+k[3]]^-1
	+2 (2 dot[p,q]+2 dot[q,q])^-1 (-dot[p,p]-4 dot[p,q]-4 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,p+q+k[3]]^-1 prop[0,p+2 q+2 k[3]]^-1
	+2 (2 dot[p,q]+2 dot[q,q])^-1 (-dot[p,p]-4 dot[p,q]-4 dot[q,q])^-1 prop[0,q+k[3]]^-1 prop[0,p+2 q+k[3]]^-1 prop[0,p+2 q+2 k[3]]^-1
	+2 (2 dot[p,q]+2 dot[q,q])^-1 (-dot[p,p]-4 dot[p,q]-4 dot[q,q])^-1 prop[0,p+q+k[3]]^-1 prop[0,p+2 q+k[3]]^-1 prop[0,p+2 q+2 k[3]]^-1
	-(2 dot[p,q]+2 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,p+q+k[3]]^-1 dot[p,p]^-1
	+2 (2 dot[p,q]+2 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,p+2 q+2 k[3]]^-1 dot[p,p]^-1
	+2 (2 dot[p,q]+2 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,p+q+k[3]]^-1 prop[0,p+2 q+2 k[3]]^-1 dot[p,p]^-1
	-(2 dot[p,q]+2 dot[q,q])^-1 prop[0,q+k[3]]^-1 prop[0,p+q+k[3]]^-1 prop[0,p+2 q+k[3]]^-1 dot[p,p]^-1
	+2 (2 dot[p,q]+2 dot[q,q])^-1 prop[0,q+k[3]]^-1 prop[0,p+2 q+k[3]]^-1 prop[0,p+2 q+2 k[3]]^-1 dot[p,p]^-1
	+2 (2 dot[p,q]+2 dot[q,q])^-1 prop[0,p+q+k[3]]^-1 prop[0,p+2 q+k[3]]^-1 prop[0,p+2 q+2 k[3]]^-1 dot[p,p]^-1
```]
grid(columns: cols,gutter: 20pt,embedding9i0,)
[== final]
grid(columns: cols,gutter: 20pt,embedding9f0,embedding9f1,)
[= embedding 10 [1, 1, 0, 1] 
 == initial
Denominator:
```mathematica
prop[0,k[2]]^-1 prop[0,-p]^-1 prop[0,q+k[2]]^-1 prop[0,-p+k[2]]^-1 prop[0,-p-q]^-1
```Partial Fractioned Denominator:
```mathematica
(dot[p,p]+2 dot[p,q]+dot[q,q])^-1 prop[0,k[2]]^-1 prop[0,q+k[2]]^-1 prop[0,-p+k[2]]^-1 dot[p,p]^-1
```]
grid(columns: cols,gutter: 20pt,embedding10i0,embedding10i1,)
[== final]
grid(columns: cols,gutter: 20pt,embedding10f0,embedding10f1,)
[= embedding 11 [1, 1, 1, -1] 
 == initial
Denominator:
```mathematica
prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,-p+k[3]]^-1 prop[0,-p+2 k[3]]^-1 prop[0,-p-q+k[3]]^-1
```Partial Fractioned Denominator:
```mathematica
-2 (-2 dot[p,q]-2 dot[q,q])^-1 (-dot[p,p]-4 dot[p,q]-4 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,-p+2 k[3]]^-1
	+(-2 dot[p,q]-2 dot[q,q])^-1 (-dot[p,p]-4 dot[p,q]-4 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,-p-q+k[3]]^-1
	-2 (-2 dot[p,q]-2 dot[q,q])^-1 (-dot[p,p]-4 dot[p,q]-4 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,-p+2 k[3]]^-1 prop[0,-p-q+k[3]]^-1
	-2 (-2 dot[p,q]-2 dot[q,q])^-1 (-dot[p,p]-4 dot[p,q]-4 dot[q,q])^-1 prop[0,q+k[3]]^-1 prop[0,-p+k[3]]^-1 prop[0,-p+2 k[3]]^-1
	+(-2 dot[p,q]-2 dot[q,q])^-1 (-dot[p,p]-4 dot[p,q]-4 dot[q,q])^-1 prop[0,q+k[3]]^-1 prop[0,-p+k[3]]^-1 prop[0,-p-q+k[3]]^-1
	-2 (-2 dot[p,q]-2 dot[q,q])^-1 (-dot[p,p]-4 dot[p,q]-4 dot[q,q])^-1 prop[0,-p+k[3]]^-1 prop[0,-p+2 k[3]]^-1 prop[0,-p-q+k[3]]^-1
	+(-2 dot[p,q]-2 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,-p+k[3]]^-1 dot[p,p]^-1
	-2 (-2 dot[p,q]-2 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,-p+2 k[3]]^-1 dot[p,p]^-1
	+(-2 dot[p,q]-2 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,-p+k[3]]^-1 prop[0,-p-q+k[3]]^-1 dot[p,p]^-1
	-2 (-2 dot[p,q]-2 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,-p+2 k[3]]^-1 prop[0,-p-q+k[3]]^-1 dot[p,p]^-1
	-2 (-2 dot[p,q]-2 dot[q,q])^-1 prop[0,q+k[3]]^-1 prop[0,-p+k[3]]^-1 prop[0,-p+2 k[3]]^-1 dot[p,p]^-1
	-2 (-2 dot[p,q]-2 dot[q,q])^-1 prop[0,-p+k[3]]^-1 prop[0,-p+2 k[3]]^-1 prop[0,-p-q+k[3]]^-1 dot[p,p]^-1
```]
grid(columns: cols,gutter: 20pt,embedding11i0,)
[== final]
grid(columns: cols,gutter: 20pt,embedding11f0,embedding11f1,)
[= embedding 12 [1, 1, 1, 0] 
 == initial
Denominator:
```mathematica
prop[0,k[3]]^-1 prop[0,-p]^-1 prop[0,q+k[3]]^-1 prop[0,-p+k[3]]^-1 prop[0,-p-q]^-1
```Partial Fractioned Denominator:
```mathematica
(dot[p,p]+2 dot[p,q]+dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,-p+k[3]]^-1 dot[p,p]^-1
```]
grid(columns: cols,gutter: 20pt,embedding12i0,embedding12i1,)
[== final]
grid(columns: cols,gutter: 20pt,embedding12f0,embedding12f1,)
[= embedding 13 [1, 1, 1, 1] 
 == initial
Denominator:
```mathematica
prop[0,k[3]]^-1 prop[0,-p]^-1 prop[0,q+k[3]]^-1 prop[0,-p-k[3]]^-1 prop[0,-p-q-k[3]]^-1
```Partial Fractioned Denominator:
```mathematica
1/2 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,-p-k[3]]^-1 dot[p,p]^-1 dot[p,q]^-1
	-1/2 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,-p-q-k[3]]^-1 dot[p,p]^-1 dot[p,q]^-1
	-1/2 prop[0,k[3]]^-1 prop[0,-p-k[3]]^-1 prop[0,-p-q-k[3]]^-1 dot[p,p]^-1 dot[p,q]^-1
	+1/2 prop[0,q+k[3]]^-1 prop[0,-p-k[3]]^-1 prop[0,-p-q-k[3]]^-1 dot[p,p]^-1 dot[p,q]^-1
```]
grid(columns: cols,gutter: 20pt,embedding13i0,embedding13i1,embedding13i2,)
[== final]
grid(columns: cols,gutter: 20pt,embedding13f0,)
[= embedding 14 [1, 2, 1, 1] 
 == initial
Denominator:
```mathematica
prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,-p-q]^-1 prop[0,-p-q-k[3]]^-1 prop[0,-p-2 q-k[3]]^-1
```Partial Fractioned Denominator:
```mathematica
(2 dot[p,q]+2 dot[q,q])^-1 (dot[p,p]+2 dot[p,q]+dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,-p-q-k[3]]^-1
	-(2 dot[p,q]+2 dot[q,q])^-1 (dot[p,p]+2 dot[p,q]+dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,-p-2 q-k[3]]^-1
	-(2 dot[p,q]+2 dot[q,q])^-1 (dot[p,p]+2 dot[p,q]+dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,-p-q-k[3]]^-1 prop[0,-p-2 q-k[3]]^-1
	+(2 dot[p,q]+2 dot[q,q])^-1 (dot[p,p]+2 dot[p,q]+dot[q,q])^-1 prop[0,q+k[3]]^-1 prop[0,-p-q-k[3]]^-1 prop[0,-p-2 q-k[3]]^-1
```]
grid(columns: cols,gutter: 20pt,embedding14i0,)
[== final]
grid(columns: cols,gutter: 20pt,embedding14f0,embedding14f1,embedding14f2,)
[= embedding 15 [1, 2, 1, 2] 
 == initial
Denominator:
```mathematica
prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,-p-q-k[3]]^-1 prop[0,-p-q-2 k[3]]^-1 prop[0,-p-2 q-2 k[3]]^-1
```Partial Fractioned Denominator:
```mathematica
-1/4 (dot[p,q]+1/2 dot[q,q])^-1 (1/2 dot[p,p]+dot[p,q]+1/2 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,-p-q-k[3]]^-1
	+1/2 (dot[p,q]+1/2 dot[q,q])^-1 (1/2 dot[p,p]+dot[p,q]+1/2 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,-p-q-2 k[3]]^-1
	+1/2 (dot[p,q]+1/2 dot[q,q])^-1 (1/2 dot[p,p]+dot[p,q]+1/2 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,-p-q-k[3]]^-1 prop[0,-p-2 q-2 k[3]]^-1
	-(dot[p,q]+1/2 dot[q,q])^-1 (1/2 dot[p,p]+dot[p,q]+1/2 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,-p-q-2 k[3]]^-1 prop[0,-p-2 q-2 k[3]]^-1
	+1/2 (dot[p,q]+1/2 dot[q,q])^-1 (1/2 dot[p,p]+dot[p,q]+1/2 dot[q,q])^-1 prop[0,q+k[3]]^-1 prop[0,-p-q-k[3]]^-1 prop[0,-p-q-2 k[3]]^-1
	-(dot[p,q]+1/2 dot[q,q])^-1 (1/2 dot[p,p]+dot[p,q]+1/2 dot[q,q])^-1 prop[0,-p-q-k[3]]^-1 prop[0,-p-q-2 k[3]]^-1 prop[0,-p-2 q-2 k[3]]^-1
	+1/2 (dot[p,q]+1/2 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,-p-q-k[3]]^-1 dot[p,p]^-1
	-(dot[p,q]+1/2 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,-p-2 q-2 k[3]]^-1 dot[p,p]^-1
	-(dot[p,q]+1/2 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,-p-q-k[3]]^-1 prop[0,-p-2 q-2 k[3]]^-1 dot[p,p]^-1
	-(dot[p,q]+1/2 dot[q,q])^-1 prop[0,q+k[3]]^-1 prop[0,-p-q-k[3]]^-1 prop[0,-p-q-2 k[3]]^-1 dot[p,p]^-1
	+2 (dot[p,q]+1/2 dot[q,q])^-1 prop[0,q+k[3]]^-1 prop[0,-p-q-2 k[3]]^-1 prop[0,-p-2 q-2 k[3]]^-1 dot[p,p]^-1
	+2 (dot[p,q]+1/2 dot[q,q])^-1 prop[0,-p-q-k[3]]^-1 prop[0,-p-q-2 k[3]]^-1 prop[0,-p-2 q-2 k[3]]^-1 dot[p,p]^-1
```]
grid(columns: cols,gutter: 20pt,embedding15i0,)
[== final]
grid(columns: cols,gutter: 20pt,embedding15f0,)
[= embedding 16 [1, 2, 2, 1] 
 == initial
Denominator:
```mathematica
prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,-1/2 p+1/2 k[3]]^-1 prop[0,-1/2 p-1/2 k[3]]^-1 prop[0,-1/2 p-q-1/2 k[3]]^-1
```Partial Fractioned Denominator:
```mathematica
-2 (2 dot[p,q]+dot[q,q])^-1 (1/2 dot[p,p]+dot[p,q]+1/2 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,-1/2 p+1/2 k[3]]^-1
	-2 (2 dot[p,q]+dot[q,q])^-1 (1/2 dot[p,p]+dot[p,q]+1/2 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,-1/2 p-q-1/2 k[3]]^-1
	+(2 dot[p,q]+dot[q,q])^-1 (1/2 dot[p,p]+dot[p,q]+1/2 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,-1/2 p+1/2 k[3]]^-1 prop[0,-1/2 p-q-1/2 k[3]]^-1
	+(2 dot[p,q]+dot[q,q])^-1 (1/2 dot[p,p]+dot[p,q]+1/2 dot[q,q])^-1 prop[0,q+k[3]]^-1 prop[0,-1/2 p+1/2 k[3]]^-1 prop[0,-1/2 p-1/2 k[3]]^-1
	+(2 dot[p,q]+dot[q,q])^-1 (1/2 dot[p,p]+dot[p,q]+1/2 dot[q,q])^-1 prop[0,q+k[3]]^-1 prop[0,-1/2 p-1/2 k[3]]^-1 prop[0,-1/2 p-q-1/2 k[3]]^-1
	-1/2 (2 dot[p,q]+dot[q,q])^-1 (1/2 dot[p,p]+dot[p,q]+1/2 dot[q,q])^-1 prop[0,-1/2 p+1/2 k[3]]^-1 prop[0,-1/2 p-1/2 k[3]]^-1 prop[0,-1/2 p-q-1/2 k[3]]^-1
	+4 (2 dot[p,q]+dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,-1/2 p+1/2 k[3]]^-1 dot[p,p]^-1
	+4 (2 dot[p,q]+dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,-1/2 p-1/2 k[3]]^-1 dot[p,p]^-1
	-2 (2 dot[p,q]+dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,-1/2 p+1/2 k[3]]^-1 prop[0,-1/2 p-q-1/2 k[3]]^-1 dot[p,p]^-1
	-2 (2 dot[p,q]+dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,-1/2 p-1/2 k[3]]^-1 prop[0,-1/2 p-q-1/2 k[3]]^-1 dot[p,p]^-1
	-2 (2 dot[p,q]+dot[q,q])^-1 prop[0,q+k[3]]^-1 prop[0,-1/2 p+1/2 k[3]]^-1 prop[0,-1/2 p-1/2 k[3]]^-1 dot[p,p]^-1
	+(2 dot[p,q]+dot[q,q])^-1 prop[0,-1/2 p+1/2 k[3]]^-1 prop[0,-1/2 p-1/2 k[3]]^-1 prop[0,-1/2 p-q-1/2 k[3]]^-1 dot[p,p]^-1
```]
grid(columns: cols,gutter: 20pt,embedding16i0,)
[== final]
grid(columns: cols,gutter: 20pt,embedding16f0,)
}