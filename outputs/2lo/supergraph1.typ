#set page(width: 35cm, height: auto)
#import "@preview/cetz:0.3.1"
#{
let cols = (30%,30%,30%)

let node(pos)=cetz.draw.circle(pos,radius:0.02,fill: black)
let stroke = 0.7pt
let amplitude = 0.051
let arrow-scale = 0.8
let segment-length = 0.0521
let edge(..points,decoration:"",angle:0deg)={
    if decoration == "coil"{
    cetz.decorations.coil(cetz.draw.hobby(..points),amplitude:amplitude,stroke:stroke,align:"MID")
    } else if decoration == "wave" {
        cetz.decorations.wave(cetz.draw.hobby(..points),amplitude:amplitude,stroke:stroke)
    }  else if decoration == "arrow"{
        let points = points.pos()
        if points.len()==2{
          let center = (0.5*(points.at(0).at(0)+points.at(1).at(0)),0.5*(points.at(0).at(1)+points.at(1).at(1)))
          cetz.draw.hobby(..points,stroke:stroke)
          cetz.draw.mark(center,angle,symbol: ">", fill: black,anchor: "center",scale:arrow-scale)
        } else {
          let (first,center,..other)=points
          cetz.draw.hobby(first,center,..other,stroke:stroke)
            cetz.draw.mark(center,angle,symbol: ">", fill: black,anchor: "center",scale:arrow-scale)
        }

    }else {
            cetz.draw.hobby(..points,stroke:stroke)
    }
}
let embedding1i0=cetz.canvas(length:50%,{
let node0= (pos:(-0.59, -0.75))
node(node0.pos)
let node1= (pos:(0.33, -0.64))
node(node1.pos)
let node2= (pos:(0.63, 0.22))
node(node2.pos)
let node3= (pos:(0.54, 0.74))
node(node3.pos)
let node4= (pos:(-0.55, 0.04))
node(node4.pos)
let node5= (pos:(-0.34, 0.47))
node(node5.pos)
edge(node1.pos,(-0.12, -0.74),node0.pos,decoration:"arrow",angle:-3.02rad)
cetz.draw.content((-0.11, -0.85),angle:-3.02rad,[q+k[0]])
cetz.draw.hobby((0.26, -0.73),(-0.12, -0.79),(-0.50, -0.82),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-0.59, -0.36),node4.pos,decoration:"wave",angle:4.66rad)
cetz.draw.content((-0.71, -0.36),angle:4.66rad,[q])
cetz.draw.hobby((-0.66, -0.68),(-0.65, -0.35),(-0.62, -0.03),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(-0.00, -0.10),node1.pos,decoration:"wave",angle:2.11rad)
cetz.draw.content((-0.10, -0.16),angle:2.11rad,[q])
cetz.draw.hobby((-0.33, 0.33),(-0.06, -0.12),(0.21, -0.57),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.67, 0.50),node2.pos,decoration:"coil",angle:1.76rad)
cetz.draw.content((0.78, 0.52),angle:1.76rad,[p-q-2 k[3]])
cetz.draw.hobby((0.62, 0.73),(0.72, 0.50),(0.71, 0.25),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(0.16, 0.34),node2.pos,decoration:"arrow",angle:-0.25rad)
cetz.draw.content((0.19, 0.46),angle:-0.25rad,[k[3]])
cetz.draw.hobby((-0.23, 0.50),(0.16, 0.41),(0.55, 0.30),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-0.00, 0.40),node3.pos,decoration:"arrow",angle:0.57rad)
cetz.draw.content((-0.07, 0.50),angle:0.57rad,[p-k[3]])
cetz.draw.hobby((-0.48, 0.16),(-0.05, 0.45),(0.40, 0.72),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-1.00, -1.00),decoration:"arrow",angle:-2.60rad)
cetz.draw.content((-0.73, -0.98),angle:-2.60rad,[-k[0]])
cetz.draw.hobby((-0.88, -1.00),(-0.65, -0.86),stroke:stroke,mark: (end: ">"))
edge(node1.pos,(1.00, -1.00),decoration:"arrow",angle:2.65rad)
cetz.draw.content((0.72, -0.72),angle:2.65rad,[-k[0]])
cetz.draw.hobby((0.45, -0.64),(0.94, -0.90),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(1.00, 0.00),decoration:"arrow",angle:-0.53rad)
cetz.draw.content((0.88, 0.21),angle:-0.53rad,[p-q-k[3]])
cetz.draw.hobby((0.75, 0.22),(0.94, 0.10),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-1.00, 0.00),decoration:"arrow",angle:0.08rad)
cetz.draw.content((-0.77, -0.10),angle:0.08rad,[p-q-k[3]])
cetz.draw.hobby((-0.90, -0.05),(-0.65, -0.03),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(1.00, 1.00),decoration:"arrow",angle:0.52rad)
cetz.draw.content((0.71, 0.97),angle:0.52rad,[q+k[3]])
cetz.draw.hobby((0.59, 0.84),(0.88, 1.00),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(-1.00, 1.00),decoration:"arrow",angle:5.61rad)
cetz.draw.content((-0.75, 0.64),angle:5.61rad,[q+k[3]])
cetz.draw.hobby((-0.96, 0.89),(-0.46, 0.49),stroke:stroke,mark: (end: ">"))
})
let embedding1i1=cetz.canvas(length:50%,{
let node0= (pos:(-0.33, -0.65))
node(node0.pos)
let node1= (pos:(0.59, -0.76))
node(node1.pos)
let node2= (pos:(-0.63, 0.21))
node(node2.pos)
let node3= (pos:(-0.53, 0.73))
node(node3.pos)
let node4= (pos:(0.34, 0.47))
node(node4.pos)
let node5= (pos:(0.55, 0.03))
node(node5.pos)
edge(node1.pos,(0.12, -0.74),node0.pos,decoration:"arrow",angle:3.02rad)
cetz.draw.content((0.11, -0.86),angle:3.02rad,[q+k[0]])
cetz.draw.hobby((0.50, -0.82),(0.12, -0.80),(-0.26, -0.73),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-0.00, -0.10),node4.pos,decoration:"wave",angle:-2.11rad)
cetz.draw.content((0.10, -0.17),angle:-2.11rad,[q])
cetz.draw.hobby((-0.21, -0.57),(0.06, -0.12),(0.33, 0.33),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(0.59, -0.37),node1.pos,decoration:"wave",angle:1.62rad)
cetz.draw.content((0.71, -0.36),angle:1.62rad,[q])
cetz.draw.hobby((0.62, -0.04),(0.65, -0.36),(0.65, -0.68),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(-0.66, 0.49),node2.pos,decoration:"coil",angle:1.38rad)
cetz.draw.content((-0.78, 0.52),angle:1.38rad,[p-q-2 k[3]])
cetz.draw.hobby((-0.62, 0.73),(-0.72, 0.50),(-0.71, 0.25),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(-0.16, 0.34),node4.pos,decoration:"arrow",angle:0.26rad)
cetz.draw.content((-0.19, 0.46),angle:0.26rad,[p-q-k[3]])
cetz.draw.hobby((-0.55, 0.30),(-0.16, 0.40),(0.23, 0.50),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.00, 0.40),node5.pos,decoration:"arrow",angle:-0.57rad)
cetz.draw.content((0.07, 0.50),angle:-0.57rad,[q+k[3]])
cetz.draw.hobby((-0.39, 0.72),(0.05, 0.44),(0.48, 0.16),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-1.00, -1.00),decoration:"arrow",angle:-2.66rad)
cetz.draw.content((-0.61, -0.93),angle:-2.66rad,[-k[0]])
cetz.draw.hobby((-0.88, -1.01),(-0.39, -0.75),stroke:stroke,mark: (end: ">"))
edge(node1.pos,(1.00, -1.00),decoration:"arrow",angle:2.60rad)
cetz.draw.content((0.86, -0.77),angle:2.60rad,[-k[0]])
cetz.draw.hobby((0.71, -0.76),(0.94, -0.90),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(1.00, 0.00),decoration:"arrow",angle:-0.07rad)
cetz.draw.content((0.78, 0.14),angle:-0.07rad,[k[3]])
cetz.draw.hobby((0.66, 0.09),(0.90, 0.07),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(-1.00, 0.00),decoration:"arrow",angle:0.52rad)
cetz.draw.content((-0.75, 0.00),angle:0.52rad,[k[3]])
cetz.draw.hobby((-0.88, -0.00),(-0.69, 0.11),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(1.00, 1.00),decoration:"arrow",angle:0.68rad)
cetz.draw.content((0.60, 0.83),angle:0.68rad,[p-k[3]])
cetz.draw.hobby((0.38, 0.58),(0.88, 0.98),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(-1.00, 1.00),decoration:"arrow",angle:5.76rad)
cetz.draw.content((-0.83, 0.76),angle:5.76rad,[p-k[3]])
cetz.draw.hobby((-0.94, 0.90),(-0.65, 0.73),stroke:stroke,mark: (end: ">"))
})
let embedding1f0=cetz.canvas(length:50%,{
let node0= (pos:(0.39, -0.81))
node(node0.pos)
let node1= (pos:(-0.35, -0.71))
node(node1.pos)
let node2= (pos:(-0.01, 0.63))
node(node2.pos)
let node3= (pos:(-0.09, 0.27))
node(node3.pos)
let node4= (pos:(-0.53, -0.18))
node(node4.pos)
let node5= (pos:(0.55, 0.43))
node(node5.pos)
edge(node0.pos,(0.02, -0.83),node1.pos,decoration:"arrow",angle:3.02rad)
edge(node0.pos,(-0.04, -0.48),node4.pos,decoration:"wave",angle:-0.60rad)
edge(node5.pos,(0.13, -0.16),node1.pos,decoration:"wave",angle:0.90rad)
edge(node3.pos,(-0.22, 0.51),node2.pos,decoration:"coil",angle:4.38rad)
edge(node4.pos,(-0.34, 0.05),node3.pos,decoration:"arrow",angle:0.80rad)
edge(node3.pos,(0.27, 0.33),node5.pos,decoration:"arrow",angle:0.25rad)
edge(node1.pos,(-1.00, -1.00),decoration:"arrow",angle:-2.73rad)
edge(node0.pos,(1.00, -1.00),decoration:"arrow",angle:2.84rad)
edge(node2.pos,(1.00, 0.00),decoration:"arrow",angle:-0.56rad)
edge(node4.pos,(-1.00, 0.00),decoration:"arrow",angle:5.91rad)
edge(node5.pos,(1.00, 1.00),decoration:"arrow",angle:0.91rad)
edge(node2.pos,(-1.00, 1.00),decoration:"arrow",angle:5.92rad)
})
let embedding1f1=cetz.canvas(length:50%,{
let node0= (pos:(0.52, -0.83))
node(node0.pos)
let node1= (pos:(-0.59, -0.66))
node(node1.pos)
let node2= (pos:(-0.01, 0.17))
node(node2.pos)
let node3= (pos:(0.02, 0.60))
node(node3.pos)
let node4= (pos:(0.70, -0.16))
node(node4.pos)
let node5= (pos:(-0.75, 0.44))
node(node5.pos)
edge(node0.pos,(-0.04, -0.77),node1.pos,decoration:"arrow",angle:2.99rad)
edge(node0.pos,(0.64, -0.51),node4.pos,decoration:"wave",angle:-1.83rad)
edge(node5.pos,(-0.70, -0.12),node1.pos,decoration:"wave",angle:1.72rad)
edge(node3.pos,(0.13, 0.39),node2.pos,decoration:"coil",angle:1.58rad)
edge(node2.pos,(0.36, -0.00),node4.pos,decoration:"arrow",angle:5.84rad)
edge(node5.pos,(-0.40, 0.30),node2.pos,decoration:"arrow",angle:5.93rad)
edge(node1.pos,(-1.00, -1.00),decoration:"arrow",angle:-2.45rad)
edge(node0.pos,(1.00, -1.00),decoration:"arrow",angle:2.81rad)
edge(node4.pos,(1.00, 0.00),decoration:"arrow",angle:0.50rad)
edge(node3.pos,(-1.00, 0.00),decoration:"arrow",angle:0.53rad)
edge(node3.pos,(1.00, 1.00),decoration:"arrow",angle:0.39rad)
edge(node5.pos,(-1.00, 1.00),decoration:"arrow",angle:5.13rad)
})
let embedding2i0=cetz.canvas(length:50%,{
let node0= (pos:(-0.48, -0.69))
node(node0.pos)
let node1= (pos:(0.49, -0.74))
node(node1.pos)
let node2= (pos:(-0.65, 0.68))
node(node2.pos)
let node3= (pos:(0.63, 0.69))
node(node3.pos)
let node4= (pos:(-0.11, 0.29))
node(node4.pos)
let node5= (pos:(0.18, 0.08))
node(node5.pos)
edge(node1.pos,(-0.00, -0.75),node0.pos,decoration:"arrow",angle:3.08rad)
cetz.draw.content((-0.01, -0.87),angle:3.08rad,[q+k[0]])
cetz.draw.hobby((0.39, -0.81),(-0.00, -0.81),(-0.40, -0.77),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-0.32, -0.21),node4.pos,decoration:"wave",angle:4.36rad)
cetz.draw.content((-0.44, -0.17),angle:4.36rad,[q])
cetz.draw.hobby((-0.51, -0.57),(-0.37, -0.17),(-0.21, 0.22),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(0.36, -0.34),node1.pos,decoration:"wave",angle:1.92rad)
cetz.draw.content((0.47, -0.30),angle:1.92rad,[q])
cetz.draw.hobby((0.28, 0.03),(0.41, -0.30),(0.52, -0.64),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(-0.37, 0.57),node4.pos,decoration:"arrow",angle:-0.57rad)
cetz.draw.content((-0.31, 0.67),angle:-0.57rad,[p+k[3]])
cetz.draw.hobby((-0.57, 0.72),(-0.31, 0.59),(-0.10, 0.39),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(-0.35, 0.34),node2.pos,decoration:"arrow",angle:2.47rad)
cetz.draw.content((-0.42, 0.24),angle:2.47rad,[k[3]])
cetz.draw.hobby((0.06, 0.05),(-0.33, 0.25),(-0.64, 0.56),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(0.24, 0.56),node3.pos,decoration:"arrow",angle:0.48rad)
cetz.draw.content((0.19, 0.67),angle:0.48rad,[p+q+k[3]])
cetz.draw.hobby((-0.09, 0.40),(0.20, 0.61),(0.53, 0.73),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.47, 0.36),node5.pos,decoration:"arrow",angle:-2.18rad)
cetz.draw.content((0.57, 0.29),angle:-2.18rad,[q+k[3]])
cetz.draw.hobby((0.66, 0.60),(0.51, 0.31),(0.28, 0.08),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-1.00, -1.00),decoration:"arrow",angle:-2.60rad)
cetz.draw.content((-0.68, -0.95),angle:-2.60rad,[-k[0]])
cetz.draw.hobby((-0.88, -1.00),(-0.54, -0.79),stroke:stroke,mark: (end: ">"))
edge(node1.pos,(1.00, -1.00),decoration:"arrow",angle:2.68rad)
cetz.draw.content((0.80, -0.76),angle:2.68rad,[-k[0]])
cetz.draw.hobby((0.60, -0.73),(0.94, -0.90),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(1.00, 1.00),decoration:"coil",angle:3.83rad)
cetz.draw.content((0.74, 0.94),angle:3.83rad,[p])
cetz.draw.hobby((0.67, 0.80),(0.88, 0.98),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(-1.00, 1.00),decoration:"coil",angle:5.54rad)
cetz.draw.content((-0.91, 0.75),angle:5.54rad,[p])
cetz.draw.hobby((-0.97, 0.89),(-0.77, 0.70),stroke:stroke,mark: (end: ">"))
})
let embedding2i1=cetz.canvas(length:50%,{
let node0= (pos:(-0.61, -0.82))
node(node0.pos)
let node1= (pos:(0.30, -0.63))
node(node1.pos)
let node2= (pos:(0.03, 0.38))
node(node2.pos)
let node3= (pos:(0.87, 0.50))
node(node3.pos)
let node4= (pos:(-0.69, -0.12))
node(node4.pos)
let node5= (pos:(-0.52, 0.54))
node(node5.pos)
edge(node1.pos,(-0.14, -0.76),node0.pos,decoration:"arrow",angle:-2.94rad)
cetz.draw.content((-0.12, -0.88),angle:-2.94rad,[q+k[0]])
cetz.draw.hobby((0.23, -0.72),(-0.14, -0.82),(-0.51, -0.87),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-0.67, -0.48),node4.pos,decoration:"wave",angle:4.82rad)
cetz.draw.content((-0.79, -0.49),angle:4.82rad,[q])
cetz.draw.hobby((-0.69, -0.76),(-0.74, -0.48),(-0.75, -0.19),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(-0.09, -0.07),node1.pos,decoration:"wave",angle:2.18rad)
cetz.draw.content((-0.19, -0.14),angle:2.18rad,[q])
cetz.draw.hobby((-0.49, 0.39),(-0.16, -0.08),(0.17, -0.55),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.46, 0.45),node2.pos,decoration:"coil",angle:0.14rad)
cetz.draw.content((0.44, 0.57),angle:0.14rad,[-p])
cetz.draw.hobby((0.78, 0.55),(0.44, 0.51),(0.10, 0.46),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(-0.32, 0.11),node4.pos,decoration:"arrow",angle:-2.53rad)
cetz.draw.content((-0.25, 0.02),angle:-2.53rad,[-p+k[3]])
cetz.draw.hobby((-0.00, 0.28),(-0.28, 0.07),(-0.58, -0.12),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(-0.23, 0.54),node2.pos,decoration:"arrow",angle:-0.26rad)
cetz.draw.content((-0.20, 0.66),angle:-0.26rad,[k[3]])
cetz.draw.hobby((-0.47, 0.61),(-0.21, 0.60),(0.03, 0.47),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-1.00, -1.00),decoration:"arrow",angle:-2.70rad)
cetz.draw.content((-0.75, -1.02),angle:-2.70rad,[-k[0]])
cetz.draw.hobby((-0.88, -1.01),(-0.67, -0.91),stroke:stroke,mark: (end: ">"))
edge(node1.pos,(1.00, -1.00),decoration:"arrow",angle:2.66rad)
cetz.draw.content((0.70, -0.71),angle:2.66rad,[-k[0]])
cetz.draw.hobby((0.42, -0.63),(0.94, -0.90),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-1.00, 0.00),decoration:"arrow",angle:2.78rad)
cetz.draw.content((-0.88, -0.17),angle:2.78rad,[p-q-k[3]])
cetz.draw.hobby((-0.93, -0.09),(-0.80, -0.14),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(1.00, 0.00),decoration:"arrow",angle:1.83rad)
cetz.draw.content((1.05, 0.28),angle:1.83rad,[p-q-k[3]])
cetz.draw.hobby((0.95, 0.42),(1.03, 0.11),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(1.00, 1.00),decoration:"arrow",angle:1.31rad)
cetz.draw.content((0.82, 0.78),angle:1.31rad,[q+k[3]])
cetz.draw.hobby((0.84, 0.61),(0.92, 0.92),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(-1.00, 1.00),decoration:"arrow",angle:5.51rad)
cetz.draw.content((-0.84, 0.68),angle:5.51rad,[q+k[3]])
cetz.draw.hobby((-0.97, 0.89),(-0.64, 0.56),stroke:stroke,mark: (end: ">"))
})
let embedding2i2=cetz.canvas(length:50%,{
let node0= (pos:(-0.31, -0.78))
node(node0.pos)
let node1= (pos:(0.69, -0.64))
node(node1.pos)
let node2= (pos:(0.02, 0.44))
node(node2.pos)
let node3= (pos:(-0.85, 0.51))
node(node3.pos)
let node4= (pos:(0.42, -0.13))
node(node4.pos)
let node5= (pos:(0.78, 0.53))
node(node5.pos)
edge(node1.pos,(0.19, -0.76),node0.pos,decoration:"arrow",angle:-3.00rad)
cetz.draw.content((0.21, -0.88),angle:-3.00rad,[q+k[0]])
cetz.draw.hobby((0.61, -0.73),(0.21, -0.82),(-0.21, -0.84),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(0.03, -0.45),node4.pos,decoration:"wave",angle:3.87rad)
cetz.draw.content((-0.05, -0.36),angle:3.87rad,[q])
cetz.draw.hobby((-0.28, -0.66),(0.00, -0.39),(0.30, -0.14),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(0.79, -0.06),node1.pos,decoration:"wave",angle:1.49rad)
cetz.draw.content((0.90, -0.07),angle:1.49rad,[q])
cetz.draw.hobby((0.85, 0.41),(0.84, -0.06),(0.77, -0.54),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(-0.43, 0.49),node2.pos,decoration:"coil",angle:3.07rad)
cetz.draw.content((-0.42, 0.61),angle:3.07rad,[p])
cetz.draw.hobby((-0.76, 0.57),(-0.41, 0.55),(-0.06, 0.51),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(0.20, 0.14),node4.pos,decoration:"arrow",angle:5.32rad)
cetz.draw.content((0.10, 0.08),angle:5.32rad,[p+k[3]])
cetz.draw.hobby((-0.00, 0.35),(0.15, 0.11),(0.33, -0.12),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(0.40, 0.54),node2.pos,decoration:"arrow",angle:3.25rad)
cetz.draw.content((0.39, 0.66),angle:3.25rad,[k[3]])
cetz.draw.hobby((0.71, 0.60),(0.39, 0.60),(0.07, 0.53),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-1.00, -1.00),decoration:"arrow",angle:-2.83rad)
cetz.draw.content((-0.62, -1.00),angle:-2.83rad,[-k[0]])
cetz.draw.hobby((-0.89, -1.03),(-0.38, -0.86),stroke:stroke,mark: (end: ">"))
edge(node1.pos,(1.00, -1.00),decoration:"arrow",angle:2.28rad)
cetz.draw.content((0.93, -0.74),angle:2.28rad,[-k[0]])
cetz.draw.hobby((0.80, -0.67),(0.98, -0.89),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(1.00, 0.00),decoration:"arrow",angle:0.22rad)
cetz.draw.content((0.68, 0.05),angle:0.22rad,[p+q+k[3]])
cetz.draw.hobby((0.50, -0.05),(0.89, 0.04),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(-1.00, 0.00),decoration:"arrow",angle:1.29rad)
cetz.draw.content((-0.81, 0.22),angle:1.29rad,[p+q+k[3]])
cetz.draw.hobby((-0.91, 0.08),(-0.82, 0.40),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(-1.00, 1.00),decoration:"arrow",angle:1.86rad)
cetz.draw.content((-1.04, 0.72),angle:1.86rad,[-q-k[3]])
cetz.draw.hobby((-1.03, 0.89),(-0.94, 0.59),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(1.00, 1.00),decoration:"arrow",angle:4.28rad)
cetz.draw.content((0.78, 0.81),angle:4.28rad,[-q-k[3]])
cetz.draw.hobby((0.77, 0.64),(0.90, 0.93),stroke:stroke,mark: (end: ">"))
})
let embedding2i3=cetz.canvas(length:50%,{
let node0= (pos:(-0.31, -0.78))
node(node0.pos)
let node1= (pos:(0.69, -0.64))
node(node1.pos)
let node2= (pos:(-0.85, 0.51))
node(node2.pos)
let node3= (pos:(0.02, 0.44))
node(node3.pos)
let node4= (pos:(0.42, -0.13))
node(node4.pos)
let node5= (pos:(0.79, 0.53))
node(node5.pos)
edge(node1.pos,(0.20, -0.76),node0.pos,decoration:"arrow",angle:-3.00rad)
cetz.draw.content((0.21, -0.88),angle:-3.00rad,[q+k[0]])
cetz.draw.hobby((0.61, -0.73),(0.21, -0.82),(-0.21, -0.84),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(0.03, -0.45),node4.pos,decoration:"wave",angle:3.87rad)
cetz.draw.content((-0.05, -0.36),angle:3.87rad,[q])
cetz.draw.hobby((-0.28, -0.66),(0.00, -0.39),(0.31, -0.14),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(0.79, -0.06),node1.pos,decoration:"wave",angle:1.49rad)
cetz.draw.content((0.91, -0.07),angle:1.49rad,[q])
cetz.draw.hobby((0.85, 0.41),(0.85, -0.06),(0.77, -0.54),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(-0.43, 0.49),node2.pos,decoration:"coil",angle:-0.08rad)
cetz.draw.content((-0.42, 0.61),angle:-0.08rad,[-p])
cetz.draw.hobby((-0.06, 0.51),(-0.41, 0.55),(-0.76, 0.57),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(0.20, 0.14),node3.pos,decoration:"arrow",angle:2.18rad)
cetz.draw.content((0.10, 0.08),angle:2.18rad,[-p+q+k[3]])
cetz.draw.hobby((0.33, -0.12),(0.15, 0.11),(-0.00, 0.35),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.40, 0.54),node5.pos,decoration:"arrow",angle:0.10rad)
cetz.draw.content((0.39, 0.65),angle:0.10rad,[q+k[3]])
cetz.draw.hobby((0.07, 0.52),(0.39, 0.59),(0.71, 0.60),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-1.00, -1.00),decoration:"arrow",angle:-2.83rad)
cetz.draw.content((-0.62, -1.00),angle:-2.83rad,[-k[0]])
cetz.draw.hobby((-0.89, -1.03),(-0.38, -0.86),stroke:stroke,mark: (end: ">"))
edge(node1.pos,(1.00, -1.00),decoration:"arrow",angle:2.28rad)
cetz.draw.content((0.94, -0.74),angle:2.28rad,[-k[0]])
cetz.draw.hobby((0.80, -0.67),(0.98, -0.89),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(-1.00, 0.00),decoration:"arrow",angle:-1.85rad)
cetz.draw.content((-0.81, 0.22),angle:-1.85rad,[p-k[3]])
cetz.draw.hobby((-0.91, 0.08),(-0.82, 0.40),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(1.00, 0.00),decoration:"arrow",angle:3.36rad)
cetz.draw.content((0.68, 0.05),angle:3.36rad,[p-k[3]])
cetz.draw.hobby((0.50, -0.05),(0.89, 0.04),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(1.00, 1.00),decoration:"arrow",angle:1.15rad)
cetz.draw.content((0.78, 0.81),angle:1.15rad,[k[3]])
cetz.draw.hobby((0.77, 0.64),(0.90, 0.93),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(-1.00, 1.00),decoration:"arrow",angle:5.00rad)
cetz.draw.content((-1.04, 0.72),angle:5.00rad,[k[3]])
cetz.draw.hobby((-1.03, 0.89),(-0.94, 0.59),stroke:stroke,mark: (end: ">"))
})
let embedding2i4=cetz.canvas(length:50%,{
let node0= (pos:(-0.61, -0.81))
node(node0.pos)
let node1= (pos:(0.30, -0.63))
node(node1.pos)
let node2= (pos:(0.87, 0.50))
node(node2.pos)
let node3= (pos:(0.03, 0.39))
node(node3.pos)
let node4= (pos:(-0.68, -0.11))
node(node4.pos)
let node5= (pos:(-0.52, 0.54))
node(node5.pos)
edge(node1.pos,(-0.14, -0.76),node0.pos,decoration:"arrow",angle:-2.95rad)
cetz.draw.content((-0.12, -0.88),angle:-2.95rad,[q+k[0]])
cetz.draw.hobby((0.23, -0.72),(-0.14, -0.82),(-0.51, -0.87),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-0.67, -0.47),node4.pos,decoration:"wave",angle:4.82rad)
cetz.draw.content((-0.79, -0.49),angle:4.82rad,[q])
cetz.draw.hobby((-0.68, -0.76),(-0.73, -0.47),(-0.75, -0.18),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(-0.09, -0.07),node1.pos,decoration:"wave",angle:2.18rad)
cetz.draw.content((0.01, -0.00),angle:2.18rad,[q])
cetz.draw.hobby((-0.39, 0.45),(-0.06, -0.01),(0.27, -0.48),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.46, 0.46),node2.pos,decoration:"coil",angle:3.28rad)
cetz.draw.content((0.45, 0.57),angle:3.28rad,[p])
cetz.draw.hobby((0.10, 0.46),(0.44, 0.51),(0.78, 0.55),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-0.32, 0.12),node3.pos,decoration:"arrow",angle:0.61rad)
cetz.draw.content((-0.25, 0.02),angle:0.61rad,[p+q+k[3]])
cetz.draw.hobby((-0.58, -0.12),(-0.28, 0.07),(0.00, 0.28),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(-0.23, 0.55),node5.pos,decoration:"arrow",angle:2.88rad)
cetz.draw.content((-0.20, 0.66),angle:2.88rad,[q+k[3]])
cetz.draw.hobby((0.03, 0.47),(-0.21, 0.60),(-0.47, 0.61),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-1.00, -1.00),decoration:"arrow",angle:-2.69rad)
cetz.draw.content((-0.75, -1.01),angle:-2.69rad,[-k[0]])
cetz.draw.hobby((-0.88, -1.01),(-0.67, -0.91),stroke:stroke,mark: (end: ">"))
edge(node1.pos,(1.00, -1.00),decoration:"arrow",angle:2.66rad)
cetz.draw.content((0.70, -0.71),angle:2.66rad,[-k[0]])
cetz.draw.hobby((0.41, -0.63),(0.94, -0.90),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(1.00, 0.00),decoration:"arrow",angle:-1.31rad)
cetz.draw.content((1.05, 0.28),angle:-1.31rad,[p+k[3]])
cetz.draw.hobby((0.95, 0.42),(1.03, 0.11),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-1.00, 0.00),decoration:"arrow",angle:5.94rad)
cetz.draw.content((-0.88, -0.17),angle:5.94rad,[p+k[3]])
cetz.draw.hobby((-0.93, -0.09),(-0.80, -0.14),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(-1.00, 1.00),decoration:"arrow",angle:2.37rad)
cetz.draw.content((-0.84, 0.68),angle:2.37rad,[-k[3]])
cetz.draw.hobby((-0.97, 0.89),(-0.63, 0.56),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(1.00, 1.00),decoration:"arrow",angle:4.46rad)
cetz.draw.content((0.82, 0.78),angle:4.46rad,[-k[3]])
cetz.draw.hobby((0.84, 0.61),(0.92, 0.92),stroke:stroke,mark: (end: ">"))
})
let embedding2f0=cetz.canvas(length:50%,{
let node0= (pos:(0.62, -0.63))
node(node0.pos)
let node1= (pos:(-0.52, -0.77))
node(node1.pos)
let node2= (pos:(0.48, 0.29))
node(node2.pos)
let node3= (pos:(-0.57, 0.66))
node(node3.pos)
let node4= (pos:(0.93, 0.49))
node(node4.pos)
let node5= (pos:(-0.74, -0.05))
node(node5.pos)
edge(node0.pos,(0.05, -0.72),node1.pos,decoration:"arrow",angle:-3.02rad)
edge(node0.pos,(0.80, -0.10),node4.pos,decoration:"wave",angle:-1.84rad)
edge(node5.pos,(-0.64, -0.42),node1.pos,decoration:"wave",angle:1.87rad)
edge(node3.pos,(-0.04, 0.49),node2.pos,decoration:"coil",angle:2.80rad)
edge(node2.pos,(0.68, 0.46),node4.pos,decoration:"arrow",angle:0.41rad)
edge(node3.pos,(-0.67, 0.32),node5.pos,decoration:"arrow",angle:4.48rad)
edge(node1.pos,(-1.00, -1.00),decoration:"arrow",angle:-2.70rad)
edge(node0.pos,(1.00, -1.00),decoration:"arrow",angle:2.37rad)
edge(node5.pos,(-1.00, 0.00),decoration:"arrow",angle:2.94rad)
edge(node2.pos,(1.00, 0.00),decoration:"arrow",angle:2.64rad)
edge(node4.pos,(1.00, 1.00),decoration:"arrow",angle:1.44rad)
edge(node3.pos,(-1.00, 1.00),decoration:"arrow",angle:5.62rad)
})
let embedding2f1=cetz.canvas(length:50%,{
let node0= (pos:(0.36, -0.64))
node(node0.pos)
let node1= (pos:(-0.37, -0.74))
node(node1.pos)
let node2= (pos:(-0.55, 0.22))
node(node2.pos)
let node3= (pos:(0.54, 0.66))
node(node3.pos)
let node4= (pos:(-0.58, 0.57))
node(node4.pos)
let node5= (pos:(0.57, -0.05))
node(node5.pos)
edge(node0.pos,(-0.00, -0.75),node1.pos,decoration:"arrow",angle:-3.00rad)
edge(node0.pos,(-0.11, -0.04),node4.pos,decoration:"wave",angle:-0.91rad)
edge(node5.pos,(0.08, -0.37),node1.pos,decoration:"wave",angle:0.63rad)
edge(node3.pos,(0.00, 0.46),node2.pos,decoration:"coil",angle:0.39rad)
edge(node2.pos,(-0.74, 0.39),node4.pos,decoration:"arrow",angle:1.60rad)
edge(node3.pos,(0.58, 0.31),node5.pos,decoration:"arrow",angle:-1.52rad)
edge(node1.pos,(-1.00, -1.00),decoration:"arrow",angle:-2.76rad)
edge(node0.pos,(1.00, -1.00),decoration:"arrow",angle:2.63rad)
edge(node5.pos,(1.00, 0.00),decoration:"arrow",angle:0.12rad)
edge(node2.pos,(-1.00, 0.00),decoration:"arrow",angle:0.45rad)
edge(node4.pos,(-1.00, 1.00),decoration:"arrow",angle:2.34rad)
edge(node3.pos,(1.00, 1.00),decoration:"arrow",angle:3.78rad)
})
let embedding3i0=cetz.canvas(length:50%,{
let node0= (pos:(-0.50, -0.73))
node(node0.pos)
let node1= (pos:(0.50, -0.73))
node(node1.pos)
let node2= (pos:(0.59, 0.71))
node(node2.pos)
let node3= (pos:(-0.60, 0.71))
node(node3.pos)
let node4= (pos:(-0.27, 0.15))
node(node4.pos)
let node5= (pos:(0.27, 0.15))
node(node5.pos)
edge(node1.pos,(-0.00, -0.76),node0.pos,decoration:"arrow",angle:-3.14rad)
cetz.draw.content((-0.00, -0.88),angle:-3.14rad,[q+k[0]])
cetz.draw.hobby((0.41, -0.80),(-0.00, -0.82),(-0.41, -0.80),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-0.41, -0.29),node4.pos,decoration:"wave",angle:4.46rad)
cetz.draw.content((-0.53, -0.26),angle:4.46rad,[q])
cetz.draw.hobby((-0.55, -0.63),(-0.46, -0.27),(-0.36, 0.09),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(0.41, -0.29),node1.pos,decoration:"wave",angle:1.82rad)
cetz.draw.content((0.52, -0.26),angle:1.82rad,[q])
cetz.draw.hobby((0.36, 0.09),(0.46, -0.27),(0.54, -0.63),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(0.14, 0.50),node4.pos,decoration:"arrow",angle:3.71rad)
cetz.draw.content((0.08, 0.60),angle:3.71rad,[-p+k[3]])
cetz.draw.hobby((0.47, 0.73),(0.09, 0.54),(-0.24, 0.27),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(0.49, 0.42),node2.pos,decoration:"arrow",angle:1.06rad)
cetz.draw.content((0.60, 0.36),angle:1.06rad,[k[3]])
cetz.draw.hobby((0.36, 0.15),(0.54, 0.37),(0.64, 0.63),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-0.50, 0.42),node3.pos,decoration:"arrow",angle:2.08rad)
cetz.draw.content((-0.60, 0.36),angle:2.08rad,[-p+q+k[3]])
cetz.draw.hobby((-0.36, 0.15),(-0.54, 0.37),(-0.64, 0.63),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(-0.14, 0.49),node5.pos,decoration:"arrow",angle:-0.57rad)
cetz.draw.content((-0.08, 0.59),angle:-0.57rad,[q+k[3]])
cetz.draw.hobby((-0.48, 0.73),(-0.10, 0.54),(0.24, 0.27),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-1.00, -1.00),decoration:"arrow",angle:-2.64rad)
cetz.draw.content((-0.69, -0.97),angle:-2.64rad,[-k[0]])
cetz.draw.hobby((-0.88, -1.00),(-0.56, -0.83),stroke:stroke,mark: (end: ">"))
edge(node1.pos,(1.00, -1.00),decoration:"arrow",angle:2.64rad)
cetz.draw.content((0.81, -0.76),angle:2.64rad,[-k[0]])
cetz.draw.hobby((0.61, -0.72),(0.94, -0.90),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(-1.00, 1.00),decoration:"coil",angle:5.66rad)
cetz.draw.content((-0.87, 0.76),angle:5.66rad,[p])
cetz.draw.hobby((-0.95, 0.89),(-0.71, 0.72),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(1.00, 1.00),decoration:"coil",angle:3.76rad)
cetz.draw.content((0.73, 0.95),angle:3.76rad,[p])
cetz.draw.hobby((0.64, 0.82),(0.88, 0.99),stroke:stroke,mark: (end: ">"))
})
let embedding3f0=cetz.canvas(length:50%,{
let node0= (pos:(0.52, -0.77))
node(node0.pos)
let node1= (pos:(-0.62, -0.63))
node(node1.pos)
let node2= (pos:(-0.48, 0.29))
node(node2.pos)
let node3= (pos:(0.57, 0.66))
node(node3.pos)
let node4= (pos:(0.74, -0.05))
node(node4.pos)
let node5= (pos:(-0.93, 0.49))
node(node5.pos)
edge(node0.pos,(-0.05, -0.72),node1.pos,decoration:"arrow",angle:3.02rad)
edge(node0.pos,(0.64, -0.42),node4.pos,decoration:"wave",angle:-1.86rad)
edge(node5.pos,(-0.79, -0.10),node1.pos,decoration:"wave",angle:1.84rad)
edge(node3.pos,(0.04, 0.49),node2.pos,decoration:"coil",angle:0.34rad)
edge(node5.pos,(-0.67, 0.47),node2.pos,decoration:"arrow",angle:-0.42rad)
edge(node4.pos,(0.67, 0.32),node3.pos,decoration:"arrow",angle:1.80rad)
edge(node1.pos,(-1.00, -1.00),decoration:"arrow",angle:-2.37rad)
edge(node0.pos,(1.00, -1.00),decoration:"arrow",angle:2.70rad)
edge(node2.pos,(-1.00, 0.00),decoration:"arrow",angle:-2.64rad)
edge(node4.pos,(1.00, 0.00),decoration:"arrow",angle:3.34rad)
edge(node3.pos,(1.00, 1.00),decoration:"arrow",angle:0.67rad)
edge(node5.pos,(-1.00, 1.00),decoration:"arrow",angle:4.85rad)
})
let embedding3f1=cetz.canvas(length:50%,{
let node0= (pos:(0.37, -0.75))
node(node0.pos)
let node1= (pos:(-0.35, -0.65))
node(node1.pos)
let node2= (pos:(0.52, 0.22))
node(node2.pos)
let node3= (pos:(-0.55, 0.66))
node(node3.pos)
let node4= (pos:(-0.57, -0.06))
node(node4.pos)
let node5= (pos:(0.62, 0.56))
node(node5.pos)
edge(node0.pos,(0.01, -0.76),node1.pos,decoration:"arrow",angle:3.01rad)
edge(node0.pos,(-0.08, -0.38),node4.pos,decoration:"wave",angle:-0.63rad)
edge(node5.pos,(0.13, -0.05),node1.pos,decoration:"wave",angle:0.89rad)
edge(node3.pos,(-0.03, 0.46),node2.pos,decoration:"coil",angle:2.75rad)
edge(node5.pos,(0.43, 0.45),node2.pos,decoration:"arrow",angle:4.32rad)
edge(node4.pos,(-0.58, 0.31),node3.pos,decoration:"arrow",angle:1.54rad)
edge(node1.pos,(-1.00, -1.00),decoration:"arrow",angle:-2.64rad)
edge(node0.pos,(1.00, -1.00),decoration:"arrow",angle:2.76rad)
edge(node2.pos,(1.00, 0.00),decoration:"arrow",angle:-0.42rad)
edge(node4.pos,(-1.00, 0.00),decoration:"arrow",angle:6.15rad)
edge(node3.pos,(-1.00, 1.00),decoration:"arrow",angle:2.49rad)
edge(node5.pos,(1.00, 1.00),decoration:"arrow",angle:4.00rad)
})
let embedding4i0=cetz.canvas(length:50%,{
let node0= (pos:(-0.34, -0.75))
node(node0.pos)
let node1= (pos:(0.64, -0.64))
node(node1.pos)
let node2= (pos:(-0.55, 0.21))
node(node2.pos)
let node3= (pos:(-0.60, 0.72))
node(node3.pos)
let node4= (pos:(0.28, -0.00))
node(node4.pos)
let node5= (pos:(0.60, 0.48))
node(node5.pos)
edge(node1.pos,(0.16, -0.74),node0.pos,decoration:"arrow",angle:-3.03rad)
cetz.draw.content((0.17, -0.86),angle:-3.03rad,[q+k[0]])
cetz.draw.hobby((0.56, -0.72),(0.16, -0.80),(-0.24, -0.82),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-0.04, -0.38),node4.pos,decoration:"wave",angle:4.02rad)
cetz.draw.content((-0.14, -0.30),angle:4.02rad,[q])
cetz.draw.hobby((-0.33, -0.64),(-0.08, -0.33),(0.17, -0.03),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(0.67, -0.09),node1.pos,decoration:"wave",angle:1.60rad)
cetz.draw.content((0.79, -0.08),angle:1.60rad,[q])
cetz.draw.hobby((0.69, 0.38),(0.73, -0.08),(0.71, -0.54),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(-0.66, 0.47),node2.pos,decoration:"coil",angle:1.66rad)
cetz.draw.content((-0.78, 0.46),angle:1.66rad,[-p-q-2 k[3]])
cetz.draw.hobby((-0.68, 0.70),(-0.72, 0.45),(-0.63, 0.22),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(0.04, 0.38),node2.pos,decoration:"arrow",angle:3.36rad)
cetz.draw.content((0.01, 0.50),angle:3.36rad,[k[3]])
cetz.draw.hobby((0.48, 0.52),(0.01, 0.43),(-0.45, 0.31),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-0.15, 0.39),node3.pos,decoration:"arrow",angle:2.46rad)
cetz.draw.content((-0.07, 0.48),angle:2.46rad,[-p-k[3]])
cetz.draw.hobby((0.24, 0.12),(-0.10, 0.43),(-0.47, 0.71),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-1.00, -1.00),decoration:"arrow",angle:-2.78rad)
cetz.draw.content((-0.63, -0.99),angle:-2.78rad,[-k[0]])
cetz.draw.hobby((-0.89, -1.02),(-0.41, -0.84),stroke:stroke,mark: (end: ">"))
edge(node1.pos,(1.00, -1.00),decoration:"arrow",angle:2.36rad)
cetz.draw.content((0.90, -0.73),angle:2.36rad,[-k[0]])
cetz.draw.hobby((0.75, -0.67),(0.97, -0.89),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(-1.00, 0.00),decoration:"arrow",angle:-2.70rad)
cetz.draw.content((-0.72, -0.00),angle:-2.70rad,[p+q+k[3]])
cetz.draw.hobby((-0.88, -0.01),(-0.61, 0.12),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(1.00, 0.00),decoration:"arrow",angle:3.14rad)
cetz.draw.content((0.64, 0.12),angle:3.14rad,[p+q+k[3]])
cetz.draw.hobby((0.38, 0.06),(0.90, 0.06),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(-1.00, 1.00),decoration:"arrow",angle:2.54rad)
cetz.draw.content((-0.87, 0.76),angle:2.54rad,[-q-k[3]])
cetz.draw.hobby((-0.95, 0.89),(-0.72, 0.73),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(1.00, 1.00),decoration:"arrow",angle:4.07rad)
cetz.draw.content((0.71, 0.81),angle:4.07rad,[-q-k[3]])
cetz.draw.hobby((0.62, 0.59),(0.89, 0.96),stroke:stroke,mark: (end: ">"))
})
let embedding4i1=cetz.canvas(length:50%,{
let node0= (pos:(-0.64, -0.64))
node(node0.pos)
let node1= (pos:(0.34, -0.75))
node(node1.pos)
let node2= (pos:(0.55, 0.21))
node(node2.pos)
let node3= (pos:(0.60, 0.72))
node(node3.pos)
let node4= (pos:(-0.60, 0.48))
node(node4.pos)
let node5= (pos:(-0.28, -0.00))
node(node5.pos)
edge(node1.pos,(-0.16, -0.74),node0.pos,decoration:"arrow",angle:3.03rad)
cetz.draw.content((-0.17, -0.86),angle:3.03rad,[q+k[0]])
cetz.draw.hobby((0.24, -0.82),(-0.16, -0.80),(-0.56, -0.72),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-0.67, -0.09),node4.pos,decoration:"wave",angle:4.68rad)
cetz.draw.content((-0.79, -0.08),angle:4.68rad,[q])
cetz.draw.hobby((-0.71, -0.54),(-0.73, -0.08),(-0.68, 0.38),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(0.04, -0.38),node1.pos,decoration:"wave",angle:2.26rad)
cetz.draw.content((0.14, -0.30),angle:2.26rad,[q])
cetz.draw.hobby((-0.17, -0.04),(0.08, -0.33),(0.33, -0.64),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.66, 0.47),node2.pos,decoration:"coil",angle:1.48rad)
cetz.draw.content((0.78, 0.46),angle:1.48rad,[-p-q-2 k[3]])
cetz.draw.hobby((0.68, 0.70),(0.72, 0.45),(0.63, 0.22),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(-0.04, 0.38),node4.pos,decoration:"arrow",angle:2.92rad)
cetz.draw.content((-0.02, 0.49),angle:2.92rad,[-p-q-k[3]])
cetz.draw.hobby((0.45, 0.31),(-0.01, 0.43),(-0.48, 0.52),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.15, 0.39),node5.pos,decoration:"arrow",angle:3.83rad)
cetz.draw.content((0.08, 0.48),angle:3.83rad,[q+k[3]])
cetz.draw.hobby((0.47, 0.71),(0.11, 0.43),(-0.24, 0.12),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-1.00, -1.00),decoration:"arrow",angle:-2.36rad)
cetz.draw.content((-0.73, -0.90),angle:-2.36rad,[-k[0]])
cetz.draw.hobby((-0.89, -0.97),(-0.67, -0.75),stroke:stroke,mark: (end: ">"))
edge(node1.pos,(1.00, -1.00),decoration:"arrow",angle:2.78rad)
cetz.draw.content((0.71, -0.76),angle:2.78rad,[-k[0]])
cetz.draw.hobby((0.45, -0.73),(0.93, -0.91),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(-1.00, 0.00),decoration:"arrow",angle:3.14rad)
cetz.draw.content((-0.64, -0.12),angle:3.14rad,[-k[3]])
cetz.draw.hobby((-0.90, -0.06),(-0.38, -0.06),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(1.00, 0.00),decoration:"arrow",angle:2.70rad)
cetz.draw.content((0.82, 0.21),angle:2.70rad,[-k[3]])
cetz.draw.hobby((0.66, 0.22),(0.93, 0.10),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-1.00, 1.00),decoration:"arrow",angle:2.22rad)
cetz.draw.content((-0.90, 0.67),angle:2.22rad,[p+k[3]])
cetz.draw.hobby((-0.99, 0.88),(-0.71, 0.52),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(1.00, 1.00),decoration:"arrow",angle:3.75rad)
cetz.draw.content((0.73, 0.96),angle:3.75rad,[p+k[3]])
cetz.draw.hobby((0.65, 0.83),(0.88, 0.99),stroke:stroke,mark: (end: ">"))
})
let embedding4f0=cetz.canvas(length:50%,{
let node0= (pos:(0.52, -0.83))
node(node0.pos)
let node1= (pos:(-0.59, -0.66))
node(node1.pos)
let node2= (pos:(0.02, 0.60))
node(node2.pos)
let node3= (pos:(-0.01, 0.17))
node(node3.pos)
let node4= (pos:(0.70, -0.16))
node(node4.pos)
let node5= (pos:(-0.75, 0.44))
node(node5.pos)
edge(node0.pos,(-0.04, -0.77),node1.pos,decoration:"arrow",angle:2.99rad)
edge(node0.pos,(0.64, -0.51),node4.pos,decoration:"wave",angle:-1.83rad)
edge(node5.pos,(-0.70, -0.12),node1.pos,decoration:"wave",angle:1.72rad)
edge(node3.pos,(0.13, 0.39),node2.pos,decoration:"coil",angle:-1.57rad)
edge(node4.pos,(0.35, -0.00),node3.pos,decoration:"arrow",angle:2.70rad)
edge(node3.pos,(-0.40, 0.31),node5.pos,decoration:"arrow",angle:2.79rad)
edge(node1.pos,(-1.00, -1.00),decoration:"arrow",angle:-2.44rad)
edge(node0.pos,(1.00, -1.00),decoration:"arrow",angle:2.80rad)
edge(node2.pos,(-1.00, 0.00),decoration:"arrow",angle:-2.61rad)
edge(node4.pos,(1.00, 0.00),decoration:"arrow",angle:3.63rad)
edge(node5.pos,(-1.00, 1.00),decoration:"arrow",angle:1.98rad)
edge(node2.pos,(1.00, 1.00),decoration:"arrow",angle:3.53rad)
})
let embedding4f1=cetz.canvas(length:50%,{
let node0= (pos:(0.39, -0.81))
node(node0.pos)
let node1= (pos:(-0.35, -0.72))
node(node1.pos)
let node2= (pos:(-0.08, 0.26))
node(node2.pos)
let node3= (pos:(-0.01, 0.63))
node(node3.pos)
let node4= (pos:(-0.53, -0.19))
node(node4.pos)
let node5= (pos:(0.56, 0.42))
node(node5.pos)
edge(node0.pos,(0.02, -0.83),node1.pos,decoration:"arrow",angle:3.02rad)
edge(node0.pos,(-0.04, -0.48),node4.pos,decoration:"wave",angle:-0.60rad)
edge(node5.pos,(0.13, -0.17),node1.pos,decoration:"wave",angle:0.90rad)
edge(node3.pos,(-0.22, 0.50),node2.pos,decoration:"coil",angle:1.26rad)
edge(node2.pos,(-0.34, 0.05),node4.pos,decoration:"arrow",angle:3.94rad)
edge(node5.pos,(0.27, 0.32),node2.pos,decoration:"arrow",angle:-2.88rad)
edge(node1.pos,(-1.00, -1.00),decoration:"arrow",angle:-2.73rad)
edge(node0.pos,(1.00, -1.00),decoration:"arrow",angle:2.84rad)
edge(node4.pos,(-1.00, 0.00),decoration:"arrow",angle:2.76rad)
edge(node3.pos,(1.00, 0.00),decoration:"arrow",angle:2.59rad)
edge(node3.pos,(-1.00, 1.00),decoration:"arrow",angle:2.78rad)
edge(node5.pos,(1.00, 1.00),decoration:"arrow",angle:4.06rad)
})
[= embedding 1 [1, -1, -1, -2] 
 == initial
Denominator:
```mathematica
prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,p-k[3]]^-1 prop[0,p-q-k[3]]^-1 prop[0,p-q-2 k[3]]^-1
```Partial Fractioned Denominator:
```mathematica
-1/2 (1/2 dot[p,p]-dot[p,q]+1/2 dot[q,q])^-1 (1/2 dot[p,p]+dot[p,q]+1/2 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,p-k[3]]^-1
	+(1/2 dot[p,p]-dot[p,q]+1/2 dot[q,q])^-1 (1/2 dot[p,p]+dot[p,q]+1/2 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,p-q-2 k[3]]^-1
	+(1/2 dot[p,p]-dot[p,q]+1/2 dot[q,q])^-1 (1/2 dot[p,p]+dot[p,q]+1/2 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,p-k[3]]^-1 prop[0,p-q-2 k[3]]^-1
	-1/2 (1/2 dot[p,p]-dot[p,q]+1/2 dot[q,q])^-1 (1/2 dot[p,p]+dot[p,q]+1/2 dot[q,q])^-1 prop[0,q+k[3]]^-1 prop[0,p-k[3]]^-1 prop[0,p-q-k[3]]^-1
	+(1/2 dot[p,p]-dot[p,q]+1/2 dot[q,q])^-1 (1/2 dot[p,p]+dot[p,q]+1/2 dot[q,q])^-1 prop[0,q+k[3]]^-1 prop[0,p-q-k[3]]^-1 prop[0,p-q-2 k[3]]^-1
	+(1/2 dot[p,p]-dot[p,q]+1/2 dot[q,q])^-1 (1/2 dot[p,p]+dot[p,q]+1/2 dot[q,q])^-1 prop[0,p-k[3]]^-1 prop[0,p-q-k[3]]^-1 prop[0,p-q-2 k[3]]^-1
	+1/4 (1/2 dot[p,p]-dot[p,q]+1/2 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,p-k[3]]^-1 dot[p,q]^-1
	-1/4 (1/2 dot[p,p]-dot[p,q]+1/2 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,p-q-k[3]]^-1 dot[p,q]^-1
	-1/4 (1/2 dot[p,p]-dot[p,q]+1/2 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,p-k[3]]^-1 prop[0,p-q-k[3]]^-1 dot[p,q]^-1
	+1/4 (1/2 dot[p,p]-dot[p,q]+1/2 dot[q,q])^-1 prop[0,q+k[3]]^-1 prop[0,p-k[3]]^-1 prop[0,p-q-k[3]]^-1 dot[p,q]^-1
```]
grid(columns: cols,gutter: 20pt,box[#embedding1i0 -3+11+17],box[#embedding1i1 -3+13+15],)
pagebreak()
[== final
Denominator: 
```mathematica
prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,p-k[3]]^-1 prop[0,p-2 k[3]]^-1 prop[0,p+q-k[3]]^-1
```]
grid(columns: cols,gutter: 20pt,box[#embedding1f0 -1+11+13],box[#embedding1f1 -1+15+17],)
pagebreak()
[= embedding 2 [1, 0, -1, 0] 
 == initial
Denominator:
```mathematica
prop[0,p]^-1 prop[0,k[3]]^-1 prop[0,p+k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,p+q+k[3]]^-1
```Partial Fractioned Denominator:
```mathematica
1/2 prop[0,k[3]]^-1 prop[0,p+k[3]]^-1 prop[0,q+k[3]]^-1 dot[p,p]^-1 dot[p,q]^-1
	-1/2 prop[0,k[3]]^-1 prop[0,p+k[3]]^-1 prop[0,p+q+k[3]]^-1 dot[p,p]^-1 dot[p,q]^-1
	-1/2 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,p+q+k[3]]^-1 dot[p,p]^-1 dot[p,q]^-1
	+1/2 prop[0,p+k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,p+q+k[3]]^-1 dot[p,p]^-1 dot[p,q]^-1
```]
grid(columns: cols,gutter: 20pt,box[#embedding2i0 -3+9],box[#embedding2i1 -3-15+17],box[#embedding2i2 -3+15-17],box[#embedding2i3 -3-11+13],box[#embedding2i4 -3+11-13],)
pagebreak()
[== final
Denominator: 
```mathematica
prop[0,k[3]]^-1 prop[0,p+k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,p-q]^-1 prop[0,p-q+k[3]]^-1
```]
grid(columns: cols,gutter: 20pt,box[#embedding2f0 -1-13+15],box[#embedding2f1 -1+13-15],)
pagebreak()
[= embedding 3 [1, 0, 1, 0] 
 == initial
Denominator:
```mathematica
prop[0,k[3]]^-1 prop[0,-p]^-1 prop[0,q+k[3]]^-1 prop[0,-p+k[3]]^-1 prop[0,-p+q+k[3]]^-1
```Partial Fractioned Denominator:
```mathematica
-1/2 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,-p+k[3]]^-1 dot[p,p]^-1 dot[p,q]^-1
	+1/2 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,-p+q+k[3]]^-1 dot[p,p]^-1 dot[p,q]^-1
	+1/2 prop[0,k[3]]^-1 prop[0,-p+k[3]]^-1 prop[0,-p+q+k[3]]^-1 dot[p,p]^-1 dot[p,q]^-1
	-1/2 prop[0,q+k[3]]^-1 prop[0,-p+k[3]]^-1 prop[0,-p+q+k[3]]^-1 dot[p,p]^-1 dot[p,q]^-1
```]
grid(columns: cols,gutter: 20pt,box[#embedding3i0 -3-9],)
pagebreak()
[== final
Denominator: 
```mathematica
prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,-p+q]^-1 prop[0,-p+q+k[3]]^-1 prop[0,-p+2 q+k[3]]^-1
```]
grid(columns: cols,gutter: 20pt,box[#embedding3f0 -1-11+17],box[#embedding3f1 -1+11-17],)
pagebreak()
[= embedding 4 [1, 1, 1, 2] 
 == initial
Denominator:
```mathematica
prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,-p-k[3]]^-1 prop[0,-p-q-k[3]]^-1 prop[0,-p-q-2 k[3]]^-1
```Partial Fractioned Denominator:
```mathematica
-1/2 (1/2 dot[p,p]-dot[p,q]+1/2 dot[q,q])^-1 (1/2 dot[p,p]+dot[p,q]+1/2 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,-p-k[3]]^-1
	+(1/2 dot[p,p]-dot[p,q]+1/2 dot[q,q])^-1 (1/2 dot[p,p]+dot[p,q]+1/2 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,-p-q-2 k[3]]^-1
	+(1/2 dot[p,p]-dot[p,q]+1/2 dot[q,q])^-1 (1/2 dot[p,p]+dot[p,q]+1/2 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,-p-k[3]]^-1 prop[0,-p-q-2 k[3]]^-1
	-1/2 (1/2 dot[p,p]-dot[p,q]+1/2 dot[q,q])^-1 (1/2 dot[p,p]+dot[p,q]+1/2 dot[q,q])^-1 prop[0,q+k[3]]^-1 prop[0,-p-k[3]]^-1 prop[0,-p-q-k[3]]^-1
	+(1/2 dot[p,p]-dot[p,q]+1/2 dot[q,q])^-1 (1/2 dot[p,p]+dot[p,q]+1/2 dot[q,q])^-1 prop[0,q+k[3]]^-1 prop[0,-p-q-k[3]]^-1 prop[0,-p-q-2 k[3]]^-1
	+(1/2 dot[p,p]-dot[p,q]+1/2 dot[q,q])^-1 (1/2 dot[p,p]+dot[p,q]+1/2 dot[q,q])^-1 prop[0,-p-k[3]]^-1 prop[0,-p-q-k[3]]^-1 prop[0,-p-q-2 k[3]]^-1
	-1/4 (1/2 dot[p,p]+dot[p,q]+1/2 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,-p-k[3]]^-1 dot[p,q]^-1
	+1/4 (1/2 dot[p,p]+dot[p,q]+1/2 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,-p-q-k[3]]^-1 dot[p,q]^-1
	+1/4 (1/2 dot[p,p]+dot[p,q]+1/2 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,-p-k[3]]^-1 prop[0,-p-q-k[3]]^-1 dot[p,q]^-1
	-1/4 (1/2 dot[p,p]+dot[p,q]+1/2 dot[q,q])^-1 prop[0,q+k[3]]^-1 prop[0,-p-k[3]]^-1 prop[0,-p-q-k[3]]^-1 dot[p,q]^-1
```]
grid(columns: cols,gutter: 20pt,box[#embedding4i0 -3-11-17],box[#embedding4i1 -3-13-15],)
pagebreak()
[== final
Denominator: 
```mathematica
prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,-p-k[3]]^-1 prop[0,-p-2 k[3]]^-1 prop[0,-p+q-k[3]]^-1
```]
grid(columns: cols,gutter: 20pt,box[#embedding4f0 -1-11-13],box[#embedding4f1 -1-15-17],)
pagebreak()
}