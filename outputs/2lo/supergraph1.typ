#set page(width: 35cm, height: auto)
#import "@preview/cetz:0.3.1"
#{
let cols = (30%,30%,30%)

let node(pos)=cetz.draw.circle(pos,radius:0.02,fill: black)
let stroke = 0.7pt
let amplitude = 0.051
let arrow-scale = 0.8
let segment-length = 0.0521
let edge(..points,decoration:"",angle:0deg)={
    if decoration == "coil"{
    cetz.decorations.coil(cetz.draw.hobby(..points),amplitude:amplitude,stroke:stroke,align:"MID")
    } else if decoration == "wave" {
        cetz.decorations.wave(cetz.draw.hobby(..points),amplitude:amplitude,stroke:stroke)
    }  else if decoration == "arrow"{
        let points = points.pos()
        if points.len()==2{
          let center = (0.5*(points.at(0).at(0)+points.at(1).at(0)),0.5*(points.at(0).at(1)+points.at(1).at(1)))
          cetz.draw.hobby(..points,stroke:stroke)
          cetz.draw.mark(center,angle,symbol: ">", fill: black,anchor: "center",scale:arrow-scale)
        } else {
          let (first,center,..other)=points
          cetz.draw.hobby(first,center,..other,stroke:stroke)
            cetz.draw.mark(center,angle,symbol: ">", fill: black,anchor: "center",scale:arrow-scale)
        }

    }else {
            cetz.draw.hobby(..points,stroke:stroke)
    }
}
let embedding1i0=cetz.canvas(length:50%,{
let node0= (pos:(-0.53, -0.76))
node(node0.pos)
let node1= (pos:(0.58, -0.61))
node(node1.pos)
let node2= (pos:(0.03, 0.43))
node(node2.pos)
let node3= (pos:(-0.10, 0.67))
node(node3.pos)
let node4= (pos:(-0.69, -0.02))
node(node4.pos)
let node5= (pos:(0.73, 0.55))
node(node5.pos)
edge(node1.pos,(0.03, -0.71),node0.pos,decoration:"arrow",angle:-3.00rad)
cetz.draw.content((0.05, -0.83),angle:-3.00rad,[q+k[0]])
cetz.draw.hobby((0.49, -0.69),(0.04, -0.77),(-0.41, -0.82),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-0.62, -0.40),node4.pos,decoration:"wave",angle:4.93rad)
cetz.draw.content((-0.74, -0.43),angle:4.93rad,[q])
cetz.draw.hobby((-0.61, -0.71),(-0.69, -0.41),(-0.74, -0.11),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(0.67, -0.04),node1.pos,decoration:"wave",angle:1.45rad)
cetz.draw.content((0.79, -0.05),angle:1.45rad,[q])
cetz.draw.hobby((0.78, 0.43),(0.73, -0.04),(0.66, -0.50),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(-0.21, 0.48),node2.pos,decoration:"coil",angle:1.92rad)
cetz.draw.content((-0.32, 0.44),angle:1.92rad,[p-2 k[3]])
cetz.draw.hobby((-0.18, 0.70),(-0.25, 0.44),(0.01, 0.34),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-0.45, 0.33),node3.pos,decoration:"arrow",angle:0.88rad)
cetz.draw.content((-0.55, 0.41),angle:0.88rad,[p+q-k[3]])
cetz.draw.hobby((-0.70, 0.09),(-0.48, 0.39),(-0.21, 0.66),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.35, 0.67),node5.pos,decoration:"arrow",angle:-0.16rad)
cetz.draw.content((0.37, 0.79),angle:-0.16rad,[q+k[3]])
cetz.draw.hobby((-0.02, 0.74),(0.33, 0.73),(0.67, 0.64),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-1.00, -1.00),decoration:"arrow",angle:-2.68rad)
cetz.draw.content((-0.71, -0.99),angle:-2.68rad,[-k[0]])
cetz.draw.hobby((-0.88, -1.01),(-0.59, -0.86),stroke:stroke,mark: (end: ">"))
edge(node1.pos,(1.00, -1.00),decoration:"arrow",angle:2.39rad)
cetz.draw.content((0.87, -0.72),angle:2.39rad,[-k[0]])
cetz.draw.hobby((0.70, -0.63),(0.97, -0.89),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(1.00, 0.00),decoration:"arrow",angle:-0.41rad)
cetz.draw.content((0.56, 0.32),angle:-0.41rad,[p-k[3]])
cetz.draw.hobby((0.14, 0.44),(0.93, 0.10),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-1.00, 0.00),decoration:"arrow",angle:6.21rad)
cetz.draw.content((-0.85, -0.13),angle:6.21rad,[p-k[3]])
cetz.draw.hobby((-0.90, -0.07),(-0.80, -0.07),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(1.00, 1.00),decoration:"arrow",angle:1.02rad)
cetz.draw.content((0.76, 0.84),angle:1.02rad,[k[3]])
cetz.draw.hobby((0.73, 0.67),(0.90, 0.95),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(-1.00, 1.00),decoration:"arrow",angle:5.78rad)
cetz.draw.content((-0.54, 0.61),angle:5.78rad,[k[3]])
cetz.draw.hobby((-0.94, 0.90),(-0.09, 0.42),stroke:stroke,mark: (end: ">"))
})
let embedding1f0=cetz.canvas(length:50%,{
let node0= (pos:(0.64, -0.64))
node(node0.pos)
let node1= (pos:(-0.34, -0.75))
node(node1.pos)
let node2= (pos:(-0.55, 0.21))
node(node2.pos)
let node3= (pos:(-0.60, 0.72))
node(node3.pos)
let node4= (pos:(0.60, 0.47))
node(node4.pos)
let node5= (pos:(0.28, -0.00))
node(node5.pos)
edge(node0.pos,(0.16, -0.74),node1.pos,decoration:"arrow",angle:-3.03rad)
edge(node0.pos,(0.67, -0.09),node4.pos,decoration:"wave",angle:-1.54rad)
edge(node5.pos,(-0.04, -0.38),node1.pos,decoration:"wave",angle:0.88rad)
edge(node3.pos,(-0.66, 0.47),node2.pos,decoration:"coil",angle:1.66rad)
edge(node2.pos,(0.04, 0.37),node4.pos,decoration:"arrow",angle:0.22rad)
edge(node3.pos,(-0.15, 0.39),node5.pos,decoration:"arrow",angle:-0.69rad)
edge(node1.pos,(-1.00, -1.00),decoration:"arrow",angle:-2.78rad)
edge(node0.pos,(1.00, -1.00),decoration:"arrow",angle:2.36rad)
edge(node5.pos,(1.00, 0.00),decoration:"arrow",angle:0.00rad)
edge(node2.pos,(-1.00, 0.00),decoration:"arrow",angle:0.44rad)
edge(node4.pos,(1.00, 1.00),decoration:"arrow",angle:0.93rad)
edge(node3.pos,(-1.00, 1.00),decoration:"arrow",angle:5.68rad)
})
let embedding1f1=cetz.canvas(length:50%,{
let node0= (pos:(0.34, -0.75))
node(node0.pos)
let node1= (pos:(-0.64, -0.64))
node(node1.pos)
let node2= (pos:(0.55, 0.21))
node(node2.pos)
let node3= (pos:(0.60, 0.73))
node(node3.pos)
let node4= (pos:(-0.28, 0.00))
node(node4.pos)
let node5= (pos:(-0.60, 0.47))
node(node5.pos)
edge(node0.pos,(-0.16, -0.74),node1.pos,decoration:"arrow",angle:3.03rad)
edge(node0.pos,(0.04, -0.38),node4.pos,decoration:"wave",angle:-0.89rad)
edge(node5.pos,(-0.68, -0.09),node1.pos,decoration:"wave",angle:1.54rad)
edge(node3.pos,(0.66, 0.47),node2.pos,decoration:"coil",angle:1.48rad)
edge(node5.pos,(-0.04, 0.38),node2.pos,decoration:"arrow",angle:-0.22rad)
edge(node4.pos,(0.15, 0.39),node3.pos,decoration:"arrow",angle:0.69rad)
edge(node1.pos,(-1.00, -1.00),decoration:"arrow",angle:-2.35rad)
edge(node0.pos,(1.00, -1.00),decoration:"arrow",angle:2.78rad)
edge(node2.pos,(1.00, 0.00),decoration:"arrow",angle:-0.44rad)
edge(node4.pos,(-1.00, 0.00),decoration:"arrow",angle:0.00rad)
edge(node3.pos,(1.00, 1.00),decoration:"arrow",angle:0.60rad)
edge(node5.pos,(-1.00, 1.00),decoration:"arrow",angle:5.36rad)
})
let embedding2i0=cetz.canvas(length:50%,{
let node0= (pos:(-0.47, -0.87))
node(node0.pos)
let node1= (pos:(0.59, -0.67))
node(node1.pos)
let node2= (pos:(-0.06, 0.50))
node(node2.pos)
let node3= (pos:(-0.54, 0.18))
node(node3.pos)
let node4= (pos:(-0.32, -0.21))
node(node4.pos)
let node5= (pos:(0.61, 0.42))
node(node5.pos)
edge(node1.pos,(0.07, -0.81),node0.pos,decoration:"arrow",angle:-2.95rad)
cetz.draw.content((0.10, -0.92),angle:-2.95rad,[q+k[0]])
cetz.draw.hobby((0.50, -0.76),(0.08, -0.87),(-0.35, -0.92),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-0.41, -0.55),node4.pos,decoration:"wave",angle:4.50rad)
cetz.draw.content((-0.52, -0.53),angle:4.50rad,[q])
cetz.draw.hobby((-0.52, -0.79),(-0.46, -0.52),(-0.40, -0.26),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(0.62, -0.13),node1.pos,decoration:"wave",angle:1.55rad)
cetz.draw.content((0.74, -0.13),angle:1.55rad,[q])
cetz.draw.hobby((0.67, 0.31),(0.68, -0.13),(0.66, -0.57),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(-0.15, 0.15),node4.pos,decoration:"arrow",angle:-1.92rad)
cetz.draw.content((-0.03, 0.11),angle:-1.92rad,[-p+2 k[3]])
cetz.draw.hobby((-0.01, 0.42),(-0.10, 0.11),(-0.23, -0.17),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-0.55, -0.07),node3.pos,decoration:"arrow",angle:2.05rad)
cetz.draw.content((-0.66, -0.13),angle:2.05rad,[-p+q+2 k[3]])
cetz.draw.hobby((-0.38, -0.26),(-0.60, -0.11),(-0.62, 0.15),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.09, 0.26),node5.pos,decoration:"arrow",angle:0.22rad)
cetz.draw.content((0.11, 0.14),angle:0.22rad,[q+k[3]])
cetz.draw.hobby((-0.42, 0.12),(0.06, 0.19),(0.52, 0.32),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-1.00, -1.00),decoration:"arrow",angle:-2.91rad)
cetz.draw.content((-0.71, -1.05),angle:-2.91rad,[-k[0]])
cetz.draw.hobby((-0.89, -1.03),(-0.55, -0.95),stroke:stroke,mark: (end: ">"))
edge(node1.pos,(1.00, -1.00),decoration:"arrow",angle:2.46rad)
cetz.draw.content((0.87, -0.74),angle:2.46rad,[-k[0]])
cetz.draw.hobby((0.70, -0.68),(0.96, -0.89),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(-1.00, 0.00),decoration:"coil",angle:0.36rad)
cetz.draw.content((-0.73, -0.02),angle:0.36rad,[p-k[3]])
cetz.draw.hobby((-0.89, -0.02),(-0.61, 0.08),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(1.00, 0.00),decoration:"coil",angle:2.70rad)
cetz.draw.content((0.52, 0.36),angle:2.70rad,[p-k[3]])
cetz.draw.hobby((0.06, 0.51),(0.94, 0.10),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(1.00, 1.00),decoration:"arrow",angle:0.98rad)
cetz.draw.content((0.70, 0.78),angle:0.98rad,[k[3]])
cetz.draw.hobby((0.61, 0.54),(0.89, 0.95),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(-1.00, 1.00),decoration:"arrow",angle:5.80rad)
cetz.draw.content((-0.58, 0.65),angle:5.80rad,[k[3]])
cetz.draw.hobby((-0.94, 0.90),(-0.17, 0.50),stroke:stroke,mark: (end: ">"))
})
let embedding2f0=cetz.canvas(length:50%,{
let node0= (pos:(0.46, -0.87))
node(node0.pos)
let node1= (pos:(-0.59, -0.67))
node(node1.pos)
let node2= (pos:(0.54, 0.17))
node(node2.pos)
let node3= (pos:(0.06, 0.50))
node(node3.pos)
let node4= (pos:(0.31, -0.21))
node(node4.pos)
let node5= (pos:(-0.61, 0.42))
node(node5.pos)
edge(node0.pos,(-0.08, -0.81),node1.pos,decoration:"arrow",angle:2.95rad)
edge(node0.pos,(0.40, -0.56),node4.pos,decoration:"wave",angle:-1.35rad)
edge(node5.pos,(-0.63, -0.13),node1.pos,decoration:"wave",angle:1.59rad)
edge(node2.pos,(0.54, -0.08),node4.pos,decoration:"arrow",angle:-2.07rad)
edge(node5.pos,(-0.09, 0.26),node2.pos,decoration:"arrow",angle:6.06rad)
edge(node4.pos,(0.15, 0.15),node3.pos,decoration:"arrow",angle:1.91rad)
edge(node1.pos,(-1.00, -1.00),decoration:"arrow",angle:-2.47rad)
edge(node0.pos,(1.00, -1.00),decoration:"arrow",angle:2.91rad)
edge(node3.pos,(-1.00, 0.00),decoration:"coil",angle:0.44rad)
edge(node2.pos,(1.00, 0.00),decoration:"coil",angle:2.78rad)
edge(node3.pos,(1.00, 1.00),decoration:"arrow",angle:0.49rad)
edge(node5.pos,(-1.00, 1.00),decoration:"arrow",angle:5.30rad)
})
let embedding3i0=cetz.canvas(length:50%,{
let node0= (pos:(-0.66, -0.66))
node(node0.pos)
let node1= (pos:(0.45, -0.78))
node(node1.pos)
let node2= (pos:(0.91, 0.46))
node(node2.pos)
let node3= (pos:(-0.57, 0.12))
node(node3.pos)
let node4= (pos:(-0.94, 0.48))
node(node4.pos)
let node5= (pos:(0.28, -0.03))
node(node5.pos)
edge(node1.pos,(-0.11, -0.75),node0.pos,decoration:"arrow",angle:3.03rad)
cetz.draw.content((-0.12, -0.87),angle:3.03rad,[q+k[0]])
cetz.draw.hobby((0.33, -0.84),(-0.12, -0.81),(-0.56, -0.74),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-0.84, -0.13),node4.pos,decoration:"wave",angle:4.97rad)
cetz.draw.content((-0.96, -0.16),angle:4.97rad,[q])
cetz.draw.hobby((-0.76, -0.57),(-0.91, -0.12),(-0.99, 0.35),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(0.39, -0.41),node1.pos,decoration:"wave",angle:1.78rad)
cetz.draw.content((0.50, -0.38),angle:1.78rad,[q])
cetz.draw.hobby((0.36, -0.08),(0.44, -0.39),(0.50, -0.70),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(0.60, 0.23),node2.pos,decoration:"arrow",angle:0.66rad)
cetz.draw.content((0.52, 0.33),angle:0.66rad,[p])
cetz.draw.hobby((0.30, 0.07),(0.55, 0.28),(0.81, 0.46),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-0.71, 0.36),node3.pos,decoration:"arrow",angle:-0.74rad)
cetz.draw.content((-0.63, 0.45),angle:-0.74rad,[p+q+k[2]])
cetz.draw.hobby((-0.87, 0.52),(-0.66, 0.40),(-0.53, 0.19),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(-0.14, 0.06),node5.pos,decoration:"arrow",angle:-0.17rad)
cetz.draw.content((-0.12, 0.18),angle:-0.17rad,[p+q])
cetz.draw.hobby((-0.48, 0.17),(-0.13, 0.12),(0.21, 0.05),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-1.00, -1.00),decoration:"arrow",angle:-2.35rad)
cetz.draw.content((-0.75, -0.91),angle:-2.35rad,[-k[0]])
cetz.draw.hobby((-0.89, -0.97),(-0.69, -0.77),stroke:stroke,mark: (end: ">"))
edge(node1.pos,(1.00, -1.00),decoration:"arrow",angle:2.76rad)
cetz.draw.content((0.77, -0.78),angle:2.76rad,[-k[0]])
cetz.draw.hobby((0.56, -0.76),(0.93, -0.91),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(-1.00, 0.00),decoration:"coil",angle:0.27rad)
cetz.draw.content((-0.75, -0.06),angle:0.27rad,[-k[2]])
cetz.draw.hobby((-0.89, -0.03),(-0.65, 0.03),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(1.00, 0.00),decoration:"coil",angle:1.76rad)
cetz.draw.content((1.07, 0.25),angle:1.76rad,[-k[2]])
cetz.draw.hobby((0.99, 0.37),(1.04, 0.11),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(1.00, 1.00),decoration:"arrow",angle:1.41rad)
cetz.draw.content((0.84, 0.75),angle:1.41rad,[p+k[2]])
cetz.draw.hobby((0.87, 0.57),(0.92, 0.91),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-1.00, 1.00),decoration:"arrow",angle:4.82rad)
cetz.draw.content((-1.09, 0.73),angle:4.82rad,[p+k[2]])
cetz.draw.hobby((-1.05, 0.89),(-1.01, 0.57),stroke:stroke,mark: (end: ">"))
})
let embedding3i1=cetz.canvas(length:50%,{
let node0= (pos:(-0.51, -0.74))
node(node0.pos)
let node1= (pos:(0.60, -0.60))
node(node1.pos)
let node2= (pos:(-0.75, 0.74))
node(node2.pos)
let node3= (pos:(-0.06, 0.54))
node(node3.pos)
let node4= (pos:(-0.55, 0.05))
node(node4.pos)
let node5= (pos:(0.73, 0.51))
node(node5.pos)
edge(node1.pos,(0.05, -0.69),node0.pos,decoration:"arrow",angle:-3.02rad)
cetz.draw.content((0.07, -0.81),angle:-3.02rad,[q+k[0]])
cetz.draw.hobby((0.50, -0.68),(0.06, -0.75),(-0.39, -0.80),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-0.55, -0.36),node4.pos,decoration:"wave",angle:4.77rad)
cetz.draw.content((-0.67, -0.36),angle:4.77rad,[q])
cetz.draw.hobby((-0.58, -0.67),(-0.61, -0.35),(-0.62, -0.02),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(0.69, -0.06),node1.pos,decoration:"wave",angle:1.45rad)
cetz.draw.content((0.81, -0.07),angle:1.45rad,[q])
cetz.draw.hobby((0.79, 0.39),(0.75, -0.06),(0.68, -0.50),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(-0.40, 0.70),node2.pos,decoration:"coil",angle:-0.28rad)
cetz.draw.content((-0.36, 0.82),angle:-0.28rad,[k[2]])
cetz.draw.hobby((-0.09, 0.63),(-0.37, 0.76),(-0.68, 0.80),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(-0.72, 0.38),node4.pos,decoration:"arrow",angle:4.99rad)
cetz.draw.content((-0.83, 0.35),angle:4.99rad,[p+k[2]])
cetz.draw.hobby((-0.81, 0.67),(-0.77, 0.36),(-0.65, 0.08),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-0.28, 0.27),node3.pos,decoration:"arrow",angle:0.78rad)
cetz.draw.content((-0.20, 0.19),angle:0.78rad,[p+q+k[2]])
cetz.draw.hobby((-0.46, 0.04),(-0.24, 0.23),(-0.05, 0.45),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.35, 0.54),node5.pos,decoration:"arrow",angle:-0.05rad)
cetz.draw.content((0.35, 0.66),angle:-0.05rad,[p+q])
cetz.draw.hobby((0.01, 0.61),(0.34, 0.60),(0.66, 0.58),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-1.00, -1.00),decoration:"arrow",angle:-2.66rad)
cetz.draw.content((-0.70, -0.98),angle:-2.66rad,[-k[0]])
cetz.draw.hobby((-0.88, -1.01),(-0.57, -0.84),stroke:stroke,mark: (end: ">"))
edge(node1.pos,(1.00, -1.00),decoration:"arrow",angle:2.36rad)
cetz.draw.content((0.88, -0.72),angle:2.36rad,[-k[0]])
cetz.draw.hobby((0.71, -0.63),(0.97, -0.89),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(1.00, 1.00),decoration:"arrow",angle:1.08rad)
cetz.draw.content((0.76, 0.81),angle:1.08rad,[p])
cetz.draw.hobby((0.73, 0.62),(0.90, 0.94),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(-1.00, 1.00),decoration:"arrow",angle:5.48rad)
cetz.draw.content((-0.96, 0.79),angle:5.48rad,[p])
cetz.draw.hobby((-0.97, 0.89),(-0.86, 0.77),stroke:stroke,mark: (end: ">"))
})
let embedding3f0=cetz.canvas(length:50%,{
let node0= (pos:(0.66, -0.66))
node(node0.pos)
let node1= (pos:(-0.45, -0.78))
node(node1.pos)
let node2= (pos:(0.57, 0.12))
node(node2.pos)
let node3= (pos:(-0.91, 0.46))
node(node3.pos)
let node4= (pos:(0.95, 0.48))
node(node4.pos)
let node5= (pos:(-0.28, -0.03))
node(node5.pos)
edge(node0.pos,(0.11, -0.75),node1.pos,decoration:"arrow",angle:-3.03rad)
edge(node0.pos,(0.85, -0.14),node4.pos,decoration:"wave",angle:-1.83rad)
edge(node5.pos,(-0.38, -0.41),node1.pos,decoration:"wave",angle:1.36rad)
edge(node2.pos,(0.71, 0.36),node4.pos,decoration:"arrow",angle:0.74rad)
edge(node5.pos,(0.14, 0.06),node2.pos,decoration:"arrow",angle:0.17rad)
edge(node3.pos,(-0.59, 0.24),node5.pos,decoration:"arrow",angle:-0.65rad)
edge(node1.pos,(-1.00, -1.00),decoration:"arrow",angle:-2.76rad)
edge(node0.pos,(1.00, -1.00),decoration:"arrow",angle:2.35rad)
edge(node3.pos,(-1.00, 0.00),decoration:"coil",angle:1.37rad)
edge(node2.pos,(1.00, 0.00),decoration:"coil",angle:2.87rad)
edge(node4.pos,(1.00, 1.00),decoration:"arrow",angle:1.47rad)
edge(node3.pos,(-1.00, 1.00),decoration:"arrow",angle:4.88rad)
})
let embedding3f1=cetz.canvas(length:50%,{
let node0= (pos:(0.50, -0.74))
node(node0.pos)
let node1= (pos:(-0.60, -0.60))
node(node1.pos)
let node2= (pos:(0.06, 0.55))
node(node2.pos)
let node3= (pos:(0.75, 0.74))
node(node3.pos)
let node4= (pos:(0.54, 0.06))
node(node4.pos)
let node5= (pos:(-0.74, 0.51))
node(node5.pos)
edge(node0.pos,(-0.06, -0.69),node1.pos,decoration:"arrow",angle:3.02rad)
edge(node0.pos,(0.54, -0.35),node4.pos,decoration:"wave",angle:-1.62rad)
edge(node5.pos,(-0.70, -0.05),node1.pos,decoration:"wave",angle:1.69rad)
edge(node3.pos,(0.39, 0.71),node2.pos,decoration:"coil",angle:0.27rad)
edge(node2.pos,(0.27, 0.28),node4.pos,decoration:"arrow",angle:5.49rad)
edge(node5.pos,(-0.35, 0.55),node2.pos,decoration:"arrow",angle:0.06rad)
edge(node4.pos,(0.71, 0.39),node3.pos,decoration:"arrow",angle:1.29rad)
edge(node1.pos,(-1.00, -1.00),decoration:"arrow",angle:-2.35rad)
edge(node0.pos,(1.00, -1.00),decoration:"arrow",angle:2.66rad)
edge(node3.pos,(1.00, 1.00),decoration:"arrow",angle:0.79rad)
edge(node5.pos,(-1.00, 1.00),decoration:"arrow",angle:5.20rad)
})
let embedding4i0=cetz.canvas(length:50%,{
let node0= (pos:(-0.62, -0.63))
node(node0.pos)
let node1= (pos:(0.52, -0.77))
node(node1.pos)
let node2= (pos:(-0.48, 0.29))
node(node2.pos)
let node3= (pos:(0.57, 0.66))
node(node3.pos)
let node4= (pos:(-0.93, 0.49))
node(node4.pos)
let node5= (pos:(0.74, -0.05))
node(node5.pos)
edge(node1.pos,(-0.05, -0.72),node0.pos,decoration:"arrow",angle:3.02rad)
cetz.draw.content((-0.07, -0.84),angle:3.02rad,[q+k[0]])
cetz.draw.hobby((0.40, -0.83),(-0.06, -0.78),(-0.52, -0.71),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-0.79, -0.10),node4.pos,decoration:"wave",angle:4.98rad)
cetz.draw.content((-0.91, -0.13),angle:4.98rad,[q])
cetz.draw.hobby((-0.72, -0.54),(-0.86, -0.09),(-0.97, 0.36),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(0.64, -0.43),node1.pos,decoration:"wave",angle:1.27rad)
cetz.draw.content((0.76, -0.46),angle:1.27rad,[q])
cetz.draw.hobby((0.78, -0.14),(0.70, -0.44),(0.60, -0.72),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.05, 0.49),node2.pos,decoration:"coil",angle:0.34rad)
cetz.draw.content((0.01, 0.61),angle:0.34rad,[-p-q])
cetz.draw.hobby((0.45, 0.69),(0.02, 0.55),(-0.40, 0.38),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(-0.67, 0.47),node4.pos,decoration:"arrow",angle:2.73rad)
cetz.draw.content((-0.63, 0.58),angle:2.73rad,[-p-q+k[3]])
cetz.draw.hobby((-0.46, 0.37),(-0.64, 0.52),(-0.88, 0.56),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.67, 0.32),node5.pos,decoration:"arrow",angle:-1.34rad)
cetz.draw.content((0.79, 0.35),angle:-1.34rad,[q+k[3]])
cetz.draw.hobby((0.65, 0.61),(0.73, 0.32),(0.79, 0.03),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-1.00, -1.00),decoration:"arrow",angle:-2.37rad)
cetz.draw.content((-0.73, -0.90),angle:-2.37rad,[-k[0]])
cetz.draw.hobby((-0.89, -0.97),(-0.65, -0.75),stroke:stroke,mark: (end: ">"))
edge(node1.pos,(1.00, -1.00),decoration:"arrow",angle:2.70rad)
cetz.draw.content((0.81, -0.78),angle:2.70rad,[-k[0]])
cetz.draw.hobby((0.64, -0.76),(0.94, -0.90),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(1.00, 0.00),decoration:"arrow",angle:0.20rad)
cetz.draw.content((0.85, 0.09),angle:0.20rad,[k[3]])
cetz.draw.hobby((0.83, 0.03),(0.89, 0.04),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(-1.00, 0.00),decoration:"arrow",angle:0.50rad)
cetz.draw.content((-0.68, 0.04),angle:0.50rad,[k[3]])
cetz.draw.hobby((-0.88, -0.00),(-0.54, 0.19),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-1.00, 1.00),decoration:"arrow",angle:1.71rad)
cetz.draw.content((-1.08, 0.73),angle:1.71rad,[p-k[3]])
cetz.draw.hobby((-1.05, 0.89),(-1.00, 0.58),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(1.00, 1.00),decoration:"arrow",angle:3.81rad)
cetz.draw.content((0.71, 0.93),angle:3.81rad,[p-k[3]])
cetz.draw.hobby((0.61, 0.77),(0.88, 0.99),stroke:stroke,mark: (end: ">"))
})
let embedding4f0=cetz.canvas(length:50%,{
let node0= (pos:(0.61, -0.81))
node(node0.pos)
let node1= (pos:(-0.30, -0.63))
node(node1.pos)
let node2= (pos:(-0.87, 0.50))
node(node2.pos)
let node3= (pos:(-0.03, 0.39))
node(node3.pos)
let node4= (pos:(0.68, -0.11))
node(node4.pos)
let node5= (pos:(0.52, 0.54))
node(node5.pos)
edge(node0.pos,(0.14, -0.76),node1.pos,decoration:"arrow",angle:2.94rad)
edge(node0.pos,(0.67, -0.47),node4.pos,decoration:"wave",angle:-1.68rad)
edge(node5.pos,(0.09, -0.07),node1.pos,decoration:"wave",angle:0.96rad)
edge(node3.pos,(-0.46, 0.46),node2.pos,decoration:"coil",angle:-0.13rad)
edge(node4.pos,(0.32, 0.12),node3.pos,decoration:"arrow",angle:2.53rad)
edge(node3.pos,(0.23, 0.55),node5.pos,decoration:"arrow",angle:0.25rad)
edge(node1.pos,(-1.00, -1.00),decoration:"arrow",angle:-2.66rad)
edge(node0.pos,(1.00, -1.00),decoration:"arrow",angle:2.70rad)
edge(node2.pos,(-1.00, 0.00),decoration:"arrow",angle:-1.82rad)
edge(node4.pos,(1.00, 0.00),decoration:"arrow",angle:3.48rad)
edge(node5.pos,(1.00, 1.00),decoration:"arrow",angle:0.77rad)
edge(node2.pos,(-1.00, 1.00),decoration:"arrow",angle:4.97rad)
})
let embedding4f1=cetz.canvas(length:50%,{
let node0= (pos:(0.48, -0.70))
node(node0.pos)
let node1= (pos:(-0.49, -0.74))
node(node1.pos)
let node2= (pos:(0.65, 0.68))
node(node2.pos)
let node3= (pos:(-0.63, 0.69))
node(node3.pos)
let node4= (pos:(0.12, 0.27))
node(node4.pos)
let node5= (pos:(-0.19, 0.09))
node(node5.pos)
edge(node0.pos,(-0.00, -0.76),node1.pos,decoration:"arrow",angle:-3.09rad)
edge(node0.pos,(0.33, -0.22),node4.pos,decoration:"wave",angle:-1.22rad)
edge(node5.pos,(-0.36, -0.34),node1.pos,decoration:"wave",angle:1.23rad)
edge(node2.pos,(0.38, 0.56),node4.pos,decoration:"arrow",angle:3.74rad)
edge(node5.pos,(0.34, 0.35),node2.pos,decoration:"arrow",angle:0.66rad)
edge(node4.pos,(-0.24, 0.55),node3.pos,decoration:"arrow",angle:2.64rad)
edge(node3.pos,(-0.47, 0.36),node5.pos,decoration:"arrow",angle:5.32rad)
edge(node1.pos,(-1.00, -1.00),decoration:"arrow",angle:-2.68rad)
edge(node0.pos,(1.00, -1.00),decoration:"arrow",angle:2.61rad)
edge(node3.pos,(-1.00, 1.00),decoration:"coil",angle:5.60rad)
edge(node2.pos,(1.00, 1.00),decoration:"coil",angle:3.88rad)
})
let embedding4f2=cetz.canvas(length:50%,{
let node0= (pos:(0.31, -0.78))
node(node0.pos)
let node1= (pos:(-0.69, -0.64))
node(node1.pos)
let node2= (pos:(-0.01, 0.44))
node(node2.pos)
let node3= (pos:(0.85, 0.51))
node(node3.pos)
let node4= (pos:(-0.42, -0.13))
node(node4.pos)
let node5= (pos:(-0.78, 0.53))
node(node5.pos)
edge(node0.pos,(-0.20, -0.76),node1.pos,decoration:"arrow",angle:3.00rad)
edge(node0.pos,(-0.03, -0.45),node4.pos,decoration:"wave",angle:-0.73rad)
edge(node5.pos,(-0.79, -0.06),node1.pos,decoration:"wave",angle:1.65rad)
edge(node3.pos,(0.43, 0.49),node2.pos,decoration:"coil",angle:0.08rad)
edge(node2.pos,(-0.20, 0.15),node4.pos,decoration:"arrow",angle:-2.19rad)
edge(node5.pos,(-0.40, 0.54),node2.pos,decoration:"arrow",angle:-0.11rad)
edge(node1.pos,(-1.00, -1.00),decoration:"arrow",angle:-2.28rad)
edge(node0.pos,(1.00, -1.00),decoration:"arrow",angle:2.83rad)
edge(node4.pos,(-1.00, 0.00),decoration:"arrow",angle:2.92rad)
edge(node3.pos,(1.00, 0.00),decoration:"arrow",angle:1.85rad)
edge(node3.pos,(1.00, 1.00),decoration:"arrow",angle:1.28rad)
edge(node5.pos,(-1.00, 1.00),decoration:"arrow",angle:5.14rad)
})
let embedding5i0=cetz.canvas(length:50%,{
let node0= (pos:(-0.52, -0.77))
node(node0.pos)
let node1= (pos:(0.62, -0.63))
node(node1.pos)
let node2= (pos:(0.48, 0.29))
node(node2.pos)
let node3= (pos:(-0.57, 0.67))
node(node3.pos)
let node4= (pos:(-0.74, -0.05))
node(node4.pos)
let node5= (pos:(0.93, 0.49))
node(node5.pos)
edge(node1.pos,(0.05, -0.72),node0.pos,decoration:"arrow",angle:-3.02rad)
cetz.draw.content((0.07, -0.84),angle:-3.02rad,[q+k[0]])
cetz.draw.hobby((0.52, -0.71),(0.06, -0.78),(-0.40, -0.83),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-0.64, -0.42),node4.pos,decoration:"wave",angle:5.01rad)
cetz.draw.content((-0.75, -0.46),angle:5.01rad,[q])
cetz.draw.hobby((-0.60, -0.72),(-0.70, -0.43),(-0.78, -0.14),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(0.79, -0.10),node1.pos,decoration:"wave",angle:1.30rad)
cetz.draw.content((0.91, -0.13),angle:1.30rad,[q])
cetz.draw.hobby((0.97, 0.36),(0.86, -0.09),(0.72, -0.54),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(-0.04, 0.49),node2.pos,decoration:"coil",angle:2.80rad)
cetz.draw.content((-0.00, 0.61),angle:2.80rad,[p+q])
cetz.draw.hobby((-0.45, 0.69),(-0.02, 0.55),(0.40, 0.39),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(0.67, 0.47),node2.pos,decoration:"arrow",angle:3.55rad)
cetz.draw.content((0.63, 0.58),angle:3.55rad,[k[3]])
cetz.draw.hobby((0.88, 0.56),(0.64, 0.52),(0.46, 0.37),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-0.67, 0.32),node3.pos,decoration:"arrow",angle:1.34rad)
cetz.draw.content((-0.78, 0.35),angle:1.34rad,[p+2 q+k[3]])
cetz.draw.hobby((-0.79, 0.03),(-0.73, 0.32),(-0.65, 0.61),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-1.00, -1.00),decoration:"arrow",angle:-2.70rad)
cetz.draw.content((-0.71, -1.00),angle:-2.70rad,[-k[0]])
cetz.draw.hobby((-0.88, -1.01),(-0.59, -0.87),stroke:stroke,mark: (end: ">"))
edge(node1.pos,(1.00, -1.00),decoration:"arrow",angle:2.37rad)
cetz.draw.content((0.89, -0.73),angle:2.37rad,[-k[0]])
cetz.draw.hobby((0.74, -0.66),(0.97, -0.89),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(1.00, 0.00),decoration:"arrow",angle:-0.51rad)
cetz.draw.content((0.80, 0.25),angle:-0.51rad,[p+q+k[3]])
cetz.draw.hobby((0.60, 0.29),(0.94, 0.10),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-1.00, 0.00),decoration:"arrow",angle:6.09rad)
cetz.draw.content((-0.89, -0.14),angle:6.09rad,[p+q+k[3]])
cetz.draw.hobby((-0.91, -0.08),(-0.85, -0.09),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(-1.00, 1.00),decoration:"arrow",angle:2.48rad)
cetz.draw.content((-0.86, 0.74),angle:2.48rad,[-q-k[3]])
cetz.draw.hobby((-0.96, 0.89),(-0.69, 0.68),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(1.00, 1.00),decoration:"arrow",angle:4.57rad)
cetz.draw.content((0.85, 0.76),angle:4.57rad,[-q-k[3]])
cetz.draw.hobby((0.88, 0.60),(0.93, 0.91),stroke:stroke,mark: (end: ">"))
})
let embedding5f0=cetz.canvas(length:50%,{
let node0= (pos:(0.31, -0.78))
node(node0.pos)
let node1= (pos:(-0.69, -0.64))
node(node1.pos)
let node2= (pos:(0.85, 0.51))
node(node2.pos)
let node3= (pos:(-0.01, 0.44))
node(node3.pos)
let node4= (pos:(-0.42, -0.13))
node(node4.pos)
let node5= (pos:(-0.78, 0.53))
node(node5.pos)
edge(node0.pos,(-0.20, -0.76),node1.pos,decoration:"arrow",angle:3.00rad)
edge(node0.pos,(-0.03, -0.45),node4.pos,decoration:"wave",angle:-0.73rad)
edge(node5.pos,(-0.78, -0.05),node1.pos,decoration:"wave",angle:1.65rad)
edge(node3.pos,(0.43, 0.49),node2.pos,decoration:"coil",angle:3.22rad)
edge(node4.pos,(-0.20, 0.14),node3.pos,decoration:"arrow",angle:0.96rad)
edge(node3.pos,(-0.40, 0.54),node5.pos,decoration:"arrow",angle:3.04rad)
edge(node1.pos,(-1.00, -1.00),decoration:"arrow",angle:-2.27rad)
edge(node0.pos,(1.00, -1.00),decoration:"arrow",angle:2.83rad)
edge(node2.pos,(1.00, 0.00),decoration:"arrow",angle:-1.29rad)
edge(node4.pos,(-1.00, 0.00),decoration:"arrow",angle:6.06rad)
edge(node5.pos,(-1.00, 1.00),decoration:"arrow",angle:2.01rad)
edge(node2.pos,(1.00, 1.00),decoration:"arrow",angle:4.43rad)
})
let embedding5f1=cetz.canvas(length:50%,{
let node0= (pos:(0.48, -0.70))
node(node0.pos)
let node1= (pos:(-0.49, -0.74))
node(node1.pos)
let node2= (pos:(-0.63, 0.69))
node(node2.pos)
let node3= (pos:(0.65, 0.70))
node(node3.pos)
let node4= (pos:(0.12, 0.26))
node(node4.pos)
let node5= (pos:(-0.19, 0.09))
node(node5.pos)
edge(node0.pos,(-0.00, -0.76),node1.pos,decoration:"arrow",angle:-3.09rad)
edge(node0.pos,(0.33, -0.23),node4.pos,decoration:"wave",angle:-1.22rad)
edge(node5.pos,(-0.37, -0.33),node1.pos,decoration:"wave",angle:1.23rad)
edge(node2.pos,(-0.24, 0.54),node4.pos,decoration:"arrow",angle:-0.52rad)
edge(node5.pos,(-0.48, 0.37),node2.pos,decoration:"arrow",angle:2.17rad)
edge(node4.pos,(0.38, 0.56),node3.pos,decoration:"arrow",angle:0.64rad)
edge(node3.pos,(0.33, 0.37),node5.pos,decoration:"arrow",angle:-2.48rad)
edge(node1.pos,(-1.00, -1.00),decoration:"arrow",angle:-2.68rad)
edge(node0.pos,(1.00, -1.00),decoration:"arrow",angle:2.61rad)
edge(node3.pos,(1.00, 1.00),decoration:"coil",angle:3.85rad)
edge(node2.pos,(-1.00, 1.00),decoration:"coil",angle:5.60rad)
})
let embedding5f2=cetz.canvas(length:50%,{
let node0= (pos:(0.61, -0.81))
node(node0.pos)
let node1= (pos:(-0.30, -0.63))
node(node1.pos)
let node2= (pos:(-0.03, 0.39))
node(node2.pos)
let node3= (pos:(-0.87, 0.50))
node(node3.pos)
let node4= (pos:(0.68, -0.11))
node(node4.pos)
let node5= (pos:(0.52, 0.54))
node(node5.pos)
edge(node0.pos,(0.14, -0.76),node1.pos,decoration:"arrow",angle:2.94rad)
edge(node0.pos,(0.67, -0.47),node4.pos,decoration:"wave",angle:-1.68rad)
edge(node5.pos,(0.09, -0.07),node1.pos,decoration:"wave",angle:0.96rad)
edge(node3.pos,(-0.46, 0.46),node2.pos,decoration:"coil",angle:3.01rad)
edge(node2.pos,(0.32, 0.12),node4.pos,decoration:"arrow",angle:5.67rad)
edge(node5.pos,(0.23, 0.55),node2.pos,decoration:"arrow",angle:3.40rad)
edge(node1.pos,(-1.00, -1.00),decoration:"arrow",angle:-2.66rad)
edge(node0.pos,(1.00, -1.00),decoration:"arrow",angle:2.69rad)
edge(node4.pos,(1.00, 0.00),decoration:"arrow",angle:0.34rad)
edge(node3.pos,(-1.00, 0.00),decoration:"arrow",angle:1.32rad)
edge(node3.pos,(-1.00, 1.00),decoration:"arrow",angle:1.83rad)
edge(node5.pos,(1.00, 1.00),decoration:"arrow",angle:3.91rad)
})
let embedding6i0=cetz.canvas(length:50%,{
let node0= (pos:(-0.59, -0.67))
node(node0.pos)
let node1= (pos:(0.47, -0.87))
node(node1.pos)
let node2= (pos:(0.54, 0.17))
node(node2.pos)
let node3= (pos:(0.06, 0.50))
node(node3.pos)
let node4= (pos:(-0.60, 0.42))
node(node4.pos)
let node5= (pos:(0.31, -0.21))
node(node5.pos)
edge(node1.pos,(-0.08, -0.81),node0.pos,decoration:"arrow",angle:2.95rad)
cetz.draw.content((-0.10, -0.93),angle:2.95rad,[q+k[0]])
cetz.draw.hobby((0.35, -0.93),(-0.08, -0.87),(-0.51, -0.76),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-0.62, -0.13),node4.pos,decoration:"wave",angle:4.73rad)
cetz.draw.content((-0.74, -0.13),angle:4.73rad,[q])
cetz.draw.hobby((-0.66, -0.57),(-0.68, -0.13),(-0.67, 0.32),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(0.40, -0.56),node1.pos,decoration:"wave",angle:1.79rad)
cetz.draw.content((0.52, -0.53),angle:1.79rad,[q])
cetz.draw.hobby((0.39, -0.26),(0.46, -0.53),(0.51, -0.80),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(-0.09, 0.26),node4.pos,decoration:"arrow",angle:2.92rad)
cetz.draw.content((-0.11, 0.14),angle:2.92rad,[-1/2 p-1/2 q+1/2 k[3]])
cetz.draw.hobby((0.42, 0.12),(-0.06, 0.19),(-0.52, 0.32),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(0.54, -0.08),node2.pos,decoration:"arrow",angle:1.07rad)
cetz.draw.content((0.65, -0.14),angle:1.07rad,[k[3]])
cetz.draw.hobby((0.38, -0.27),(0.59, -0.12),(0.62, 0.14),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.15, 0.15),node5.pos,decoration:"arrow",angle:5.05rad)
cetz.draw.content((0.03, 0.11),angle:5.05rad,[q+k[3]])
cetz.draw.hobby((0.01, 0.42),(0.10, 0.11),(0.22, -0.17),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-1.00, -1.00),decoration:"arrow",angle:-2.47rad)
cetz.draw.content((-0.72, -0.93),angle:-2.47rad,[-k[0]])
cetz.draw.hobby((-0.88, -0.98),(-0.63, -0.78),stroke:stroke,mark: (end: ">"))
edge(node1.pos,(1.00, -1.00),decoration:"arrow",angle:2.91rad)
cetz.draw.content((0.76, -0.82),angle:2.91rad,[-k[0]])
cetz.draw.hobby((0.58, -0.84),(0.92, -0.92),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(-1.00, 0.00),decoration:"coil",angle:0.44rad)
cetz.draw.content((-0.42, 0.14),angle:0.44rad,[1/2 p+1/2 q+1/2 k[3]])
cetz.draw.hobby((-0.88, -0.01),(-0.01, 0.41),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(1.00, 0.00),decoration:"coil",angle:2.78rad)
cetz.draw.content((0.81, 0.20),angle:2.78rad,[1/2 p+1/2 q+1/2 k[3]])
cetz.draw.hobby((0.65, 0.19),(0.93, 0.09),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-1.00, 1.00),decoration:"arrow",angle:2.17rad)
cetz.draw.content((-0.90, 0.64),angle:2.17rad,[1/2 p-1/2 q-1/2 k[3]])
cetz.draw.hobby((-0.99, 0.88),(-0.71, 0.47),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(1.00, 1.00),decoration:"arrow",angle:3.63rad)
cetz.draw.content((0.47, 0.86),angle:3.63rad,[1/2 p-1/2 q-1/2 k[3]])
cetz.draw.hobby((0.12, 0.60),(0.88, 1.01),stroke:stroke,mark: (end: ">"))
})
let embedding6f0=cetz.canvas(length:50%,{
let node0= (pos:(0.59, -0.67))
node(node0.pos)
let node1= (pos:(-0.47, -0.87))
node(node1.pos)
let node2= (pos:(-0.06, 0.50))
node(node2.pos)
let node3= (pos:(-0.54, 0.17))
node(node3.pos)
let node4= (pos:(0.61, 0.42))
node(node4.pos)
let node5= (pos:(-0.31, -0.22))
node(node5.pos)
edge(node0.pos,(0.08, -0.81),node1.pos,decoration:"arrow",angle:-2.95rad)
edge(node0.pos,(0.62, -0.13),node4.pos,decoration:"wave",angle:-1.59rad)
edge(node5.pos,(-0.40, -0.56),node1.pos,decoration:"wave",angle:1.34rad)
edge(node5.pos,(-0.14, 0.14),node2.pos,decoration:"arrow",angle:1.24rad)
edge(node4.pos,(0.09, 0.26),node3.pos,decoration:"arrow",angle:-2.92rad)
edge(node3.pos,(-0.54, -0.08),node5.pos,decoration:"arrow",angle:5.21rad)
edge(node1.pos,(-1.00, -1.00),decoration:"arrow",angle:-2.91rad)
edge(node0.pos,(1.00, -1.00),decoration:"arrow",angle:2.47rad)
edge(node3.pos,(-1.00, 0.00),decoration:"coil",angle:0.35rad)
edge(node2.pos,(1.00, 0.00),decoration:"coil",angle:2.70rad)
edge(node2.pos,(-1.00, 1.00),decoration:"arrow",angle:2.65rad)
edge(node4.pos,(1.00, 1.00),decoration:"arrow",angle:4.12rad)
})
let embedding7i0=cetz.canvas(length:50%,{
let node0= (pos:(-0.60, -0.60))
node(node0.pos)
let node1= (pos:(0.50, -0.74))
node(node1.pos)
let node2= (pos:(0.06, 0.54))
node(node2.pos)
let node3= (pos:(0.74, 0.74))
node(node3.pos)
let node4= (pos:(-0.74, 0.50))
node(node4.pos)
let node5= (pos:(0.55, 0.06))
node(node5.pos)
edge(node1.pos,(-0.06, -0.69),node0.pos,decoration:"arrow",angle:3.02rad)
cetz.draw.content((-0.07, -0.81),angle:3.02rad,[q+k[0]])
cetz.draw.hobby((0.39, -0.79),(-0.06, -0.75),(-0.50, -0.68),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-0.69, -0.06),node4.pos,decoration:"wave",angle:4.84rad)
cetz.draw.content((-0.81, -0.07),angle:4.84rad,[q])
cetz.draw.hobby((-0.68, -0.51),(-0.75, -0.06),(-0.79, 0.39),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(0.55, -0.35),node1.pos,decoration:"wave",angle:1.51rad)
cetz.draw.content((0.67, -0.36),angle:1.51rad,[q])
cetz.draw.hobby((0.61, -0.02),(0.61, -0.35),(0.58, -0.67),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.39, 0.70),node2.pos,decoration:"coil",angle:0.29rad)
cetz.draw.content((0.35, 0.82),angle:0.29rad,[-p-q-k[3]])
cetz.draw.hobby((0.67, 0.81),(0.37, 0.76),(0.09, 0.63),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(-0.35, 0.54),node4.pos,decoration:"arrow",angle:3.19rad)
cetz.draw.content((-0.36, 0.66),angle:3.19rad,[-p-q])
cetz.draw.hobby((-0.02, 0.60),(-0.34, 0.60),(-0.67, 0.57),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(0.28, 0.27),node2.pos,decoration:"arrow",angle:2.36rad)
cetz.draw.content((0.19, 0.19),angle:2.36rad,[k[3]])
cetz.draw.hobby((0.46, 0.04),(0.23, 0.23),(0.05, 0.45),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(0.71, 0.39),node5.pos,decoration:"arrow",angle:-1.84rad)
cetz.draw.content((0.83, 0.35),angle:-1.84rad,[q+k[3]])
cetz.draw.hobby((0.81, 0.67),(0.77, 0.37),(0.64, 0.08),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-1.00, -1.00),decoration:"arrow",angle:-2.36rad)
cetz.draw.content((-0.72, -0.89),angle:-2.36rad,[-k[0]])
cetz.draw.hobby((-0.89, -0.97),(-0.63, -0.72),stroke:stroke,mark: (end: ">"))
edge(node1.pos,(1.00, -1.00),decoration:"arrow",angle:2.66rad)
cetz.draw.content((0.81, -0.76),angle:2.66rad,[-k[0]])
cetz.draw.hobby((0.62, -0.73),(0.94, -0.90),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-1.00, 1.00),decoration:"arrow",angle:2.06rad)
cetz.draw.content((-0.98, 0.70),angle:2.06rad,[p])
cetz.draw.hobby((-1.01, 0.88),(-0.84, 0.56),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(1.00, 1.00),decoration:"arrow",angle:3.93rad)
cetz.draw.content((0.79, 0.96),angle:3.93rad,[p])
cetz.draw.hobby((0.77, 0.86),(0.89, 0.97),stroke:stroke,mark: (end: ">"))
})
let embedding7i1=cetz.canvas(length:50%,{
let node0= (pos:(-0.45, -0.78))
node(node0.pos)
let node1= (pos:(0.66, -0.66))
node(node1.pos)
let node2= (pos:(0.57, 0.12))
node(node2.pos)
let node3= (pos:(-0.91, 0.46))
node(node3.pos)
let node4= (pos:(-0.28, -0.03))
node(node4.pos)
let node5= (pos:(0.94, 0.48))
node(node5.pos)
edge(node1.pos,(0.11, -0.75),node0.pos,decoration:"arrow",angle:-3.03rad)
cetz.draw.content((0.13, -0.87),angle:-3.03rad,[q+k[0]])
cetz.draw.hobby((0.56, -0.74),(0.12, -0.81),(-0.33, -0.84),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-0.38, -0.41),node4.pos,decoration:"wave",angle:4.50rad)
cetz.draw.content((-0.50, -0.38),angle:4.50rad,[q])
cetz.draw.hobby((-0.50, -0.70),(-0.44, -0.39),(-0.36, -0.08),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(0.84, -0.13),node1.pos,decoration:"wave",angle:1.32rad)
cetz.draw.content((0.96, -0.17),angle:1.32rad,[q])
cetz.draw.hobby((0.99, 0.35),(0.91, -0.12),(0.76, -0.57),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(0.14, 0.06),node4.pos,decoration:"arrow",angle:3.31rad)
cetz.draw.content((0.12, 0.18),angle:3.31rad,[-p-q])
cetz.draw.hobby((0.48, 0.17),(0.13, 0.12),(-0.21, 0.05),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(0.71, 0.36),node2.pos,decoration:"arrow",angle:3.89rad)
cetz.draw.content((0.63, 0.45),angle:3.89rad,[k[3]])
cetz.draw.hobby((0.87, 0.52),(0.66, 0.40),(0.53, 0.19),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-0.60, 0.23),node3.pos,decoration:"arrow",angle:2.49rad)
cetz.draw.content((-0.52, 0.33),angle:2.49rad,[-p])
cetz.draw.hobby((-0.30, 0.07),(-0.55, 0.27),(-0.81, 0.46),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-1.00, -1.00),decoration:"arrow",angle:-2.77rad)
cetz.draw.content((-0.68, -1.00),angle:-2.77rad,[-k[0]])
cetz.draw.hobby((-0.88, -1.02),(-0.52, -0.88),stroke:stroke,mark: (end: ">"))
edge(node1.pos,(1.00, -1.00),decoration:"arrow",angle:2.35rad)
cetz.draw.content((0.92, -0.74),angle:2.35rad,[-k[0]])
cetz.draw.hobby((0.77, -0.69),(0.97, -0.89),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(-1.00, 0.00),decoration:"coil",angle:1.38rad)
cetz.draw.content((-0.84, 0.20),angle:1.38rad,[p+q+k[3]])
cetz.draw.hobby((-0.92, 0.09),(-0.87, 0.35),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(1.00, 0.00),decoration:"coil",angle:2.87rad)
cetz.draw.content((0.82, 0.17),angle:2.87rad,[p+q+k[3]])
cetz.draw.hobby((0.68, 0.15),(0.92, 0.08),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(-1.00, 1.00),decoration:"arrow",angle:1.74rad)
cetz.draw.content((-1.07, 0.71),angle:1.74rad,[-q-k[3]])
cetz.draw.hobby((-1.04, 0.89),(-0.99, 0.55),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(1.00, 1.00),decoration:"arrow",angle:4.61rad)
cetz.draw.content((0.85, 0.75),angle:4.61rad,[-q-k[3]])
cetz.draw.hobby((0.90, 0.58),(0.93, 0.91),stroke:stroke,mark: (end: ">"))
})
let embedding7f0=cetz.canvas(length:50%,{
let node0= (pos:(0.61, -0.60))
node(node0.pos)
let node1= (pos:(-0.50, -0.73))
node(node1.pos)
let node2= (pos:(-0.74, 0.76))
node(node2.pos)
let node3= (pos:(-0.04, 0.56))
node(node3.pos)
let node4= (pos:(0.75, 0.51))
node(node4.pos)
let node5= (pos:(-0.53, 0.07))
node(node5.pos)
edge(node0.pos,(0.05, -0.69),node1.pos,decoration:"arrow",angle:-3.02rad)
edge(node0.pos,(0.70, -0.05),node4.pos,decoration:"wave",angle:-1.70rad)
edge(node5.pos,(-0.54, -0.34),node1.pos,decoration:"wave",angle:1.61rad)
edge(node3.pos,(-0.38, 0.72),node2.pos,decoration:"coil",angle:-0.27rad)
edge(node5.pos,(-0.70, 0.40),node2.pos,decoration:"arrow",angle:1.85rad)
edge(node4.pos,(0.36, 0.56),node3.pos,decoration:"arrow",angle:3.07rad)
edge(node3.pos,(-0.26, 0.29),node5.pos,decoration:"arrow",angle:-2.36rad)
edge(node1.pos,(-1.00, -1.00),decoration:"arrow",angle:-2.64rad)
edge(node0.pos,(1.00, -1.00),decoration:"arrow",angle:2.35rad)
edge(node2.pos,(-1.00, 1.00),decoration:"arrow",angle:2.40rad)
edge(node4.pos,(1.00, 1.00),decoration:"arrow",angle:4.23rad)
})
let embedding7f1=cetz.canvas(length:50%,{
let node0= (pos:(0.45, -0.78))
node(node0.pos)
let node1= (pos:(-0.66, -0.66))
node(node1.pos)
let node2= (pos:(0.91, 0.46))
node(node2.pos)
let node3= (pos:(-0.57, 0.12))
node(node3.pos)
let node4= (pos:(0.28, -0.02))
node(node4.pos)
let node5= (pos:(-0.94, 0.48))
node(node5.pos)
edge(node0.pos,(-0.11, -0.75),node1.pos,decoration:"arrow",angle:3.03rad)
edge(node0.pos,(0.38, -0.41),node4.pos,decoration:"wave",angle:-1.36rad)
edge(node5.pos,(-0.84, -0.13),node1.pos,decoration:"wave",angle:1.82rad)
edge(node2.pos,(0.59, 0.24),node4.pos,decoration:"arrow",angle:3.80rad)
edge(node4.pos,(-0.14, 0.06),node3.pos,decoration:"arrow",angle:2.97rad)
edge(node3.pos,(-0.71, 0.36),node5.pos,decoration:"arrow",angle:2.40rad)
edge(node1.pos,(-1.00, -1.00),decoration:"arrow",angle:-2.35rad)
edge(node0.pos,(1.00, -1.00),decoration:"arrow",angle:2.76rad)
edge(node3.pos,(-1.00, 0.00),decoration:"coil",angle:0.27rad)
edge(node2.pos,(1.00, 0.00),decoration:"coil",angle:1.76rad)
edge(node5.pos,(-1.00, 1.00),decoration:"arrow",angle:1.68rad)
edge(node2.pos,(1.00, 1.00),decoration:"arrow",angle:4.55rad)
})
let embedding8i0=cetz.canvas(length:50%,{
let node0= (pos:(-0.52, -0.83))
node(node0.pos)
let node1= (pos:(0.60, -0.66))
node(node1.pos)
let node2= (pos:(0.02, 0.16))
node(node2.pos)
let node3= (pos:(-0.02, 0.60))
node(node3.pos)
let node4= (pos:(-0.69, -0.16))
node(node4.pos)
let node5= (pos:(0.76, 0.44))
node(node5.pos)
edge(node1.pos,(0.04, -0.77),node0.pos,decoration:"arrow",angle:-2.99rad)
cetz.draw.content((0.06, -0.89),angle:-2.99rad,[q+k[0]])
cetz.draw.hobby((0.50, -0.75),(0.05, -0.83),(-0.41, -0.89),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-0.64, -0.51),node4.pos,decoration:"wave",angle:4.96rad)
cetz.draw.content((-0.75, -0.54),angle:4.96rad,[q])
cetz.draw.hobby((-0.61, -0.79),(-0.70, -0.52),(-0.75, -0.24),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(0.70, -0.13),node1.pos,decoration:"wave",angle:1.42rad)
cetz.draw.content((0.82, -0.15),angle:1.42rad,[q])
cetz.draw.hobby((0.81, 0.32),(0.77, -0.13),(0.68, -0.57),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(-0.12, 0.39),node2.pos,decoration:"coil",angle:1.59rad)
cetz.draw.content((-0.24, 0.38),angle:1.59rad,[-p-2 q-2 k[3]])
cetz.draw.hobby((-0.10, 0.60),(-0.17, 0.37),(-0.06, 0.15),stroke:stroke,mark: (end: ">"))
edge(node2.pos,(-0.35, -0.01),node4.pos,decoration:"arrow",angle:-2.71rad)
cetz.draw.content((-0.30, -0.11),angle:-2.71rad,[-p-2 q-k[3]])
cetz.draw.hobby((-0.03, 0.08),(-0.31, -0.06),(-0.60, -0.19),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(0.41, 0.30),node2.pos,decoration:"arrow",angle:-2.79rad)
cetz.draw.content((0.45, 0.19),angle:-2.79rad,[k[3]])
cetz.draw.hobby((0.71, 0.35),(0.41, 0.24),(0.11, 0.13),stroke:stroke,mark: (end: ">"))
edge(node0.pos,(-1.00, -1.00),decoration:"arrow",angle:-2.80rad)
cetz.draw.content((-0.72, -1.03),angle:-2.80rad,[-k[0]])
cetz.draw.hobby((-0.89, -1.02),(-0.60, -0.92),stroke:stroke,mark: (end: ">"))
edge(node1.pos,(1.00, -1.00),decoration:"arrow",angle:2.45rad)
cetz.draw.content((0.87, -0.74),angle:2.45rad,[-k[0]])
cetz.draw.hobby((0.71, -0.68),(0.96, -0.89),stroke:stroke,mark: (end: ">"))
edge(node4.pos,(-1.00, 0.00),decoration:"arrow",angle:2.65rad)
cetz.draw.content((-0.90, -0.19),angle:2.65rad,[p+q+k[3]])
cetz.draw.hobby((-0.94, -0.10),(-0.81, -0.17),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(1.00, 0.00),decoration:"arrow",angle:2.61rad)
cetz.draw.content((0.55, 0.40),angle:2.61rad,[p+q+k[3]])
cetz.draw.hobby((0.10, 0.60),(0.94, 0.10),stroke:stroke,mark: (end: ">"))
edge(node3.pos,(-1.00, 1.00),decoration:"arrow",angle:2.75rad)
cetz.draw.content((-0.55, 0.69),angle:2.75rad,[-q-k[3]])
cetz.draw.hobby((-0.93, 0.91),(-0.13, 0.58),stroke:stroke,mark: (end: ">"))
edge(node5.pos,(1.00, 1.00),decoration:"arrow",angle:4.31rad)
cetz.draw.content((0.77, 0.76),angle:4.31rad,[-q-k[3]])
cetz.draw.hobby((0.74, 0.55),(0.91, 0.93),stroke:stroke,mark: (end: ">"))
})
let embedding8f0=cetz.canvas(length:50%,{
let node0= (pos:(0.33, -0.64))
node(node0.pos)
let node1= (pos:(-0.59, -0.76))
node(node1.pos)
let node2= (pos:(0.63, 0.22))
node(node2.pos)
let node3= (pos:(0.54, 0.73))
node(node3.pos)
let node4= (pos:(-0.34, 0.47))
node(node4.pos)
let node5= (pos:(-0.55, 0.04))
node(node5.pos)
edge(node0.pos,(-0.12, -0.74),node1.pos,decoration:"arrow",angle:-3.02rad)
edge(node0.pos,(0.00, -0.10),node4.pos,decoration:"wave",angle:5.26rad)
edge(node5.pos,(-0.59, -0.37),node1.pos,decoration:"wave",angle:1.52rad)
edge(node3.pos,(0.67, 0.49),node2.pos,decoration:"coil",angle:1.76rad)
edge(node2.pos,(0.16, 0.35),node4.pos,decoration:"arrow",angle:2.88rad)
edge(node3.pos,(-0.00, 0.40),node5.pos,decoration:"arrow",angle:3.71rad)
edge(node1.pos,(-1.00, -1.00),decoration:"arrow",angle:-2.60rad)
edge(node0.pos,(1.00, -1.00),decoration:"arrow",angle:2.65rad)
edge(node5.pos,(-1.00, 0.00),decoration:"arrow",angle:-3.06rad)
edge(node2.pos,(1.00, 0.00),decoration:"arrow",angle:2.61rad)
edge(node4.pos,(-1.00, 1.00),decoration:"arrow",angle:2.46rad)
edge(node3.pos,(1.00, 1.00),decoration:"arrow",angle:3.66rad)
})
let embedding8f1=cetz.canvas(length:50%,{
let node0= (pos:(0.59, -0.76))
node(node0.pos)
let node1= (pos:(-0.33, -0.64))
node(node1.pos)
let node2= (pos:(-0.63, 0.22))
node(node2.pos)
let node3= (pos:(-0.54, 0.73))
node(node3.pos)
let node4= (pos:(0.55, 0.03))
node(node4.pos)
let node5= (pos:(0.34, 0.47))
node(node5.pos)
edge(node0.pos,(0.12, -0.73),node1.pos,decoration:"arrow",angle:3.02rad)
edge(node0.pos,(0.59, -0.37),node4.pos,decoration:"wave",angle:-1.52rad)
edge(node5.pos,(-0.00, -0.10),node1.pos,decoration:"wave",angle:1.03rad)
edge(node3.pos,(-0.66, 0.49),node2.pos,decoration:"coil",angle:1.38rad)
edge(node5.pos,(-0.16, 0.34),node2.pos,decoration:"arrow",angle:3.40rad)
edge(node4.pos,(0.00, 0.40),node3.pos,decoration:"arrow",angle:2.57rad)
edge(node1.pos,(-1.00, -1.00),decoration:"arrow",angle:-2.65rad)
edge(node0.pos,(1.00, -1.00),decoration:"arrow",angle:2.60rad)
edge(node2.pos,(-1.00, 0.00),decoration:"arrow",angle:-2.61rad)
edge(node4.pos,(1.00, 0.00),decoration:"arrow",angle:3.06rad)
edge(node3.pos,(-1.00, 1.00),decoration:"arrow",angle:2.62rad)
edge(node5.pos,(1.00, 1.00),decoration:"arrow",angle:3.82rad)
})
[= embedding 1 [1, -1, -1, -2] with multiplicity 2
 == initial
Denominator:
```mathematica
prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,p-k[3]]^-1 prop[0,p-2 k[3]]^-1 prop[0,p+q-k[3]]^-1
```Partial Fractioned Denominator:
```mathematica
-(2 dot[p,q]+2 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,p-k[3]]^-1 dot[p,p]^-1
	+(2 dot[p,q]+2 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,p+q-k[3]]^-1 dot[p,p]^-1
	-(2 dot[p,q]+2 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,p-k[3]]^-1 prop[0,p+q-k[3]]^-1 dot[p,p]^-1
	+(2 dot[p,q]+2 dot[q,q])^-1 prop[0,q+k[3]]^-1 prop[0,p-k[3]]^-1 prop[0,p+q-k[3]]^-1 dot[p,p]^-1
	+2 (1/2 dot[p,p]+2 dot[p,q]+2 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,p-2 k[3]]^-1 dot[p,p]^-1
	-(1/2 dot[p,p]+2 dot[p,q]+2 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,p+q-k[3]]^-1 dot[p,p]^-1
	+2 (1/2 dot[p,p]+2 dot[p,q]+2 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,p-2 k[3]]^-1 prop[0,p+q-k[3]]^-1 dot[p,p]^-1
	+2 (1/2 dot[p,p]+2 dot[p,q]+2 dot[q,q])^-1 prop[0,q+k[3]]^-1 prop[0,p-k[3]]^-1 prop[0,p-2 k[3]]^-1 dot[p,p]^-1
	-(1/2 dot[p,p]+2 dot[p,q]+2 dot[q,q])^-1 prop[0,q+k[3]]^-1 prop[0,p-k[3]]^-1 prop[0,p+q-k[3]]^-1 dot[p,p]^-1
	+2 (1/2 dot[p,p]+2 dot[p,q]+2 dot[q,q])^-1 prop[0,p-k[3]]^-1 prop[0,p-2 k[3]]^-1 prop[0,p+q-k[3]]^-1 dot[p,p]^-1
```]
grid(columns: cols,gutter: 20pt,box[#embedding1i0 -3+11+13],)
pagebreak()
[== final
Denominator: 
```mathematica
prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,p-k[3]]^-1 prop[0,p-q-k[3]]^-1 prop[0,p-q-2 k[3]]^-1
```]
grid(columns: cols,gutter: 20pt,box[#embedding1f0 -1+13+15],box[#embedding1f1 -1+11+17],)
pagebreak()
[= embedding 2 [1, 0, -2, -1] with multiplicity 2
 == initial
Denominator:
```mathematica
prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,-p+k[3]]^-1 prop[0,-p+2 k[3]]^-1 prop[0,-p+q+2 k[3]]^-1
```Partial Fractioned Denominator:
```mathematica
-(dot[p,q]+1/2 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,-p+2 k[3]]^-1 dot[p,p]^-1
	+(dot[p,q]+1/2 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,-p+q+2 k[3]]^-1 dot[p,p]^-1
	+2 (dot[p,q]+1/2 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,-p+2 k[3]]^-1 prop[0,-p+q+2 k[3]]^-1 dot[p,p]^-1
	-2 (dot[p,q]+1/2 dot[q,q])^-1 prop[0,q+k[3]]^-1 prop[0,-p+2 k[3]]^-1 prop[0,-p+q+2 k[3]]^-1 dot[p,p]^-1
	+1/2 (1/2 dot[p,p]+dot[p,q]+1/2 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,-p+k[3]]^-1 dot[p,p]^-1
	-(1/2 dot[p,p]+dot[p,q]+1/2 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,-p+q+2 k[3]]^-1 dot[p,p]^-1
	-(1/2 dot[p,p]+dot[p,q]+1/2 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,-p+k[3]]^-1 prop[0,-p+q+2 k[3]]^-1 dot[p,p]^-1
	-(1/2 dot[p,p]+dot[p,q]+1/2 dot[q,q])^-1 prop[0,q+k[3]]^-1 prop[0,-p+k[3]]^-1 prop[0,-p+2 k[3]]^-1 dot[p,p]^-1
	+2 (1/2 dot[p,p]+dot[p,q]+1/2 dot[q,q])^-1 prop[0,q+k[3]]^-1 prop[0,-p+2 k[3]]^-1 prop[0,-p+q+2 k[3]]^-1 dot[p,p]^-1
	+2 (1/2 dot[p,p]+dot[p,q]+1/2 dot[q,q])^-1 prop[0,-p+k[3]]^-1 prop[0,-p+2 k[3]]^-1 prop[0,-p+q+2 k[3]]^-1 dot[p,p]^-1
```]
grid(columns: cols,gutter: 20pt,box[#embedding2i0 -3-9+13],)
pagebreak()
[== final
Denominator: 
```mathematica
prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,-p+q+k[3]]^-1 prop[0,-p+q+2 k[3]]^-1 prop[0,-p+2 q+2 k[3]]^-1
```]
grid(columns: cols,gutter: 20pt,box[#embedding2f0 -1-9+17],)
pagebreak()
[= embedding 3 [1, 0, -1, -1] with multiplicity 2
 == initial
Denominator:
```mathematica
prop[0,p]^-1 prop[0,k[2]]^-1 prop[0,p+q]^-1 prop[0,p+k[2]]^-1 prop[0,p+q+k[2]]^-1
```Partial Fractioned Denominator:
```mathematica
(dot[p,p]+2 dot[p,q]+dot[q,q])^-1 prop[0,k[2]]^-1 prop[0,p+k[2]]^-1 prop[0,p+q+k[2]]^-1 dot[p,p]^-1
```]
grid(columns: cols,gutter: 20pt,box[#embedding3i0 -3-9+11],box[#embedding3i1 -3+13],)
pagebreak()
[== final
Denominator: 
```mathematica
prop[0,p]^-1 prop[0,k[2]]^-1 prop[0,p+k[2]]^-1 prop[0,p-q]^-1 prop[0,p-q+k[2]]^-1
```]
grid(columns: cols,gutter: 20pt,box[#embedding3f0 -1-9+15],box[#embedding3f1 -1+17],)
pagebreak()
[= embedding 4 [1, 0, -1, 0] with multiplicity 2
 == initial
Denominator:
```mathematica
prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,-p+k[3]]^-1 prop[0,-p-q]^-1 prop[0,-p-q+k[3]]^-1
```Partial Fractioned Denominator:
```mathematica
(2 dot[p,q]+2 dot[q,q])^-1 (dot[p,p]+2 dot[p,q]+dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,-p+k[3]]^-1
	-(2 dot[p,q]+2 dot[q,q])^-1 (dot[p,p]+2 dot[p,q]+dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,-p-q+k[3]]^-1
	+(2 dot[p,q]+2 dot[q,q])^-1 (dot[p,p]+2 dot[p,q]+dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,-p+k[3]]^-1 prop[0,-p-q+k[3]]^-1
	-(2 dot[p,q]+2 dot[q,q])^-1 (dot[p,p]+2 dot[p,q]+dot[q,q])^-1 prop[0,q+k[3]]^-1 prop[0,-p+k[3]]^-1 prop[0,-p-q+k[3]]^-1
```]
grid(columns: cols,gutter: 20pt,box[#embedding4i0 -3+13-15],)
pagebreak()
[== final
Denominator: 
```mathematica
prop[0,k[3]]^-1 prop[0,-p]^-1 prop[0,q+k[3]]^-1 prop[0,-p+k[3]]^-1 prop[0,-p+q+k[3]]^-1
```]
grid(columns: cols,gutter: 20pt,box[#embedding4f0 -1-11+13],box[#embedding4f1 -1-9],box[#embedding4f2 -1-15+17],)
pagebreak()
[= embedding 5 [1, 0, 1, 0] with multiplicity 2
 == initial
Denominator:
```mathematica
prop[0,k[3]]^-1 prop[0,p+q]^-1 prop[0,q+k[3]]^-1 prop[0,p+q+k[3]]^-1 prop[0,p+2 q+k[3]]^-1
```Partial Fractioned Denominator:
```mathematica
-(-2 dot[p,q]-2 dot[q,q])^-1 (dot[p,p]+2 dot[p,q]+dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,p+q+k[3]]^-1
	+(-2 dot[p,q]-2 dot[q,q])^-1 (dot[p,p]+2 dot[p,q]+dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,p+2 q+k[3]]^-1
	+(-2 dot[p,q]-2 dot[q,q])^-1 (dot[p,p]+2 dot[p,q]+dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,p+q+k[3]]^-1 prop[0,p+2 q+k[3]]^-1
	-(-2 dot[p,q]-2 dot[q,q])^-1 (dot[p,p]+2 dot[p,q]+dot[q,q])^-1 prop[0,q+k[3]]^-1 prop[0,p+q+k[3]]^-1 prop[0,p+2 q+k[3]]^-1
```]
grid(columns: cols,gutter: 20pt,box[#embedding5i0 -3+11-17],)
pagebreak()
[== final
Denominator: 
```mathematica
prop[0,p]^-1 prop[0,k[3]]^-1 prop[0,p+k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,p+q+k[3]]^-1
```]
grid(columns: cols,gutter: 20pt,box[#embedding5f0 -1+11-13],box[#embedding5f1 -1+9],box[#embedding5f2 -1+15-17],)
pagebreak()
[= embedding 6 [1, 1, -1, 1] with multiplicity 2
 == initial
Denominator:
```mathematica
prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,-1/2 p+1/2 q+1/2 k[3]]^-1 prop[0,-1/2 p-1/2 q+1/2 k[3]]^-1 prop[0,-1/2 p-1/2 q-1/2 k[3]]^-1
```Partial Fractioned Denominator:
```mathematica
-4 (2 dot[p,q]+dot[q,q])^-1 (-dot[p,p]-2 dot[p,q]-dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,-1/2 p+1/2 q+1/2 k[3]]^-1
	+4 (2 dot[p,q]+dot[q,q])^-1 (-dot[p,p]-2 dot[p,q]-dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,-1/2 p-1/2 q+1/2 k[3]]^-1
	-2 (2 dot[p,q]+dot[q,q])^-1 (-dot[p,p]-2 dot[p,q]-dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,-1/2 p+1/2 q+1/2 k[3]]^-1 prop[0,-1/2 p-1/2 q+1/2 k[3]]^-1
	+2 (2 dot[p,q]+dot[q,q])^-1 (-dot[p,p]-2 dot[p,q]-dot[q,q])^-1 prop[0,q+k[3]]^-1 prop[0,-1/2 p+1/2 q+1/2 k[3]]^-1 prop[0,-1/2 p-1/2 q+1/2 k[3]]^-1
	-4 (-dot[p,p]-2 dot[p,q]-dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,-1/2 p+1/2 q+1/2 k[3]]^-1 dot[p,p]^-1
	-4 (-dot[p,p]-2 dot[p,q]-dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,-1/2 p-1/2 q-1/2 k[3]]^-1 dot[p,p]^-1
	+2 (-dot[p,p]-2 dot[p,q]-dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,-1/2 p+1/2 q+1/2 k[3]]^-1 prop[0,-1/2 p-1/2 q-1/2 k[3]]^-1 dot[p,p]^-1
	+2 (-dot[p,p]-2 dot[p,q]-dot[q,q])^-1 prop[0,q+k[3]]^-1 prop[0,-1/2 p+1/2 q+1/2 k[3]]^-1 prop[0,-1/2 p-1/2 q+1/2 k[3]]^-1 dot[p,p]^-1
	+2 (-dot[p,p]-2 dot[p,q]-dot[q,q])^-1 prop[0,q+k[3]]^-1 prop[0,-1/2 p-1/2 q+1/2 k[3]]^-1 prop[0,-1/2 p-1/2 q-1/2 k[3]]^-1 dot[p,p]^-1
	-(-dot[p,p]-2 dot[p,q]-dot[q,q])^-1 prop[0,-1/2 p+1/2 q+1/2 k[3]]^-1 prop[0,-1/2 p-1/2 q+1/2 k[3]]^-1 prop[0,-1/2 p-1/2 q-1/2 k[3]]^-1 dot[p,p]^-1
```]
grid(columns: cols,gutter: 20pt,box[#embedding6i0 -3-9-15],)
pagebreak()
[== final
Denominator: 
```mathematica
prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,-1/2 p+1/2 k[3]]^-1 prop[0,-1/2 p-1/2 k[3]]^-1 prop[0,-1/2 p+q+1/2 k[3]]^-1
```]
grid(columns: cols,gutter: 20pt,box[#embedding6f0 -1-9-11],)
pagebreak()
[= embedding 7 [1, 1, 0, 1] with multiplicity 2
 == initial
Denominator:
```mathematica
prop[0,k[3]]^-1 prop[0,-p]^-1 prop[0,q+k[3]]^-1 prop[0,-p-q]^-1 prop[0,-p-q-k[3]]^-1
```Partial Fractioned Denominator:
```mathematica
(dot[p,p]+2 dot[p,q]+dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,-p-q-k[3]]^-1 dot[p,p]^-1
```]
grid(columns: cols,gutter: 20pt,box[#embedding7i0 -3-15],box[#embedding7i1 -3-9-17],)
pagebreak()
[== final
Denominator: 
```mathematica
prop[0,k[3]]^-1 prop[0,-p]^-1 prop[0,q+k[3]]^-1 prop[0,-p+q]^-1 prop[0,-p-k[3]]^-1
```]
grid(columns: cols,gutter: 20pt,box[#embedding7f0 -1-11],box[#embedding7f1 -1-9-13],)
pagebreak()
[= embedding 8 [1, 1, 1, 2] with multiplicity 2
 == initial
Denominator:
```mathematica
prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,-p-q-k[3]]^-1 prop[0,-p-2 q-k[3]]^-1 prop[0,-p-2 q-2 k[3]]^-1
```Partial Fractioned Denominator:
```mathematica
1/2 (-2 dot[p,q]-2 dot[q,q])^-1 (1/2 dot[p,p]+2 dot[p,q]+2 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,-p-q-k[3]]^-1
	-1/2 (-2 dot[p,q]-2 dot[q,q])^-1 (1/2 dot[p,p]+2 dot[p,q]+2 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,-p-2 q-k[3]]^-1
	-1/2 (-2 dot[p,q]-2 dot[q,q])^-1 (1/2 dot[p,p]+2 dot[p,q]+2 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,-p-q-k[3]]^-1 prop[0,-p-2 q-k[3]]^-1
	+1/2 (-2 dot[p,q]-2 dot[q,q])^-1 (1/2 dot[p,p]+2 dot[p,q]+2 dot[q,q])^-1 prop[0,q+k[3]]^-1 prop[0,-p-q-k[3]]^-1 prop[0,-p-2 q-k[3]]^-1
	-(1/2 dot[p,p]+2 dot[p,q]+2 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,-p-q-k[3]]^-1 dot[p,p]^-1
	+2 (1/2 dot[p,p]+2 dot[p,q]+2 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,-p-2 q-2 k[3]]^-1 dot[p,p]^-1
	+2 (1/2 dot[p,p]+2 dot[p,q]+2 dot[q,q])^-1 prop[0,k[3]]^-1 prop[0,-p-q-k[3]]^-1 prop[0,-p-2 q-2 k[3]]^-1 dot[p,p]^-1
	-(1/2 dot[p,p]+2 dot[p,q]+2 dot[q,q])^-1 prop[0,q+k[3]]^-1 prop[0,-p-q-k[3]]^-1 prop[0,-p-2 q-k[3]]^-1 dot[p,p]^-1
	+2 (1/2 dot[p,p]+2 dot[p,q]+2 dot[q,q])^-1 prop[0,q+k[3]]^-1 prop[0,-p-2 q-k[3]]^-1 prop[0,-p-2 q-2 k[3]]^-1 dot[p,p]^-1
	+2 (1/2 dot[p,p]+2 dot[p,q]+2 dot[q,q])^-1 prop[0,-p-q-k[3]]^-1 prop[0,-p-2 q-k[3]]^-1 prop[0,-p-2 q-2 k[3]]^-1 dot[p,p]^-1
```]
grid(columns: cols,gutter: 20pt,box[#embedding8i0 -3-15-17],)
pagebreak()
[== final
Denominator: 
```mathematica
prop[0,k[3]]^-1 prop[0,q+k[3]]^-1 prop[0,-p-k[3]]^-1 prop[0,-p-q-k[3]]^-1 prop[0,-p-q-2 k[3]]^-1
```]
grid(columns: cols,gutter: 20pt,box[#embedding8f0 -1-13-15],box[#embedding8f1 -1-11-17],)
pagebreak()
}